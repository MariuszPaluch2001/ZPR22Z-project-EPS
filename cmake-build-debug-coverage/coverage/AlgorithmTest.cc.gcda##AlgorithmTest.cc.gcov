        -:    0:Source:/home/kacper/Pulpit/zpr_eps/tests/AlgorithmTest.cc
        -:    0:Graph:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/AlgorithmTest.dir/AlgorithmTest.cc.gcno
        -:    0:Data:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/AlgorithmTest.dir/AlgorithmTest.cc.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kacper on 10.12.2022.
        -:    3://
        -:    4:#include "Algorithm.hpp"
        -:    5:#include <cmath>
        -:    6:#include <gtest/gtest.h>
        -:    7:
        4:    8:TEST(AlgorithmTest, TestCreateAlgorithm) {
        1:    9:    auto _ = Algorithm(0.01);
        -:   10:    (void)_;
        1:   11:}
------------------
_ZN38AlgorithmTest_TestCreateAlgorithm_TestC2Ev:
        1:    8:TEST(AlgorithmTest, TestCreateAlgorithm) {
        1:    8-block  0
------------------
_ZN38AlgorithmTest_TestCreateAlgorithm_TestD0Ev:
        1:    8:TEST(AlgorithmTest, TestCreateAlgorithm) {
        1:    8-block  0
------------------
_ZN38AlgorithmTest_TestCreateAlgorithm_TestD2Ev:
        1:    8:TEST(AlgorithmTest, TestCreateAlgorithm) {
        1:    8-block  0
------------------
_ZN38AlgorithmTest_TestCreateAlgorithm_Test8TestBodyEv:
        1:    8:TEST(AlgorithmTest, TestCreateAlgorithm) {
        1:    9:    auto _ = Algorithm(0.01);
        1:    9-block  0
        -:   10:    (void)_;
        1:   11:}
------------------
        -:   12:
        -:   13:
        4:   14:TEST(AlgorithmTest, TestGetSetMinDiff) {
        1:   15:  auto a = Algorithm(0.01);
       1*:   16:  ASSERT_FLOAT_EQ(a.getMinDifference(), 0.01);
        1:   17:  a.setMinDifference(0.1);
       1*:   18:  ASSERT_FLOAT_EQ(a.getMinDifference(), 0.1);
        -:   19:}
------------------
_ZN36AlgorithmTest_TestGetSetMinDiff_TestC2Ev:
        1:   14:TEST(AlgorithmTest, TestGetSetMinDiff) {
        1:   14-block  0
------------------
_ZN36AlgorithmTest_TestGetSetMinDiff_TestD0Ev:
        1:   14:TEST(AlgorithmTest, TestGetSetMinDiff) {
        1:   14-block  0
------------------
_ZN36AlgorithmTest_TestGetSetMinDiff_TestD2Ev:
        1:   14:TEST(AlgorithmTest, TestGetSetMinDiff) {
        1:   14-block  0
------------------
_ZN36AlgorithmTest_TestGetSetMinDiff_Test8TestBodyEv:
        1:   14:TEST(AlgorithmTest, TestGetSetMinDiff) {
        1:   15:  auto a = Algorithm(0.01);
        1:   15-block  0
       1*:   16:  ASSERT_FLOAT_EQ(a.getMinDifference(), 0.01);
        1:   16-block  0
    %%%%%:   16-block  1
    %%%%%:   16-block  2
    %%%%%:   16-block  3
    %%%%%:   16-block  4
        1:   16-block  5
        1:   16-block  6
    $$$$$:   16-block  7
    $$$$$:   16-block  8
    $$$$$:   16-block  9
    $$$$$:   16-block 10
    $$$$$:   16-block 11
        1:   17:  a.setMinDifference(0.1);
        1:   17-block  0
       1*:   18:  ASSERT_FLOAT_EQ(a.getMinDifference(), 0.1);
        1:   18-block  0
    %%%%%:   18-block  1
    %%%%%:   18-block  2
    %%%%%:   18-block  3
    %%%%%:   18-block  4
        1:   18-block  5
        1:   18-block  6
    $$$$$:   18-block  7
    $$$$$:   18-block  8
    $$$$$:   18-block  9
    $$$$$:   18-block 10
    $$$$$:   18-block 11
        -:   19:}
------------------
        -:   20:
        4:   21:TEST(AlgorithmTest, TestSetNegativeDiff) {
        1:   22:    auto a = Algorithm(0.01);
        1:   23:    a.setMinDifference(-0.1);
       1*:   24:    ASSERT_FLOAT_EQ(a.getMinDifference(), 0.01);
        -:   25:}
------------------
_ZN38AlgorithmTest_TestSetNegativeDiff_TestC2Ev:
        1:   21:TEST(AlgorithmTest, TestSetNegativeDiff) {
        1:   21-block  0
------------------
_ZN38AlgorithmTest_TestSetNegativeDiff_TestD0Ev:
        1:   21:TEST(AlgorithmTest, TestSetNegativeDiff) {
        1:   21-block  0
------------------
_ZN38AlgorithmTest_TestSetNegativeDiff_TestD2Ev:
        1:   21:TEST(AlgorithmTest, TestSetNegativeDiff) {
        1:   21-block  0
------------------
_ZN38AlgorithmTest_TestSetNegativeDiff_Test8TestBodyEv:
        1:   21:TEST(AlgorithmTest, TestSetNegativeDiff) {
        1:   22:    auto a = Algorithm(0.01);
        1:   22-block  0
        1:   23:    a.setMinDifference(-0.1);
       1*:   24:    ASSERT_FLOAT_EQ(a.getMinDifference(), 0.01);
        1:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    %%%%%:   24-block  4
        1:   24-block  5
        1:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
    $$$$$:   24-block 10
    $$$$$:   24-block 11
        -:   25:}
------------------
        -:   26:
        4:   27:TEST(AlgorithmTest, TestGetSetScalingFactor) {
        1:   28:    auto a = Algorithm(0.01);
       1*:   29:    ASSERT_FLOAT_EQ(a.getScalingFactor(), 1);
        1:   30:    a.setScalingFactor(0.1);
       1*:   31:    ASSERT_FLOAT_EQ(a.getScalingFactor(), 0.1);
        -:   32:}
------------------
_ZN42AlgorithmTest_TestGetSetScalingFactor_TestC2Ev:
        1:   27:TEST(AlgorithmTest, TestGetSetScalingFactor) {
        1:   27-block  0
------------------
_ZN42AlgorithmTest_TestGetSetScalingFactor_TestD0Ev:
        1:   27:TEST(AlgorithmTest, TestGetSetScalingFactor) {
        1:   27-block  0
------------------
_ZN42AlgorithmTest_TestGetSetScalingFactor_TestD2Ev:
        1:   27:TEST(AlgorithmTest, TestGetSetScalingFactor) {
        1:   27-block  0
------------------
_ZN42AlgorithmTest_TestGetSetScalingFactor_Test8TestBodyEv:
        1:   27:TEST(AlgorithmTest, TestGetSetScalingFactor) {
        1:   28:    auto a = Algorithm(0.01);
        1:   28-block  0
       1*:   29:    ASSERT_FLOAT_EQ(a.getScalingFactor(), 1);
        1:   29-block  0
    %%%%%:   29-block  1
    %%%%%:   29-block  2
    %%%%%:   29-block  3
    %%%%%:   29-block  4
        1:   29-block  5
        1:   29-block  6
    $$$$$:   29-block  7
    $$$$$:   29-block  8
    $$$$$:   29-block  9
    $$$$$:   29-block 10
    $$$$$:   29-block 11
        1:   30:    a.setScalingFactor(0.1);
        1:   30-block  0
       1*:   31:    ASSERT_FLOAT_EQ(a.getScalingFactor(), 0.1);
        1:   31-block  0
    %%%%%:   31-block  1
    %%%%%:   31-block  2
    %%%%%:   31-block  3
    %%%%%:   31-block  4
        1:   31-block  5
        1:   31-block  6
    $$$$$:   31-block  7
    $$$$$:   31-block  8
    $$$$$:   31-block  9
    $$$$$:   31-block 10
    $$$$$:   31-block 11
        -:   32:}
------------------
        -:   33:
        4:   34:TEST(AlgorithmTest, TestSetNegativeScalingFactor) {
        1:   35:    auto a = Algorithm(0.01);
        1:   36:    a.setScalingFactor(-0.1);
       1*:   37:    ASSERT_FLOAT_EQ(a.getMinDifference(), 0.01);
        -:   38:}
------------------
_ZN47AlgorithmTest_TestSetNegativeScalingFactor_TestC2Ev:
        1:   34:TEST(AlgorithmTest, TestSetNegativeScalingFactor) {
        1:   34-block  0
------------------
_ZN47AlgorithmTest_TestSetNegativeScalingFactor_TestD0Ev:
        1:   34:TEST(AlgorithmTest, TestSetNegativeScalingFactor) {
        1:   34-block  0
------------------
_ZN47AlgorithmTest_TestSetNegativeScalingFactor_TestD2Ev:
        1:   34:TEST(AlgorithmTest, TestSetNegativeScalingFactor) {
        1:   34-block  0
------------------
_ZN47AlgorithmTest_TestSetNegativeScalingFactor_Test8TestBodyEv:
        1:   34:TEST(AlgorithmTest, TestSetNegativeScalingFactor) {
        1:   35:    auto a = Algorithm(0.01);
        1:   35-block  0
        1:   36:    a.setScalingFactor(-0.1);
       1*:   37:    ASSERT_FLOAT_EQ(a.getMinDifference(), 0.01);
        1:   37-block  0
    %%%%%:   37-block  1
    %%%%%:   37-block  2
    %%%%%:   37-block  3
    %%%%%:   37-block  4
        1:   37-block  5
        1:   37-block  6
    $$$$$:   37-block  7
    $$$$$:   37-block  8
    $$$$$:   37-block  9
    $$$$$:   37-block 10
    $$$$$:   37-block 11
        -:   38:}
------------------
        -:   39:
        4:   40:TEST(AlgorithmTest, TestGetSetSortingRange) {
        1:   41:    auto a = Algorithm(0.01);
       1*:   42:    ASSERT_FLOAT_EQ(a.getSortingRange(), 10);
        1:   43:    a.setSortingRange(5);
       1*:   44:    ASSERT_FLOAT_EQ(a.getSortingRange(), 5);
        -:   45:}
------------------
_ZN41AlgorithmTest_TestGetSetSortingRange_TestC2Ev:
        1:   40:TEST(AlgorithmTest, TestGetSetSortingRange) {
        1:   40-block  0
------------------
_ZN41AlgorithmTest_TestGetSetSortingRange_TestD0Ev:
        1:   40:TEST(AlgorithmTest, TestGetSetSortingRange) {
        1:   40-block  0
------------------
_ZN41AlgorithmTest_TestGetSetSortingRange_TestD2Ev:
        1:   40:TEST(AlgorithmTest, TestGetSetSortingRange) {
        1:   40-block  0
------------------
_ZN41AlgorithmTest_TestGetSetSortingRange_Test8TestBodyEv:
        1:   40:TEST(AlgorithmTest, TestGetSetSortingRange) {
        1:   41:    auto a = Algorithm(0.01);
        1:   41-block  0
       1*:   42:    ASSERT_FLOAT_EQ(a.getSortingRange(), 10);
        1:   42-block  0
    %%%%%:   42-block  1
    %%%%%:   42-block  2
    %%%%%:   42-block  3
    %%%%%:   42-block  4
        1:   42-block  5
        1:   42-block  6
    $$$$$:   42-block  7
    $$$$$:   42-block  8
    $$$$$:   42-block  9
    $$$$$:   42-block 10
    $$$$$:   42-block 11
        1:   43:    a.setSortingRange(5);
        1:   43-block  0
       1*:   44:    ASSERT_FLOAT_EQ(a.getSortingRange(), 5);
        1:   44-block  0
    %%%%%:   44-block  1
    %%%%%:   44-block  2
    %%%%%:   44-block  3
    %%%%%:   44-block  4
        1:   44-block  5
        1:   44-block  6
    $$$$$:   44-block  7
    $$$$$:   44-block  8
    $$$$$:   44-block  9
    $$$$$:   44-block 10
    $$$$$:   44-block 11
        -:   45:}
------------------
       22:   46:static auto extractMovePoint = [](const auto & gc) {return gc.getMovePoint();};
------------------
_ZNKL16extractMovePointMUlRKT_E_clI16RightLineCommandEEDaS1_:
        1:   46:static auto extractMovePoint = [](const auto & gc) {return gc.getMovePoint();};
        1:   46-block  0
------------------
_ZNKL16extractMovePointMUlRKT_E_clI11MoveCommandEEDaS1_:
        1:   46:static auto extractMovePoint = [](const auto & gc) {return gc.getMovePoint();};
        1:   46-block  0
------------------
_ZNKL16extractMovePointMUlRKT_E_clI15LeftLineCommandEEDaS1_:
        2:   46:static auto extractMovePoint = [](const auto & gc) {return gc.getMovePoint();};
        2:   46-block  0
------------------
_ZNKL16extractMovePointMUlRKT_E_clI12PointCommandEEDaS1_:
       18:   46:static auto extractMovePoint = [](const auto & gc) {return gc.getMovePoint();};
       18:   46-block  0
------------------
        -:   47:
        4:   48:TEST(AlgorithmTest, TestAbsoluteBatchRescaling) {
        1:   49:    AbsoluteBatch batch;
        1:   50:    batch.push_back(PointCommand({2,2}));
        1:   51:    batch.push_back(MoveCommand({3,3}));
        -:   52:
        1:   53:    auto a = Algorithm(0.01,0.5);
        1:   54:    a.rescaleBatch(batch);
        1:   55:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
       1*:   56:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
       1*:   57:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        -:   58:
        1:   59:    new_move_point = std::visit(extractMovePoint,batch.at(1));
       1*:   60:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1.5);
       1*:   61:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1.5);
        1:   62:}
------------------
_ZN45AlgorithmTest_TestAbsoluteBatchRescaling_TestC2Ev:
        1:   48:TEST(AlgorithmTest, TestAbsoluteBatchRescaling) {
        1:   48-block  0
------------------
_ZN45AlgorithmTest_TestAbsoluteBatchRescaling_TestD0Ev:
        1:   48:TEST(AlgorithmTest, TestAbsoluteBatchRescaling) {
        1:   48-block  0
------------------
_ZN45AlgorithmTest_TestAbsoluteBatchRescaling_TestD2Ev:
        1:   48:TEST(AlgorithmTest, TestAbsoluteBatchRescaling) {
        1:   48-block  0
------------------
_ZN45AlgorithmTest_TestAbsoluteBatchRescaling_Test8TestBodyEv:
        1:   48:TEST(AlgorithmTest, TestAbsoluteBatchRescaling) {
        1:   49:    AbsoluteBatch batch;
        1:   49-block  0
        1:   50:    batch.push_back(PointCommand({2,2}));
        1:   50-block  0
    $$$$$:   50-block  1
    $$$$$:   50-block  2
    $$$$$:   50-block  3
    $$$$$:   50-block  4
    $$$$$:   50-block  5
        1:   51:    batch.push_back(MoveCommand({3,3}));
        1:   51-block  0
    $$$$$:   51-block  1
    $$$$$:   51-block  2
    $$$$$:   51-block  3
    $$$$$:   51-block  4
    $$$$$:   51-block  5
        -:   52:
        1:   53:    auto a = Algorithm(0.01,0.5);
        1:   54:    a.rescaleBatch(batch);
        1:   55:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
        1:   55-block  0
        1:   55-block  1
       1*:   56:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
        1:   56-block  0
        1:   56-block  1
    %%%%%:   56-block  2
    %%%%%:   56-block  3
    %%%%%:   56-block  4
    %%%%%:   56-block  5
        1:   56-block  6
        1:   56-block  7
    $$$$$:   56-block  8
    $$$$$:   56-block  9
    $$$$$:   56-block 10
    $$$$$:   56-block 11
    $$$$$:   56-block 12
       1*:   57:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:   57-block  0
        1:   57-block  1
    %%%%%:   57-block  2
    %%%%%:   57-block  3
    %%%%%:   57-block  4
    %%%%%:   57-block  5
        1:   57-block  6
        1:   57-block  7
    $$$$$:   57-block  8
    $$$$$:   57-block  9
    $$$$$:   57-block 10
    $$$$$:   57-block 11
    $$$$$:   57-block 12
        -:   58:
        1:   59:    new_move_point = std::visit(extractMovePoint,batch.at(1));
        1:   59-block  0
        1:   59-block  1
       1*:   60:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1.5);
        1:   60-block  0
        1:   60-block  1
    %%%%%:   60-block  2
    %%%%%:   60-block  3
    %%%%%:   60-block  4
    %%%%%:   60-block  5
        1:   60-block  6
        1:   60-block  7
    $$$$$:   60-block  8
    $$$$$:   60-block  9
    $$$$$:   60-block 10
    $$$$$:   60-block 11
    $$$$$:   60-block 12
       1*:   61:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1.5);
        1:   61-block  0
        1:   61-block  1
    %%%%%:   61-block  2
    %%%%%:   61-block  3
    %%%%%:   61-block  4
    %%%%%:   61-block  5
        1:   61-block  6
        1:   61-block  7
    $$$$$:   61-block  8
    $$$$$:   61-block  9
    $$$$$:   61-block 10
    $$$$$:   61-block 11
    $$$$$:   61-block 12
        1:   62:}
        1:   62-block  0
        1:   62-block  1
    $$$$$:   62-block  2
------------------
        -:   63:
        4:   64:TEST(AlgorithmTest, TestRelativeBatchRescaling) {
        1:   65:    RelativeBatch batch;
        1:   66:    batch.push_back(LeftLineCommand({2,2}));
        1:   67:    batch.push_back(RightLineCommand({3,3}));
        -:   68:
        1:   69:    auto a = Algorithm(0.01,0.5);
        1:   70:    a.rescaleBatch(batch);
        1:   71:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
       1*:   72:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
       1*:   73:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        -:   74:
        1:   75:    new_move_point = std::visit(extractMovePoint,batch.at(1));
       1*:   76:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1.5);
       1*:   77:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1.5);
        1:   78:}
------------------
_ZN45AlgorithmTest_TestRelativeBatchRescaling_TestC2Ev:
        1:   64:TEST(AlgorithmTest, TestRelativeBatchRescaling) {
        1:   64-block  0
------------------
_ZN45AlgorithmTest_TestRelativeBatchRescaling_TestD0Ev:
        1:   64:TEST(AlgorithmTest, TestRelativeBatchRescaling) {
        1:   64-block  0
------------------
_ZN45AlgorithmTest_TestRelativeBatchRescaling_TestD2Ev:
        1:   64:TEST(AlgorithmTest, TestRelativeBatchRescaling) {
        1:   64-block  0
------------------
_ZN45AlgorithmTest_TestRelativeBatchRescaling_Test8TestBodyEv:
        1:   64:TEST(AlgorithmTest, TestRelativeBatchRescaling) {
        1:   65:    RelativeBatch batch;
        1:   65-block  0
        1:   66:    batch.push_back(LeftLineCommand({2,2}));
        1:   66-block  0
    $$$$$:   66-block  1
    $$$$$:   66-block  2
    $$$$$:   66-block  3
    $$$$$:   66-block  4
    $$$$$:   66-block  5
        1:   67:    batch.push_back(RightLineCommand({3,3}));
        1:   67-block  0
    $$$$$:   67-block  1
    $$$$$:   67-block  2
    $$$$$:   67-block  3
    $$$$$:   67-block  4
    $$$$$:   67-block  5
        -:   68:
        1:   69:    auto a = Algorithm(0.01,0.5);
        1:   70:    a.rescaleBatch(batch);
        1:   71:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
        1:   71-block  0
        1:   71-block  1
       1*:   72:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
        1:   72-block  0
        1:   72-block  1
    %%%%%:   72-block  2
    %%%%%:   72-block  3
    %%%%%:   72-block  4
    %%%%%:   72-block  5
        1:   72-block  6
        1:   72-block  7
    $$$$$:   72-block  8
    $$$$$:   72-block  9
    $$$$$:   72-block 10
    $$$$$:   72-block 11
    $$$$$:   72-block 12
       1*:   73:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:   73-block  0
        1:   73-block  1
    %%%%%:   73-block  2
    %%%%%:   73-block  3
    %%%%%:   73-block  4
    %%%%%:   73-block  5
        1:   73-block  6
        1:   73-block  7
    $$$$$:   73-block  8
    $$$$$:   73-block  9
    $$$$$:   73-block 10
    $$$$$:   73-block 11
    $$$$$:   73-block 12
        -:   74:
        1:   75:    new_move_point = std::visit(extractMovePoint,batch.at(1));
        1:   75-block  0
        1:   75-block  1
       1*:   76:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1.5);
        1:   76-block  0
        1:   76-block  1
    %%%%%:   76-block  2
    %%%%%:   76-block  3
    %%%%%:   76-block  4
    %%%%%:   76-block  5
        1:   76-block  6
        1:   76-block  7
    $$$$$:   76-block  8
    $$$$$:   76-block  9
    $$$$$:   76-block 10
    $$$$$:   76-block 11
    $$$$$:   76-block 12
       1*:   77:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1.5);
        1:   77-block  0
        1:   77-block  1
    %%%%%:   77-block  2
    %%%%%:   77-block  3
    %%%%%:   77-block  4
    %%%%%:   77-block  5
        1:   77-block  6
        1:   77-block  7
    $$$$$:   77-block  8
    $$$$$:   77-block  9
    $$$$$:   77-block 10
    $$$$$:   77-block 11
    $$$$$:   77-block 12
        1:   78:}
        1:   78-block  0
        1:   78-block  1
    $$$$$:   78-block  2
------------------
        -:   79:
        4:   80:TEST(AlgorithmTest, TestSortAbsoluteBatch) {
        1:   81:    AbsoluteBatch batch;
        1:   82:    batch.push_back(PointCommand({0,0}));
        1:   83:    batch.push_back(PointCommand({4,4}));
        1:   84:    batch.push_back(PointCommand({1,1}));
        1:   85:    batch.push_back(PointCommand({4,4}));
        1:   86:    batch.push_back(PointCommand({4,4}));
        1:   87:    batch.push_back(PointCommand({0,0}));
        1:   88:    auto a = Algorithm(1,1,5);
        -:   89:
        1:   90:    a.sortBatch(batch);
        1:   91:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
       1*:   92:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
       1*:   93:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        -:   94:
        1:   95:    new_move_point = std::visit(extractMovePoint,batch.at(1));
       1*:   96:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
       1*:   97:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        -:   98:
        1:   99:    new_move_point = std::visit(extractMovePoint,batch.at(2));
       1*:  100:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
       1*:  101:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        -:  102:
        1:  103:    new_move_point = std::visit(extractMovePoint,batch.at(3));
       1*:  104:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
       1*:  105:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        -:  106:
        1:  107:    new_move_point = std::visit(extractMovePoint,batch.at(4));
       1*:  108:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
       1*:  109:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        -:  110:
        1:  111:    new_move_point = std::visit(extractMovePoint,batch.at(5));
       1*:  112:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
       1*:  113:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        1:  114:}
------------------
_ZN40AlgorithmTest_TestSortAbsoluteBatch_TestC2Ev:
        1:   80:TEST(AlgorithmTest, TestSortAbsoluteBatch) {
        1:   80-block  0
------------------
_ZN40AlgorithmTest_TestSortAbsoluteBatch_TestD0Ev:
        1:   80:TEST(AlgorithmTest, TestSortAbsoluteBatch) {
        1:   80-block  0
------------------
_ZN40AlgorithmTest_TestSortAbsoluteBatch_TestD2Ev:
        1:   80:TEST(AlgorithmTest, TestSortAbsoluteBatch) {
        1:   80-block  0
------------------
_ZN40AlgorithmTest_TestSortAbsoluteBatch_Test8TestBodyEv:
        1:   80:TEST(AlgorithmTest, TestSortAbsoluteBatch) {
        1:   81:    AbsoluteBatch batch;
        1:   81-block  0
        1:   82:    batch.push_back(PointCommand({0,0}));
        1:   82-block  0
    $$$$$:   82-block  1
    $$$$$:   82-block  2
    $$$$$:   82-block  3
    $$$$$:   82-block  4
    $$$$$:   82-block  5
        1:   83:    batch.push_back(PointCommand({4,4}));
        1:   83-block  0
    $$$$$:   83-block  1
    $$$$$:   83-block  2
    $$$$$:   83-block  3
    $$$$$:   83-block  4
    $$$$$:   83-block  5
        1:   84:    batch.push_back(PointCommand({1,1}));
        1:   84-block  0
    $$$$$:   84-block  1
    $$$$$:   84-block  2
    $$$$$:   84-block  3
    $$$$$:   84-block  4
    $$$$$:   84-block  5
        1:   85:    batch.push_back(PointCommand({4,4}));
        1:   85-block  0
    $$$$$:   85-block  1
    $$$$$:   85-block  2
    $$$$$:   85-block  3
    $$$$$:   85-block  4
    $$$$$:   85-block  5
        1:   86:    batch.push_back(PointCommand({4,4}));
        1:   86-block  0
    $$$$$:   86-block  1
    $$$$$:   86-block  2
    $$$$$:   86-block  3
    $$$$$:   86-block  4
    $$$$$:   86-block  5
        1:   87:    batch.push_back(PointCommand({0,0}));
        1:   87-block  0
    $$$$$:   87-block  1
    $$$$$:   87-block  2
    $$$$$:   87-block  3
    $$$$$:   87-block  4
    $$$$$:   87-block  5
        1:   88:    auto a = Algorithm(1,1,5);
        -:   89:
        1:   90:    a.sortBatch(batch);
        1:   91:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
        1:   91-block  0
        1:   91-block  1
       1*:   92:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
        1:   92-block  0
        1:   92-block  1
    %%%%%:   92-block  2
    %%%%%:   92-block  3
    %%%%%:   92-block  4
    %%%%%:   92-block  5
        1:   92-block  6
        1:   92-block  7
    $$$$$:   92-block  8
    $$$$$:   92-block  9
    $$$$$:   92-block 10
    $$$$$:   92-block 11
    $$$$$:   92-block 12
       1*:   93:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        1:   93-block  0
        1:   93-block  1
    %%%%%:   93-block  2
    %%%%%:   93-block  3
    %%%%%:   93-block  4
    %%%%%:   93-block  5
        1:   93-block  6
        1:   93-block  7
    $$$$$:   93-block  8
    $$$$$:   93-block  9
    $$$$$:   93-block 10
    $$$$$:   93-block 11
    $$$$$:   93-block 12
        -:   94:
        1:   95:    new_move_point = std::visit(extractMovePoint,batch.at(1));
        1:   95-block  0
        1:   95-block  1
       1*:   96:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
        1:   96-block  0
        1:   96-block  1
    %%%%%:   96-block  2
    %%%%%:   96-block  3
    %%%%%:   96-block  4
    %%%%%:   96-block  5
        1:   96-block  6
        1:   96-block  7
    $$$$$:   96-block  8
    $$$$$:   96-block  9
    $$$$$:   96-block 10
    $$$$$:   96-block 11
    $$$$$:   96-block 12
       1*:   97:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:   97-block  0
        1:   97-block  1
    %%%%%:   97-block  2
    %%%%%:   97-block  3
    %%%%%:   97-block  4
    %%%%%:   97-block  5
        1:   97-block  6
        1:   97-block  7
    $$$$$:   97-block  8
    $$$$$:   97-block  9
    $$$$$:   97-block 10
    $$$$$:   97-block 11
    $$$$$:   97-block 12
        -:   98:
        1:   99:    new_move_point = std::visit(extractMovePoint,batch.at(2));
        1:   99-block  0
        1:   99-block  1
       1*:  100:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
        1:  100-block  0
        1:  100-block  1
    %%%%%:  100-block  2
    %%%%%:  100-block  3
    %%%%%:  100-block  4
    %%%%%:  100-block  5
        1:  100-block  6
        1:  100-block  7
    $$$$$:  100-block  8
    $$$$$:  100-block  9
    $$$$$:  100-block 10
    $$$$$:  100-block 11
    $$$$$:  100-block 12
       1*:  101:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        1:  101-block  0
        1:  101-block  1
    %%%%%:  101-block  2
    %%%%%:  101-block  3
    %%%%%:  101-block  4
    %%%%%:  101-block  5
        1:  101-block  6
        1:  101-block  7
    $$$$$:  101-block  8
    $$$$$:  101-block  9
    $$$$$:  101-block 10
    $$$$$:  101-block 11
    $$$$$:  101-block 12
        -:  102:
        1:  103:    new_move_point = std::visit(extractMovePoint,batch.at(3));
        1:  103-block  0
        1:  103-block  1
       1*:  104:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
        1:  104-block  0
        1:  104-block  1
    %%%%%:  104-block  2
    %%%%%:  104-block  3
    %%%%%:  104-block  4
    %%%%%:  104-block  5
        1:  104-block  6
        1:  104-block  7
    $$$$$:  104-block  8
    $$$$$:  104-block  9
    $$$$$:  104-block 10
    $$$$$:  104-block 11
    $$$$$:  104-block 12
       1*:  105:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        1:  105-block  0
        1:  105-block  1
    %%%%%:  105-block  2
    %%%%%:  105-block  3
    %%%%%:  105-block  4
    %%%%%:  105-block  5
        1:  105-block  6
        1:  105-block  7
    $$$$$:  105-block  8
    $$$$$:  105-block  9
    $$$$$:  105-block 10
    $$$$$:  105-block 11
    $$$$$:  105-block 12
        -:  106:
        1:  107:    new_move_point = std::visit(extractMovePoint,batch.at(4));
        1:  107-block  0
        1:  107-block  1
       1*:  108:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
        1:  108-block  0
        1:  108-block  1
    %%%%%:  108-block  2
    %%%%%:  108-block  3
    %%%%%:  108-block  4
    %%%%%:  108-block  5
        1:  108-block  6
        1:  108-block  7
    $$$$$:  108-block  8
    $$$$$:  108-block  9
    $$$$$:  108-block 10
    $$$$$:  108-block 11
    $$$$$:  108-block 12
       1*:  109:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        1:  109-block  0
        1:  109-block  1
    %%%%%:  109-block  2
    %%%%%:  109-block  3
    %%%%%:  109-block  4
    %%%%%:  109-block  5
        1:  109-block  6
        1:  109-block  7
    $$$$$:  109-block  8
    $$$$$:  109-block  9
    $$$$$:  109-block 10
    $$$$$:  109-block 11
    $$$$$:  109-block 12
        -:  110:
        1:  111:    new_move_point = std::visit(extractMovePoint,batch.at(5));
        1:  111-block  0
        1:  111-block  1
       1*:  112:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
        1:  112-block  0
        1:  112-block  1
    %%%%%:  112-block  2
    %%%%%:  112-block  3
    %%%%%:  112-block  4
    %%%%%:  112-block  5
        1:  112-block  6
        1:  112-block  7
    $$$$$:  112-block  8
    $$$$$:  112-block  9
    $$$$$:  112-block 10
    $$$$$:  112-block 11
    $$$$$:  112-block 12
       1*:  113:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        1:  113-block  0
        1:  113-block  1
    %%%%%:  113-block  2
    %%%%%:  113-block  3
    %%%%%:  113-block  4
    %%%%%:  113-block  5
        1:  113-block  6
        1:  113-block  7
    $$$$$:  113-block  8
    $$$$$:  113-block  9
    $$$$$:  113-block 10
    $$$$$:  113-block 11
    $$$$$:  113-block 12
        1:  114:}
        1:  114-block  0
        1:  114-block  1
    $$$$$:  114-block  2
------------------
        -:  115:
        4:  116:TEST(AlgorithmTest, TestSortAbsoluteBatchTooSmall) {
        1:  117:    AbsoluteBatch batch;
        1:  118:    batch.push_back(PointCommand({0,0}));
        1:  119:    batch.push_back(PointCommand({4,4}));
        1:  120:    batch.push_back(PointCommand({1,1}));
        1:  121:    batch.push_back(PointCommand({4,4}));
        1:  122:    batch.push_back(PointCommand({4,4}));
        1:  123:    batch.push_back(PointCommand({0,0}));
        1:  124:    auto a = Algorithm(1,1,10);
        -:  125:
        1:  126:    a.sortBatch(batch);
        1:  127:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
       1*:  128:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
       1*:  129:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        -:  130:
        1:  131:    new_move_point = std::visit(extractMovePoint,batch.at(1));
       1*:  132:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
       1*:  133:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        -:  134:
        1:  135:    new_move_point = std::visit(extractMovePoint,batch.at(2));
       1*:  136:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
       1*:  137:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        -:  138:
        1:  139:    new_move_point = std::visit(extractMovePoint,batch.at(3));
       1*:  140:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
       1*:  141:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        -:  142:
        1:  143:    new_move_point = std::visit(extractMovePoint,batch.at(4));
       1*:  144:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
       1*:  145:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        -:  146:
        1:  147:    new_move_point = std::visit(extractMovePoint,batch.at(5));
       1*:  148:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
       1*:  149:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        1:  150:}
------------------
_ZN48AlgorithmTest_TestSortAbsoluteBatchTooSmall_TestC2Ev:
        1:  116:TEST(AlgorithmTest, TestSortAbsoluteBatchTooSmall) {
        1:  116-block  0
------------------
_ZN48AlgorithmTest_TestSortAbsoluteBatchTooSmall_TestD0Ev:
        1:  116:TEST(AlgorithmTest, TestSortAbsoluteBatchTooSmall) {
        1:  116-block  0
------------------
_ZN48AlgorithmTest_TestSortAbsoluteBatchTooSmall_TestD2Ev:
        1:  116:TEST(AlgorithmTest, TestSortAbsoluteBatchTooSmall) {
        1:  116-block  0
------------------
_ZN48AlgorithmTest_TestSortAbsoluteBatchTooSmall_Test8TestBodyEv:
        1:  116:TEST(AlgorithmTest, TestSortAbsoluteBatchTooSmall) {
        1:  117:    AbsoluteBatch batch;
        1:  117-block  0
        1:  118:    batch.push_back(PointCommand({0,0}));
        1:  118-block  0
    $$$$$:  118-block  1
    $$$$$:  118-block  2
    $$$$$:  118-block  3
    $$$$$:  118-block  4
    $$$$$:  118-block  5
        1:  119:    batch.push_back(PointCommand({4,4}));
        1:  119-block  0
    $$$$$:  119-block  1
    $$$$$:  119-block  2
    $$$$$:  119-block  3
    $$$$$:  119-block  4
    $$$$$:  119-block  5
        1:  120:    batch.push_back(PointCommand({1,1}));
        1:  120-block  0
    $$$$$:  120-block  1
    $$$$$:  120-block  2
    $$$$$:  120-block  3
    $$$$$:  120-block  4
    $$$$$:  120-block  5
        1:  121:    batch.push_back(PointCommand({4,4}));
        1:  121-block  0
    $$$$$:  121-block  1
    $$$$$:  121-block  2
    $$$$$:  121-block  3
    $$$$$:  121-block  4
    $$$$$:  121-block  5
        1:  122:    batch.push_back(PointCommand({4,4}));
        1:  122-block  0
    $$$$$:  122-block  1
    $$$$$:  122-block  2
    $$$$$:  122-block  3
    $$$$$:  122-block  4
    $$$$$:  122-block  5
        1:  123:    batch.push_back(PointCommand({0,0}));
        1:  123-block  0
    $$$$$:  123-block  1
    $$$$$:  123-block  2
    $$$$$:  123-block  3
    $$$$$:  123-block  4
    $$$$$:  123-block  5
        1:  124:    auto a = Algorithm(1,1,10);
        -:  125:
        1:  126:    a.sortBatch(batch);
        1:  127:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
        1:  127-block  0
        1:  127-block  1
       1*:  128:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
        1:  128-block  0
        1:  128-block  1
    %%%%%:  128-block  2
    %%%%%:  128-block  3
    %%%%%:  128-block  4
    %%%%%:  128-block  5
        1:  128-block  6
        1:  128-block  7
    $$$$$:  128-block  8
    $$$$$:  128-block  9
    $$$$$:  128-block 10
    $$$$$:  128-block 11
    $$$$$:  128-block 12
       1*:  129:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        1:  129-block  0
        1:  129-block  1
    %%%%%:  129-block  2
    %%%%%:  129-block  3
    %%%%%:  129-block  4
    %%%%%:  129-block  5
        1:  129-block  6
        1:  129-block  7
    $$$$$:  129-block  8
    $$$$$:  129-block  9
    $$$$$:  129-block 10
    $$$$$:  129-block 11
    $$$$$:  129-block 12
        -:  130:
        1:  131:    new_move_point = std::visit(extractMovePoint,batch.at(1));
        1:  131-block  0
        1:  131-block  1
       1*:  132:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
        1:  132-block  0
        1:  132-block  1
    %%%%%:  132-block  2
    %%%%%:  132-block  3
    %%%%%:  132-block  4
    %%%%%:  132-block  5
        1:  132-block  6
        1:  132-block  7
    $$$$$:  132-block  8
    $$$$$:  132-block  9
    $$$$$:  132-block 10
    $$$$$:  132-block 11
    $$$$$:  132-block 12
       1*:  133:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        1:  133-block  0
        1:  133-block  1
    %%%%%:  133-block  2
    %%%%%:  133-block  3
    %%%%%:  133-block  4
    %%%%%:  133-block  5
        1:  133-block  6
        1:  133-block  7
    $$$$$:  133-block  8
    $$$$$:  133-block  9
    $$$$$:  133-block 10
    $$$$$:  133-block 11
    $$$$$:  133-block 12
        -:  134:
        1:  135:    new_move_point = std::visit(extractMovePoint,batch.at(2));
        1:  135-block  0
        1:  135-block  1
       1*:  136:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
        1:  136-block  0
        1:  136-block  1
    %%%%%:  136-block  2
    %%%%%:  136-block  3
    %%%%%:  136-block  4
    %%%%%:  136-block  5
        1:  136-block  6
        1:  136-block  7
    $$$$$:  136-block  8
    $$$$$:  136-block  9
    $$$$$:  136-block 10
    $$$$$:  136-block 11
    $$$$$:  136-block 12
       1*:  137:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:  137-block  0
        1:  137-block  1
    %%%%%:  137-block  2
    %%%%%:  137-block  3
    %%%%%:  137-block  4
    %%%%%:  137-block  5
        1:  137-block  6
        1:  137-block  7
    $$$$$:  137-block  8
    $$$$$:  137-block  9
    $$$$$:  137-block 10
    $$$$$:  137-block 11
    $$$$$:  137-block 12
        -:  138:
        1:  139:    new_move_point = std::visit(extractMovePoint,batch.at(3));
        1:  139-block  0
        1:  139-block  1
       1*:  140:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
        1:  140-block  0
        1:  140-block  1
    %%%%%:  140-block  2
    %%%%%:  140-block  3
    %%%%%:  140-block  4
    %%%%%:  140-block  5
        1:  140-block  6
        1:  140-block  7
    $$$$$:  140-block  8
    $$$$$:  140-block  9
    $$$$$:  140-block 10
    $$$$$:  140-block 11
    $$$$$:  140-block 12
       1*:  141:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        1:  141-block  0
        1:  141-block  1
    %%%%%:  141-block  2
    %%%%%:  141-block  3
    %%%%%:  141-block  4
    %%%%%:  141-block  5
        1:  141-block  6
        1:  141-block  7
    $$$$$:  141-block  8
    $$$$$:  141-block  9
    $$$$$:  141-block 10
    $$$$$:  141-block 11
    $$$$$:  141-block 12
        -:  142:
        1:  143:    new_move_point = std::visit(extractMovePoint,batch.at(4));
        1:  143-block  0
        1:  143-block  1
       1*:  144:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
        1:  144-block  0
        1:  144-block  1
    %%%%%:  144-block  2
    %%%%%:  144-block  3
    %%%%%:  144-block  4
    %%%%%:  144-block  5
        1:  144-block  6
        1:  144-block  7
    $$$$$:  144-block  8
    $$$$$:  144-block  9
    $$$$$:  144-block 10
    $$$$$:  144-block 11
    $$$$$:  144-block 12
       1*:  145:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        1:  145-block  0
        1:  145-block  1
    %%%%%:  145-block  2
    %%%%%:  145-block  3
    %%%%%:  145-block  4
    %%%%%:  145-block  5
        1:  145-block  6
        1:  145-block  7
    $$$$$:  145-block  8
    $$$$$:  145-block  9
    $$$$$:  145-block 10
    $$$$$:  145-block 11
    $$$$$:  145-block 12
        -:  146:
        1:  147:    new_move_point = std::visit(extractMovePoint,batch.at(5));
        1:  147-block  0
        1:  147-block  1
       1*:  148:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
        1:  148-block  0
        1:  148-block  1
    %%%%%:  148-block  2
    %%%%%:  148-block  3
    %%%%%:  148-block  4
    %%%%%:  148-block  5
        1:  148-block  6
        1:  148-block  7
    $$$$$:  148-block  8
    $$$$$:  148-block  9
    $$$$$:  148-block 10
    $$$$$:  148-block 11
    $$$$$:  148-block 12
       1*:  149:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        1:  149-block  0
        1:  149-block  1
    %%%%%:  149-block  2
    %%%%%:  149-block  3
    %%%%%:  149-block  4
    %%%%%:  149-block  5
        1:  149-block  6
        1:  149-block  7
    $$$$$:  149-block  8
    $$$$$:  149-block  9
    $$$$$:  149-block 10
    $$$$$:  149-block 11
    $$$$$:  149-block 12
        1:  150:}
        1:  150-block  0
        1:  150-block  1
    $$$$$:  150-block  2
------------------
        -:  151:
        4:  152:TEST(AlgorithmTest, TestProcessAbsoluteBatch) {
        1:  153:    AbsoluteBatch batch;
        1:  154:    batch.push_back(PointCommand({0,0}));
        1:  155:    batch.push_back(PointCommand({4,4}));
        1:  156:    batch.push_back(PointCommand({1,1}));
        1:  157:    batch.push_back(PointCommand({4,4}));
        1:  158:    batch.push_back(PointCommand({4,4}));
        1:  159:    batch.push_back(PointCommand({0,0}));
        1:  160:    auto a = Algorithm(1,1,5);
        1:  161:    a.rescaleBatch(batch);
        1:  162:    a.sortBatch(batch);
        1:  163:    batch = a.processBatch(batch);
       1*:  164:    ASSERT_EQ(batch.size(), 4);
        1:  165:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
       1*:  166:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
       1*:  167:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        -:  168:
        1:  169:    new_move_point = std::visit(extractMovePoint,batch.at(1));
       1*:  170:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
       1*:  171:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        -:  172:
        1:  173:    new_move_point = std::visit(extractMovePoint,batch.at(2));
       1*:  174:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
       1*:  175:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        -:  176:
        1:  177:    new_move_point = std::visit(extractMovePoint,batch.at(3));
       1*:  178:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
       1*:  179:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        1:  180:}
------------------
_ZN43AlgorithmTest_TestProcessAbsoluteBatch_TestC2Ev:
        1:  152:TEST(AlgorithmTest, TestProcessAbsoluteBatch) {
        1:  152-block  0
------------------
_ZN43AlgorithmTest_TestProcessAbsoluteBatch_TestD0Ev:
        1:  152:TEST(AlgorithmTest, TestProcessAbsoluteBatch) {
        1:  152-block  0
------------------
_ZN43AlgorithmTest_TestProcessAbsoluteBatch_TestD2Ev:
        1:  152:TEST(AlgorithmTest, TestProcessAbsoluteBatch) {
        1:  152-block  0
------------------
_ZN43AlgorithmTest_TestProcessAbsoluteBatch_Test8TestBodyEv:
        1:  152:TEST(AlgorithmTest, TestProcessAbsoluteBatch) {
        1:  153:    AbsoluteBatch batch;
        1:  153-block  0
        1:  154:    batch.push_back(PointCommand({0,0}));
        1:  154-block  0
    $$$$$:  154-block  1
    $$$$$:  154-block  2
    $$$$$:  154-block  3
    $$$$$:  154-block  4
    $$$$$:  154-block  5
        1:  155:    batch.push_back(PointCommand({4,4}));
        1:  155-block  0
    $$$$$:  155-block  1
    $$$$$:  155-block  2
    $$$$$:  155-block  3
    $$$$$:  155-block  4
    $$$$$:  155-block  5
        1:  156:    batch.push_back(PointCommand({1,1}));
        1:  156-block  0
    $$$$$:  156-block  1
    $$$$$:  156-block  2
    $$$$$:  156-block  3
    $$$$$:  156-block  4
    $$$$$:  156-block  5
        1:  157:    batch.push_back(PointCommand({4,4}));
        1:  157-block  0
    $$$$$:  157-block  1
    $$$$$:  157-block  2
    $$$$$:  157-block  3
    $$$$$:  157-block  4
    $$$$$:  157-block  5
        1:  158:    batch.push_back(PointCommand({4,4}));
        1:  158-block  0
    $$$$$:  158-block  1
    $$$$$:  158-block  2
    $$$$$:  158-block  3
    $$$$$:  158-block  4
    $$$$$:  158-block  5
        1:  159:    batch.push_back(PointCommand({0,0}));
        1:  159-block  0
    $$$$$:  159-block  1
    $$$$$:  159-block  2
    $$$$$:  159-block  3
    $$$$$:  159-block  4
    $$$$$:  159-block  5
        1:  160:    auto a = Algorithm(1,1,5);
        1:  161:    a.rescaleBatch(batch);
        1:  162:    a.sortBatch(batch);
        1:  162-block  0
        1:  163:    batch = a.processBatch(batch);
        1:  163-block  0
        1:  163-block  1
       1*:  164:    ASSERT_EQ(batch.size(), 4);
        1:  164-block  0
    %%%%%:  164-block  1
    %%%%%:  164-block  2
    %%%%%:  164-block  3
    %%%%%:  164-block  4
        1:  164-block  5
        1:  164-block  6
    $$$$$:  164-block  7
    $$$$$:  164-block  8
    $$$$$:  164-block  9
    $$$$$:  164-block 10
    $$$$$:  164-block 11
    $$$$$:  164-block 12
    $$$$$:  164-block 13
        1:  165:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
        1:  165-block  0
        1:  165-block  1
       1*:  166:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
        1:  166-block  0
        1:  166-block  1
    %%%%%:  166-block  2
    %%%%%:  166-block  3
    %%%%%:  166-block  4
    %%%%%:  166-block  5
        1:  166-block  6
        1:  166-block  7
    $$$$$:  166-block  8
    $$$$$:  166-block  9
    $$$$$:  166-block 10
    $$$$$:  166-block 11
    $$$$$:  166-block 12
       1*:  167:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        1:  167-block  0
        1:  167-block  1
    %%%%%:  167-block  2
    %%%%%:  167-block  3
    %%%%%:  167-block  4
    %%%%%:  167-block  5
        1:  167-block  6
        1:  167-block  7
    $$$$$:  167-block  8
    $$$$$:  167-block  9
    $$$$$:  167-block 10
    $$$$$:  167-block 11
    $$$$$:  167-block 12
        -:  168:
        1:  169:    new_move_point = std::visit(extractMovePoint,batch.at(1));
        1:  169-block  0
        1:  169-block  1
       1*:  170:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
        1:  170-block  0
        1:  170-block  1
    %%%%%:  170-block  2
    %%%%%:  170-block  3
    %%%%%:  170-block  4
    %%%%%:  170-block  5
        1:  170-block  6
        1:  170-block  7
    $$$$$:  170-block  8
    $$$$$:  170-block  9
    $$$$$:  170-block 10
    $$$$$:  170-block 11
    $$$$$:  170-block 12
       1*:  171:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:  171-block  0
        1:  171-block  1
    %%%%%:  171-block  2
    %%%%%:  171-block  3
    %%%%%:  171-block  4
    %%%%%:  171-block  5
        1:  171-block  6
        1:  171-block  7
    $$$$$:  171-block  8
    $$$$$:  171-block  9
    $$$$$:  171-block 10
    $$$$$:  171-block 11
    $$$$$:  171-block 12
        -:  172:
        1:  173:    new_move_point = std::visit(extractMovePoint,batch.at(2));
        1:  173-block  0
        1:  173-block  1
       1*:  174:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
        1:  174-block  0
        1:  174-block  1
    %%%%%:  174-block  2
    %%%%%:  174-block  3
    %%%%%:  174-block  4
    %%%%%:  174-block  5
        1:  174-block  6
        1:  174-block  7
    $$$$$:  174-block  8
    $$$$$:  174-block  9
    $$$$$:  174-block 10
    $$$$$:  174-block 11
    $$$$$:  174-block 12
       1*:  175:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4);
        1:  175-block  0
        1:  175-block  1
    %%%%%:  175-block  2
    %%%%%:  175-block  3
    %%%%%:  175-block  4
    %%%%%:  175-block  5
        1:  175-block  6
        1:  175-block  7
    $$$$$:  175-block  8
    $$$$$:  175-block  9
    $$$$$:  175-block 10
    $$$$$:  175-block 11
    $$$$$:  175-block 12
        -:  176:
        1:  177:    new_move_point = std::visit(extractMovePoint,batch.at(3));
        1:  177-block  0
        1:  177-block  1
       1*:  178:    ASSERT_FLOAT_EQ(new_move_point.getX(), 0);
        1:  178-block  0
        1:  178-block  1
    %%%%%:  178-block  2
    %%%%%:  178-block  3
    %%%%%:  178-block  4
    %%%%%:  178-block  5
        1:  178-block  6
        1:  178-block  7
    $$$$$:  178-block  8
    $$$$$:  178-block  9
    $$$$$:  178-block 10
    $$$$$:  178-block 11
    $$$$$:  178-block 12
       1*:  179:    ASSERT_FLOAT_EQ(new_move_point.getY(), 0);
        1:  179-block  0
        1:  179-block  1
    %%%%%:  179-block  2
    %%%%%:  179-block  3
    %%%%%:  179-block  4
    %%%%%:  179-block  5
        1:  179-block  6
        1:  179-block  7
    $$$$$:  179-block  8
    $$$$$:  179-block  9
    $$$$$:  179-block 10
    $$$$$:  179-block 11
    $$$$$:  179-block 12
        1:  180:}
        1:  180-block  0
        1:  180-block  1
    $$$$$:  180-block  2
------------------
        -:  181:
        4:  182:TEST(AlgorithmTest, TestProcessAbsoluteBatchTooSmall) {
        1:  183:    auto a = Algorithm(1);
        1:  184:    AbsoluteBatch batch;
        1:  185:    batch = a.processBatch(batch);
       1*:  186:    ASSERT_EQ(batch.size(), 0);
        1:  187:    batch.push_back(PointCommand({1,1}));
        1:  188:    batch = a.processBatch(batch);
       1*:  189:    ASSERT_EQ(batch.size(), 1);
        1:  190:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
       1*:  191:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
       1*:  192:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:  193:}
------------------
_ZN51AlgorithmTest_TestProcessAbsoluteBatchTooSmall_TestC2Ev:
        1:  182:TEST(AlgorithmTest, TestProcessAbsoluteBatchTooSmall) {
        1:  182-block  0
------------------
_ZN51AlgorithmTest_TestProcessAbsoluteBatchTooSmall_TestD0Ev:
        1:  182:TEST(AlgorithmTest, TestProcessAbsoluteBatchTooSmall) {
        1:  182-block  0
------------------
_ZN51AlgorithmTest_TestProcessAbsoluteBatchTooSmall_TestD2Ev:
        1:  182:TEST(AlgorithmTest, TestProcessAbsoluteBatchTooSmall) {
        1:  182-block  0
------------------
_ZN51AlgorithmTest_TestProcessAbsoluteBatchTooSmall_Test8TestBodyEv:
        1:  182:TEST(AlgorithmTest, TestProcessAbsoluteBatchTooSmall) {
        1:  183:    auto a = Algorithm(1);
        1:  183-block  0
        1:  184:    AbsoluteBatch batch;
        1:  185:    batch = a.processBatch(batch);
        1:  185-block  0
       1*:  186:    ASSERT_EQ(batch.size(), 0);
        1:  186-block  0
    %%%%%:  186-block  1
    %%%%%:  186-block  2
    %%%%%:  186-block  3
    %%%%%:  186-block  4
        1:  186-block  5
        1:  186-block  6
    $$$$$:  186-block  7
    $$$$$:  186-block  8
    $$$$$:  186-block  9
    $$$$$:  186-block 10
    $$$$$:  186-block 11
    $$$$$:  186-block 12
    $$$$$:  186-block 13
        1:  187:    batch.push_back(PointCommand({1,1}));
        1:  187-block  0
        1:  187-block  1
    $$$$$:  187-block  2
    $$$$$:  187-block  3
    $$$$$:  187-block  4
    $$$$$:  187-block  5
    $$$$$:  187-block  6
        1:  188:    batch = a.processBatch(batch);
        1:  188-block  0
       1*:  189:    ASSERT_EQ(batch.size(), 1);
        1:  189-block  0
    %%%%%:  189-block  1
    %%%%%:  189-block  2
    %%%%%:  189-block  3
    %%%%%:  189-block  4
        1:  189-block  5
        1:  189-block  6
    $$$$$:  189-block  7
    $$$$$:  189-block  8
    $$$$$:  189-block  9
    $$$$$:  189-block 10
    $$$$$:  189-block 11
    $$$$$:  189-block 12
    $$$$$:  189-block 13
        1:  190:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
        1:  190-block  0
        1:  190-block  1
       1*:  191:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
        1:  191-block  0
        1:  191-block  1
    %%%%%:  191-block  2
    %%%%%:  191-block  3
    %%%%%:  191-block  4
    %%%%%:  191-block  5
        1:  191-block  6
        1:  191-block  7
    $$$$$:  191-block  8
    $$$$$:  191-block  9
    $$$$$:  191-block 10
    $$$$$:  191-block 11
    $$$$$:  191-block 12
       1*:  192:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:  192-block  0
        1:  192-block  1
    %%%%%:  192-block  2
    %%%%%:  192-block  3
    %%%%%:  192-block  4
    %%%%%:  192-block  5
        1:  192-block  6
        1:  192-block  7
    $$$$$:  192-block  8
    $$$$$:  192-block  9
    $$$$$:  192-block 10
    $$$$$:  192-block 11
    $$$$$:  192-block 12
        1:  193:}
        1:  193-block  0
        1:  193-block  1
    $$$$$:  193-block  2
------------------
        -:  194:
        4:  195:TEST(AlgorithmTest, TestProcessRelativeBatch) {
        1:  196:    auto a = Algorithm(1,1);
        1:  197:    RelativeBatch batch;
        1:  198:    batch.push_back(LeftLineCommand({1,1}));
        1:  199:    batch.push_back(RightLineCommand({1,1}));
        1:  200:    batch.push_back(RightLineCommand({2,2}));
        1:  201:    batch.push_back(LeftLineCommand({4,4}));
        1:  202:    batch.push_back(LeftLineCommand({0, 0.1}));
        -:  203:
        1:  204:    batch = a.processBatch(batch);
       1*:  205:    ASSERT_EQ(batch.size(), 3);
        1:  206:    auto left_line_ptr = std::get_if<LeftLineCommand>(&batch.at(0));
       1*:  207:    ASSERT_NE(left_line_ptr, nullptr);
        1:  208:    auto new_move_point = left_line_ptr->getMovePoint();
       1*:  209:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
       1*:  210:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        -:  211:
        1:  212:    auto right_line_ptr = std::get_if<RightLineCommand>(&batch.at(1));
       1*:  213:    ASSERT_NE(right_line_ptr, nullptr);
        1:  214:    new_move_point = right_line_ptr->getMovePoint();
       1*:  215:    ASSERT_FLOAT_EQ(new_move_point.getX(), 3);
       1*:  216:    ASSERT_FLOAT_EQ(new_move_point.getY(), 3);
        -:  217:
        1:  218:    left_line_ptr = std::get_if<LeftLineCommand>(&batch.at(2));
       1*:  219:    ASSERT_NE(left_line_ptr, nullptr);
        1:  220:    new_move_point = left_line_ptr->getMovePoint();
       1*:  221:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
       1*:  222:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4.1);
        -:  223:
        -:  224:
        1:  225:}
------------------
_ZN43AlgorithmTest_TestProcessRelativeBatch_TestC2Ev:
        1:  195:TEST(AlgorithmTest, TestProcessRelativeBatch) {
        1:  195-block  0
------------------
_ZN43AlgorithmTest_TestProcessRelativeBatch_TestD0Ev:
        1:  195:TEST(AlgorithmTest, TestProcessRelativeBatch) {
        1:  195-block  0
------------------
_ZN43AlgorithmTest_TestProcessRelativeBatch_TestD2Ev:
        1:  195:TEST(AlgorithmTest, TestProcessRelativeBatch) {
        1:  195-block  0
------------------
_ZN43AlgorithmTest_TestProcessRelativeBatch_Test8TestBodyEv:
        1:  195:TEST(AlgorithmTest, TestProcessRelativeBatch) {
        1:  196:    auto a = Algorithm(1,1);
        1:  196-block  0
        1:  197:    RelativeBatch batch;
        1:  198:    batch.push_back(LeftLineCommand({1,1}));
        1:  198-block  0
    $$$$$:  198-block  1
    $$$$$:  198-block  2
    $$$$$:  198-block  3
    $$$$$:  198-block  4
    $$$$$:  198-block  5
        1:  199:    batch.push_back(RightLineCommand({1,1}));
        1:  199-block  0
    $$$$$:  199-block  1
    $$$$$:  199-block  2
    $$$$$:  199-block  3
    $$$$$:  199-block  4
    $$$$$:  199-block  5
        1:  200:    batch.push_back(RightLineCommand({2,2}));
        1:  200-block  0
    $$$$$:  200-block  1
    $$$$$:  200-block  2
    $$$$$:  200-block  3
    $$$$$:  200-block  4
    $$$$$:  200-block  5
        1:  201:    batch.push_back(LeftLineCommand({4,4}));
        1:  201-block  0
    $$$$$:  201-block  1
    $$$$$:  201-block  2
    $$$$$:  201-block  3
    $$$$$:  201-block  4
    $$$$$:  201-block  5
        1:  202:    batch.push_back(LeftLineCommand({0, 0.1}));
        1:  202-block  0
    $$$$$:  202-block  1
    $$$$$:  202-block  2
    $$$$$:  202-block  3
    $$$$$:  202-block  4
    $$$$$:  202-block  5
        -:  203:
        1:  204:    batch = a.processBatch(batch);
        1:  204-block  0
       1*:  205:    ASSERT_EQ(batch.size(), 3);
        1:  205-block  0
    %%%%%:  205-block  1
    %%%%%:  205-block  2
    %%%%%:  205-block  3
    %%%%%:  205-block  4
        1:  205-block  5
        1:  205-block  6
    $$$$$:  205-block  7
    $$$$$:  205-block  8
    $$$$$:  205-block  9
    $$$$$:  205-block 10
    $$$$$:  205-block 11
    $$$$$:  205-block 12
    $$$$$:  205-block 13
        1:  206:    auto left_line_ptr = std::get_if<LeftLineCommand>(&batch.at(0));
        1:  206-block  0
        1:  206-block  1
       1*:  207:    ASSERT_NE(left_line_ptr, nullptr);
        1:  207-block  0
    %%%%%:  207-block  1
    %%%%%:  207-block  2
    %%%%%:  207-block  3
    %%%%%:  207-block  4
        1:  207-block  5
        1:  207-block  6
    $$$$$:  207-block  7
    $$$$$:  207-block  8
    $$$$$:  207-block  9
    $$$$$:  207-block 10
    $$$$$:  207-block 11
    $$$$$:  207-block 12
        1:  208:    auto new_move_point = left_line_ptr->getMovePoint();
        1:  208-block  0
       1*:  209:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
        1:  209-block  0
    %%%%%:  209-block  1
    %%%%%:  209-block  2
    %%%%%:  209-block  3
    %%%%%:  209-block  4
        1:  209-block  5
        1:  209-block  6
    $$$$$:  209-block  7
    $$$$$:  209-block  8
    $$$$$:  209-block  9
    $$$$$:  209-block 10
    $$$$$:  209-block 11
       1*:  210:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:  210-block  0
        1:  210-block  1
    %%%%%:  210-block  2
    %%%%%:  210-block  3
    %%%%%:  210-block  4
    %%%%%:  210-block  5
        1:  210-block  6
        1:  210-block  7
    $$$$$:  210-block  8
    $$$$$:  210-block  9
    $$$$$:  210-block 10
    $$$$$:  210-block 11
    $$$$$:  210-block 12
        -:  211:
        1:  212:    auto right_line_ptr = std::get_if<RightLineCommand>(&batch.at(1));
        1:  212-block  0
        1:  212-block  1
       1*:  213:    ASSERT_NE(right_line_ptr, nullptr);
        1:  213-block  0
    %%%%%:  213-block  1
    %%%%%:  213-block  2
    %%%%%:  213-block  3
    %%%%%:  213-block  4
        1:  213-block  5
        1:  213-block  6
    $$$$$:  213-block  7
    $$$$$:  213-block  8
    $$$$$:  213-block  9
    $$$$$:  213-block 10
    $$$$$:  213-block 11
    $$$$$:  213-block 12
        1:  214:    new_move_point = right_line_ptr->getMovePoint();
        1:  214-block  0
       1*:  215:    ASSERT_FLOAT_EQ(new_move_point.getX(), 3);
        1:  215-block  0
    %%%%%:  215-block  1
    %%%%%:  215-block  2
    %%%%%:  215-block  3
    %%%%%:  215-block  4
        1:  215-block  5
        1:  215-block  6
    $$$$$:  215-block  7
    $$$$$:  215-block  8
    $$$$$:  215-block  9
    $$$$$:  215-block 10
    $$$$$:  215-block 11
       1*:  216:    ASSERT_FLOAT_EQ(new_move_point.getY(), 3);
        1:  216-block  0
        1:  216-block  1
    %%%%%:  216-block  2
    %%%%%:  216-block  3
    %%%%%:  216-block  4
    %%%%%:  216-block  5
        1:  216-block  6
        1:  216-block  7
    $$$$$:  216-block  8
    $$$$$:  216-block  9
    $$$$$:  216-block 10
    $$$$$:  216-block 11
    $$$$$:  216-block 12
        -:  217:
        1:  218:    left_line_ptr = std::get_if<LeftLineCommand>(&batch.at(2));
        1:  218-block  0
        1:  218-block  1
       1*:  219:    ASSERT_NE(left_line_ptr, nullptr);
        1:  219-block  0
    %%%%%:  219-block  1
    %%%%%:  219-block  2
    %%%%%:  219-block  3
    %%%%%:  219-block  4
        1:  219-block  5
        1:  219-block  6
    $$$$$:  219-block  7
    $$$$$:  219-block  8
    $$$$$:  219-block  9
    $$$$$:  219-block 10
    $$$$$:  219-block 11
    $$$$$:  219-block 12
        1:  220:    new_move_point = left_line_ptr->getMovePoint();
        1:  220-block  0
       1*:  221:    ASSERT_FLOAT_EQ(new_move_point.getX(), 4);
        1:  221-block  0
    %%%%%:  221-block  1
    %%%%%:  221-block  2
    %%%%%:  221-block  3
    %%%%%:  221-block  4
        1:  221-block  5
        1:  221-block  6
    $$$$$:  221-block  7
    $$$$$:  221-block  8
    $$$$$:  221-block  9
    $$$$$:  221-block 10
    $$$$$:  221-block 11
       1*:  222:    ASSERT_FLOAT_EQ(new_move_point.getY(), 4.1);
        1:  222-block  0
        1:  222-block  1
    %%%%%:  222-block  2
    %%%%%:  222-block  3
    %%%%%:  222-block  4
    %%%%%:  222-block  5
        1:  222-block  6
        1:  222-block  7
    $$$$$:  222-block  8
    $$$$$:  222-block  9
    $$$$$:  222-block 10
    $$$$$:  222-block 11
    $$$$$:  222-block 12
        -:  223:
        -:  224:
        1:  225:}
        1:  225-block  0
        1:  225-block  1
    $$$$$:  225-block  2
------------------
        -:  226:
        4:  227:TEST(AlgorithmTest, TestProcessRelativeBatchTooSmall) {
        1:  228:    auto a = Algorithm(1);
        1:  229:    RelativeBatch batch;
        1:  230:    batch = a.processBatch(batch);
       1*:  231:    ASSERT_EQ(batch.size(), 0);
        1:  232:    batch.push_back(LeftLineCommand({1,1}));
        1:  233:    batch = a.processBatch(batch);
       1*:  234:    ASSERT_EQ(batch.size(), 1);
        1:  235:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
       1*:  236:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
       1*:  237:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:  238:}
------------------
_ZN51AlgorithmTest_TestProcessRelativeBatchTooSmall_TestC2Ev:
        1:  227:TEST(AlgorithmTest, TestProcessRelativeBatchTooSmall) {
        1:  227-block  0
------------------
_ZN51AlgorithmTest_TestProcessRelativeBatchTooSmall_TestD0Ev:
        1:  227:TEST(AlgorithmTest, TestProcessRelativeBatchTooSmall) {
        1:  227-block  0
------------------
_ZN51AlgorithmTest_TestProcessRelativeBatchTooSmall_TestD2Ev:
        1:  227:TEST(AlgorithmTest, TestProcessRelativeBatchTooSmall) {
        1:  227-block  0
------------------
_ZN51AlgorithmTest_TestProcessRelativeBatchTooSmall_Test8TestBodyEv:
        1:  227:TEST(AlgorithmTest, TestProcessRelativeBatchTooSmall) {
        1:  228:    auto a = Algorithm(1);
        1:  228-block  0
        1:  229:    RelativeBatch batch;
        1:  230:    batch = a.processBatch(batch);
        1:  230-block  0
       1*:  231:    ASSERT_EQ(batch.size(), 0);
        1:  231-block  0
    %%%%%:  231-block  1
    %%%%%:  231-block  2
    %%%%%:  231-block  3
    %%%%%:  231-block  4
        1:  231-block  5
        1:  231-block  6
    $$$$$:  231-block  7
    $$$$$:  231-block  8
    $$$$$:  231-block  9
    $$$$$:  231-block 10
    $$$$$:  231-block 11
    $$$$$:  231-block 12
    $$$$$:  231-block 13
        1:  232:    batch.push_back(LeftLineCommand({1,1}));
        1:  232-block  0
        1:  232-block  1
    $$$$$:  232-block  2
    $$$$$:  232-block  3
    $$$$$:  232-block  4
    $$$$$:  232-block  5
    $$$$$:  232-block  6
        1:  233:    batch = a.processBatch(batch);
        1:  233-block  0
       1*:  234:    ASSERT_EQ(batch.size(), 1);
        1:  234-block  0
    %%%%%:  234-block  1
    %%%%%:  234-block  2
    %%%%%:  234-block  3
    %%%%%:  234-block  4
        1:  234-block  5
        1:  234-block  6
    $$$$$:  234-block  7
    $$$$$:  234-block  8
    $$$$$:  234-block  9
    $$$$$:  234-block 10
    $$$$$:  234-block 11
    $$$$$:  234-block 12
    $$$$$:  234-block 13
        1:  235:    auto new_move_point = std::visit(extractMovePoint,batch.at(0));
        1:  235-block  0
        1:  235-block  1
       1*:  236:    ASSERT_FLOAT_EQ(new_move_point.getX(), 1);
        1:  236-block  0
        1:  236-block  1
    %%%%%:  236-block  2
    %%%%%:  236-block  3
    %%%%%:  236-block  4
    %%%%%:  236-block  5
        1:  236-block  6
        1:  236-block  7
    $$$$$:  236-block  8
    $$$$$:  236-block  9
    $$$$$:  236-block 10
    $$$$$:  236-block 11
    $$$$$:  236-block 12
       1*:  237:    ASSERT_FLOAT_EQ(new_move_point.getY(), 1);
        1:  237-block  0
        1:  237-block  1
    %%%%%:  237-block  2
    %%%%%:  237-block  3
    %%%%%:  237-block  4
    %%%%%:  237-block  5
        1:  237-block  6
        1:  237-block  7
    $$$$$:  237-block  8
    $$$$$:  237-block  9
    $$$$$:  237-block 10
    $$$$$:  237-block 11
    $$$$$:  237-block 12
        1:  238:}
        1:  238-block  0
        1:  238-block  1
    $$$$$:  238-block  2
------------------
        -:  239:
        -:  240:
        1:  241:int main(int argc, char **argv) {
        1:  242:  ::testing::InitGoogleTest(&argc, argv);
        1:  242-block  0
        1:  243:  return RUN_ALL_TESTS();
        -:  244:}

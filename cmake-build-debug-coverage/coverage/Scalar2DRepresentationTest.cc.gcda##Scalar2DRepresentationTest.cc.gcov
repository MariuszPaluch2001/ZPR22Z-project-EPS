        -:    0:Source:/home/kacper/Pulpit/zpr_eps/tests/Scalar2DRepresentationTest.cc
        -:    0:Graph:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/Scalar2DRepresentationTest.dir/Scalar2DRepresentationTest.cc.gcno
        -:    0:Data:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/Scalar2DRepresentationTest.dir/Scalar2DRepresentationTest.cc.gcda
        -:    0:Runs:1
        -:    1:#include "Scalar2DRepresentation.h"
        -:    2:#include <cmath>
        -:    3:#include <gtest/gtest.h>
        -:    4:
        4:    5:TEST(Scalar2DRepresentationTest, TestPointCordsGetters) {
        1:    6:  CoordinateValue p(2.2, 5);
       1*:    7:  ASSERT_TRUE(abs(p.getX() - 2.2) < 1e-5);
       1*:    8:  ASSERT_TRUE(abs(p.getY() - 5) < 1e-5);
        -:    9:}
------------------
_ZN53Scalar2DRepresentationTest_TestPointCordsGetters_TestC2Ev:
        1:    5:TEST(Scalar2DRepresentationTest, TestPointCordsGetters) {
        1:    5-block  0
------------------
_ZN53Scalar2DRepresentationTest_TestPointCordsGetters_TestD0Ev:
        1:    5:TEST(Scalar2DRepresentationTest, TestPointCordsGetters) {
        1:    5-block  0
------------------
_ZN53Scalar2DRepresentationTest_TestPointCordsGetters_TestD2Ev:
        1:    5:TEST(Scalar2DRepresentationTest, TestPointCordsGetters) {
        1:    5-block  0
------------------
_ZN53Scalar2DRepresentationTest_TestPointCordsGetters_Test8TestBodyEv:
        1:    5:TEST(Scalar2DRepresentationTest, TestPointCordsGetters) {
        1:    6:  CoordinateValue p(2.2, 5);
        1:    6-block  0
       1*:    7:  ASSERT_TRUE(abs(p.getX() - 2.2) < 1e-5);
    %%%%%:    7-block  0
    %%%%%:    7-block  1
    %%%%%:    7-block  2
    %%%%%:    7-block  3
    %%%%%:    7-block  4
        1:    7-block  5
        1:    7-block  6
    $$$$$:    7-block  7
    $$$$$:    7-block  8
    $$$$$:    7-block  9
    $$$$$:    7-block 10
    $$$$$:    7-block 11
    $$$$$:    7-block 12
    $$$$$:    7-block 13
       1*:    8:  ASSERT_TRUE(abs(p.getY() - 5) < 1e-5);
        1:    8-block  0
    %%%%%:    8-block  1
    %%%%%:    8-block  2
    %%%%%:    8-block  3
    %%%%%:    8-block  4
    %%%%%:    8-block  5
        1:    8-block  6
        1:    8-block  7
    $$$$$:    8-block  8
    $$$$$:    8-block  9
    $$$$$:    8-block 10
    $$$$$:    8-block 11
    $$$$$:    8-block 12
    $$$$$:    8-block 13
    $$$$$:    8-block 14
        -:    9:}
------------------
        -:   10:
        4:   11:TEST(Scalar2DRepresentationTest, TestDirectionCordsGetters) {
        1:   12:  Direction d(6, 8.3);
       1*:   13:  ASSERT_TRUE(abs(d.getX() - 6) < 1e-5);
       1*:   14:  ASSERT_TRUE(abs(d.getY() - 8.3) < 1e-5);
        -:   15:}
------------------
_ZN57Scalar2DRepresentationTest_TestDirectionCordsGetters_TestC2Ev:
        1:   11:TEST(Scalar2DRepresentationTest, TestDirectionCordsGetters) {
        1:   11-block  0
------------------
_ZN57Scalar2DRepresentationTest_TestDirectionCordsGetters_TestD0Ev:
        1:   11:TEST(Scalar2DRepresentationTest, TestDirectionCordsGetters) {
        1:   11-block  0
------------------
_ZN57Scalar2DRepresentationTest_TestDirectionCordsGetters_TestD2Ev:
        1:   11:TEST(Scalar2DRepresentationTest, TestDirectionCordsGetters) {
        1:   11-block  0
------------------
_ZN57Scalar2DRepresentationTest_TestDirectionCordsGetters_Test8TestBodyEv:
        1:   11:TEST(Scalar2DRepresentationTest, TestDirectionCordsGetters) {
        1:   12:  Direction d(6, 8.3);
        1:   12-block  0
       1*:   13:  ASSERT_TRUE(abs(d.getX() - 6) < 1e-5);
    %%%%%:   13-block  0
    %%%%%:   13-block  1
    %%%%%:   13-block  2
    %%%%%:   13-block  3
    %%%%%:   13-block  4
        1:   13-block  5
        1:   13-block  6
    $$$$$:   13-block  7
    $$$$$:   13-block  8
    $$$$$:   13-block  9
    $$$$$:   13-block 10
    $$$$$:   13-block 11
    $$$$$:   13-block 12
    $$$$$:   13-block 13
       1*:   14:  ASSERT_TRUE(abs(d.getY() - 8.3) < 1e-5);
        1:   14-block  0
    %%%%%:   14-block  1
    %%%%%:   14-block  2
    %%%%%:   14-block  3
    %%%%%:   14-block  4
    %%%%%:   14-block  5
        1:   14-block  6
        1:   14-block  7
    $$$$$:   14-block  8
    $$$$$:   14-block  9
    $$$$$:   14-block 10
    $$$$$:   14-block 11
    $$$$$:   14-block 12
    $$$$$:   14-block 13
    $$$$$:   14-block 14
        -:   15:}
------------------
        -:   16:
        4:   17:TEST(Scalar2DRepresentationTest, TestResolutionCordsGetters) {
        1:   18:  Resolution r(6, 8);
       1*:   19:  ASSERT_EQ(r.getX(), 6);
       1*:   20:  ASSERT_EQ(r.getY(), 8);
        -:   21:}
------------------
_ZN58Scalar2DRepresentationTest_TestResolutionCordsGetters_TestC2Ev:
        1:   17:TEST(Scalar2DRepresentationTest, TestResolutionCordsGetters) {
        1:   17-block  0
------------------
_ZN58Scalar2DRepresentationTest_TestResolutionCordsGetters_TestD0Ev:
        1:   17:TEST(Scalar2DRepresentationTest, TestResolutionCordsGetters) {
        1:   17-block  0
------------------
_ZN58Scalar2DRepresentationTest_TestResolutionCordsGetters_TestD2Ev:
        1:   17:TEST(Scalar2DRepresentationTest, TestResolutionCordsGetters) {
        1:   17-block  0
------------------
_ZN58Scalar2DRepresentationTest_TestResolutionCordsGetters_Test8TestBodyEv:
        1:   17:TEST(Scalar2DRepresentationTest, TestResolutionCordsGetters) {
        1:   18:  Resolution r(6, 8);
        1:   18-block  0
       1*:   19:  ASSERT_EQ(r.getX(), 6);
        1:   19-block  0
    %%%%%:   19-block  1
    %%%%%:   19-block  2
    %%%%%:   19-block  3
    %%%%%:   19-block  4
        1:   19-block  5
        1:   19-block  6
    $$$$$:   19-block  7
    $$$$$:   19-block  8
    $$$$$:   19-block  9
    $$$$$:   19-block 10
    $$$$$:   19-block 11
    $$$$$:   19-block 12
    $$$$$:   19-block 13
       1*:   20:  ASSERT_EQ(r.getY(), 8);
        1:   20-block  0
        1:   20-block  1
    %%%%%:   20-block  2
    %%%%%:   20-block  3
    %%%%%:   20-block  4
    %%%%%:   20-block  5
        1:   20-block  6
        1:   20-block  7
    $$$$$:   20-block  8
    $$$$$:   20-block  9
    $$$$$:   20-block 10
    $$$$$:   20-block 11
    $$$$$:   20-block 12
    $$$$$:   20-block 13
    $$$$$:   20-block 14
        -:   21:}
------------------
        -:   22:
        4:   23:TEST(Scalar2DRepresentationTest, TestPointToString) {
        1:   24:  CoordinateValue p(3, 5);
       2*:   25:  ASSERT_EQ(p.toString(), "CoordinateValue: (3, 5)");
        -:   26:}
------------------
_ZN49Scalar2DRepresentationTest_TestPointToString_TestC2Ev:
        1:   23:TEST(Scalar2DRepresentationTest, TestPointToString) {
        1:   23-block  0
------------------
_ZN49Scalar2DRepresentationTest_TestPointToString_TestD0Ev:
        1:   23:TEST(Scalar2DRepresentationTest, TestPointToString) {
        1:   23-block  0
------------------
_ZN49Scalar2DRepresentationTest_TestPointToString_TestD2Ev:
        1:   23:TEST(Scalar2DRepresentationTest, TestPointToString) {
        1:   23-block  0
------------------
_ZN49Scalar2DRepresentationTest_TestPointToString_Test8TestBodyEv:
        1:   23:TEST(Scalar2DRepresentationTest, TestPointToString) {
        1:   24:  CoordinateValue p(3, 5);
        1:   24-block  0
       2*:   25:  ASSERT_EQ(p.toString(), "CoordinateValue: (3, 5)");
        1:   25-block  0
    %%%%%:   25-block  1
    %%%%%:   25-block  2
    %%%%%:   25-block  3
    %%%%%:   25-block  4
        1:   25-block  5
        1:   25-block  6
    $$$$$:   25-block  7
    $$$$$:   25-block  8
    $$$$$:   25-block  9
    $$$$$:   25-block 10
    $$$$$:   25-block 11
    $$$$$:   25-block 12
        -:   26:}
------------------
        -:   27:
        -:   28:
        -:   29:
        4:   30:TEST(Scalar2DRepresentationTest, TestResolutionToString) {
        1:   31:  Resolution r(7, 10);
       1*:   32:  ASSERT_TRUE(r.toString() == "Resolution: 7p x 10p");
        -:   33:}
------------------
_ZN54Scalar2DRepresentationTest_TestResolutionToString_TestC2Ev:
        1:   30:TEST(Scalar2DRepresentationTest, TestResolutionToString) {
        1:   30-block  0
------------------
_ZN54Scalar2DRepresentationTest_TestResolutionToString_TestD0Ev:
        1:   30:TEST(Scalar2DRepresentationTest, TestResolutionToString) {
        1:   30-block  0
------------------
_ZN54Scalar2DRepresentationTest_TestResolutionToString_TestD2Ev:
        1:   30:TEST(Scalar2DRepresentationTest, TestResolutionToString) {
        1:   30-block  0
------------------
_ZN54Scalar2DRepresentationTest_TestResolutionToString_Test8TestBodyEv:
        1:   30:TEST(Scalar2DRepresentationTest, TestResolutionToString) {
        1:   31:  Resolution r(7, 10);
        1:   31-block  0
       1*:   32:  ASSERT_TRUE(r.toString() == "Resolution: 7p x 10p");
        1:   32-block  0
    %%%%%:   32-block  1
    %%%%%:   32-block  2
    %%%%%:   32-block  3
    %%%%%:   32-block  4
    %%%%%:   32-block  5
        1:   32-block  6
        1:   32-block  7
    $$$$$:   32-block  8
    $$$$$:   32-block  9
    $$$$$:   32-block 10
    $$$$$:   32-block 11
    $$$$$:   32-block 12
    $$$$$:   32-block 13
    $$$$$:   32-block 14
        -:   33:}
------------------
        -:   34:
        4:   35:TEST(Scalar2DRepresentationTest, TestPointSetXY) {
        1:   36:  CoordinateValue p(1, 1);
        1:   37:  p.setX(4);
        1:   38:  p.setY(12);
       1*:   39:  ASSERT_TRUE(abs(p.getX() - 4) < 1e-5);
       1*:   40:  ASSERT_TRUE(abs(p.getY() - 12) < 1e-5);
        -:   41:}
------------------
_ZN46Scalar2DRepresentationTest_TestPointSetXY_TestC2Ev:
        1:   35:TEST(Scalar2DRepresentationTest, TestPointSetXY) {
        1:   35-block  0
------------------
_ZN46Scalar2DRepresentationTest_TestPointSetXY_TestD0Ev:
        1:   35:TEST(Scalar2DRepresentationTest, TestPointSetXY) {
        1:   35-block  0
------------------
_ZN46Scalar2DRepresentationTest_TestPointSetXY_TestD2Ev:
        1:   35:TEST(Scalar2DRepresentationTest, TestPointSetXY) {
        1:   35-block  0
------------------
_ZN46Scalar2DRepresentationTest_TestPointSetXY_Test8TestBodyEv:
        1:   35:TEST(Scalar2DRepresentationTest, TestPointSetXY) {
        1:   36:  CoordinateValue p(1, 1);
        1:   36-block  0
        1:   37:  p.setX(4);
        1:   38:  p.setY(12);
       1*:   39:  ASSERT_TRUE(abs(p.getX() - 4) < 1e-5);
    %%%%%:   39-block  0
    %%%%%:   39-block  1
    %%%%%:   39-block  2
    %%%%%:   39-block  3
    %%%%%:   39-block  4
        1:   39-block  5
        1:   39-block  6
    $$$$$:   39-block  7
    $$$$$:   39-block  8
    $$$$$:   39-block  9
    $$$$$:   39-block 10
    $$$$$:   39-block 11
    $$$$$:   39-block 12
    $$$$$:   39-block 13
       1*:   40:  ASSERT_TRUE(abs(p.getY() - 12) < 1e-5);
        1:   40-block  0
    %%%%%:   40-block  1
    %%%%%:   40-block  2
    %%%%%:   40-block  3
    %%%%%:   40-block  4
    %%%%%:   40-block  5
        1:   40-block  6
        1:   40-block  7
    $$$$$:   40-block  8
    $$$$$:   40-block  9
    $$$$$:   40-block 10
    $$$$$:   40-block 11
    $$$$$:   40-block 12
    $$$$$:   40-block 13
    $$$$$:   40-block 14
        -:   41:}
------------------
        -:   42:
        4:   43:TEST(Scalar2DRepresentationTest, TestResolutionSetXY) {
        1:   44:  Resolution r(7, 10);
        1:   45:  r.setX(5);
        1:   46:  r.setY(9);
       1*:   47:  ASSERT_EQ(r.getX(), 5);
       1*:   48:  ASSERT_EQ(r.getY(), 9);
        -:   49:}
------------------
_ZN51Scalar2DRepresentationTest_TestResolutionSetXY_TestC2Ev:
        1:   43:TEST(Scalar2DRepresentationTest, TestResolutionSetXY) {
        1:   43-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestResolutionSetXY_TestD0Ev:
        1:   43:TEST(Scalar2DRepresentationTest, TestResolutionSetXY) {
        1:   43-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestResolutionSetXY_TestD2Ev:
        1:   43:TEST(Scalar2DRepresentationTest, TestResolutionSetXY) {
        1:   43-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestResolutionSetXY_Test8TestBodyEv:
        1:   43:TEST(Scalar2DRepresentationTest, TestResolutionSetXY) {
        1:   44:  Resolution r(7, 10);
        1:   44-block  0
        1:   45:  r.setX(5);
        1:   46:  r.setY(9);
       1*:   47:  ASSERT_EQ(r.getX(), 5);
        1:   47-block  0
    %%%%%:   47-block  1
    %%%%%:   47-block  2
    %%%%%:   47-block  3
    %%%%%:   47-block  4
        1:   47-block  5
        1:   47-block  6
    $$$$$:   47-block  7
    $$$$$:   47-block  8
    $$$$$:   47-block  9
    $$$$$:   47-block 10
    $$$$$:   47-block 11
    $$$$$:   47-block 12
    $$$$$:   47-block 13
       1*:   48:  ASSERT_EQ(r.getY(), 9);
        1:   48-block  0
        1:   48-block  1
    %%%%%:   48-block  2
    %%%%%:   48-block  3
    %%%%%:   48-block  4
    %%%%%:   48-block  5
        1:   48-block  6
        1:   48-block  7
    $$$$$:   48-block  8
    $$$$$:   48-block  9
    $$$$$:   48-block 10
    $$$$$:   48-block 11
    $$$$$:   48-block 12
    $$$$$:   48-block 13
    $$$$$:   48-block 14
        -:   49:}
------------------
        -:   50:
        4:   51:TEST(Scalar2DRepresentationTest, TestDirectionDivOperator) {
        1:   52:  auto d = Direction(3, 4);
        1:   53:  auto divD = d / 2;
       1*:   54:  ASSERT_TRUE(abs(divD.getX() - 3. / 2) < 1e-5);
       1*:   55:  ASSERT_TRUE(abs(divD.getY() - 2.) < 1e-5);
        -:   56:}
------------------
_ZN56Scalar2DRepresentationTest_TestDirectionDivOperator_TestC2Ev:
        1:   51:TEST(Scalar2DRepresentationTest, TestDirectionDivOperator) {
        1:   51-block  0
------------------
_ZN56Scalar2DRepresentationTest_TestDirectionDivOperator_TestD0Ev:
        1:   51:TEST(Scalar2DRepresentationTest, TestDirectionDivOperator) {
        1:   51-block  0
------------------
_ZN56Scalar2DRepresentationTest_TestDirectionDivOperator_TestD2Ev:
        1:   51:TEST(Scalar2DRepresentationTest, TestDirectionDivOperator) {
        1:   51-block  0
------------------
_ZN56Scalar2DRepresentationTest_TestDirectionDivOperator_Test8TestBodyEv:
        1:   51:TEST(Scalar2DRepresentationTest, TestDirectionDivOperator) {
        1:   52:  auto d = Direction(3, 4);
        1:   52-block  0
        1:   53:  auto divD = d / 2;
       1*:   54:  ASSERT_TRUE(abs(divD.getX() - 3. / 2) < 1e-5);
        1:   54-block  0
    %%%%%:   54-block  1
    %%%%%:   54-block  2
    %%%%%:   54-block  3
    %%%%%:   54-block  4
    %%%%%:   54-block  5
        1:   54-block  6
        1:   54-block  7
    $$$$$:   54-block  8
    $$$$$:   54-block  9
    $$$$$:   54-block 10
    $$$$$:   54-block 11
    $$$$$:   54-block 12
    $$$$$:   54-block 13
    $$$$$:   54-block 14
       1*:   55:  ASSERT_TRUE(abs(divD.getY() - 2.) < 1e-5);
        1:   55-block  0
    %%%%%:   55-block  1
    %%%%%:   55-block  2
    %%%%%:   55-block  3
    %%%%%:   55-block  4
    %%%%%:   55-block  5
        1:   55-block  6
        1:   55-block  7
    $$$$$:   55-block  8
    $$$$$:   55-block  9
    $$$$$:   55-block 10
    $$$$$:   55-block 11
    $$$$$:   55-block 12
    $$$$$:   55-block 13
    $$$$$:   55-block 14
        -:   56:}
------------------
        -:   57:
        4:   58:TEST(Scalar2DRepresentationTest, TestDirectionDivOperatorByZero) {
        1:   59:  auto d = Direction(3, 4);
        1:   60:  auto divD = d / 0;
       1*:   61:  ASSERT_TRUE(abs(divD.getX() - 0) < 1e-5);
       1*:   62:  ASSERT_TRUE(abs(divD.getY() - 0) < 1e-5);
        -:   63:}
------------------
_ZN62Scalar2DRepresentationTest_TestDirectionDivOperatorByZero_TestC2Ev:
        1:   58:TEST(Scalar2DRepresentationTest, TestDirectionDivOperatorByZero) {
        1:   58-block  0
------------------
_ZN62Scalar2DRepresentationTest_TestDirectionDivOperatorByZero_TestD0Ev:
        1:   58:TEST(Scalar2DRepresentationTest, TestDirectionDivOperatorByZero) {
        1:   58-block  0
------------------
_ZN62Scalar2DRepresentationTest_TestDirectionDivOperatorByZero_TestD2Ev:
        1:   58:TEST(Scalar2DRepresentationTest, TestDirectionDivOperatorByZero) {
        1:   58-block  0
------------------
_ZN62Scalar2DRepresentationTest_TestDirectionDivOperatorByZero_Test8TestBodyEv:
        1:   58:TEST(Scalar2DRepresentationTest, TestDirectionDivOperatorByZero) {
        1:   59:  auto d = Direction(3, 4);
        1:   59-block  0
        1:   60:  auto divD = d / 0;
       1*:   61:  ASSERT_TRUE(abs(divD.getX() - 0) < 1e-5);
        1:   61-block  0
    %%%%%:   61-block  1
    %%%%%:   61-block  2
    %%%%%:   61-block  3
    %%%%%:   61-block  4
    %%%%%:   61-block  5
        1:   61-block  6
        1:   61-block  7
    $$$$$:   61-block  8
    $$$$$:   61-block  9
    $$$$$:   61-block 10
    $$$$$:   61-block 11
    $$$$$:   61-block 12
    $$$$$:   61-block 13
    $$$$$:   61-block 14
       1*:   62:  ASSERT_TRUE(abs(divD.getY() - 0) < 1e-5);
        1:   62-block  0
    %%%%%:   62-block  1
    %%%%%:   62-block  2
    %%%%%:   62-block  3
    %%%%%:   62-block  4
    %%%%%:   62-block  5
        1:   62-block  6
        1:   62-block  7
    $$$$$:   62-block  8
    $$$$$:   62-block  9
    $$$$$:   62-block 10
    $$$$$:   62-block 11
    $$$$$:   62-block 12
    $$$$$:   62-block 13
    $$$$$:   62-block 14
        -:   63:}
------------------
        -:   64:
        4:   65:TEST(Scalar2DRepresentationTest, TestPointAdditionOperator) {
        1:   66:  auto p1 = CoordinateValue({3, 4});
        1:   67:  auto p2 = CoordinateValue({2, 5});
        1:   68:  auto p3 = p1 + p2;
       1*:   69:  ASSERT_TRUE(abs(p3.getX() - 5) < 1e-5);
       1*:   70:  ASSERT_TRUE(abs(p3.getY() - 9) < 1e-5);
        -:   71:}
------------------
_ZN57Scalar2DRepresentationTest_TestPointAdditionOperator_TestC2Ev:
        1:   65:TEST(Scalar2DRepresentationTest, TestPointAdditionOperator) {
        1:   65-block  0
------------------
_ZN57Scalar2DRepresentationTest_TestPointAdditionOperator_TestD0Ev:
        1:   65:TEST(Scalar2DRepresentationTest, TestPointAdditionOperator) {
        1:   65-block  0
------------------
_ZN57Scalar2DRepresentationTest_TestPointAdditionOperator_TestD2Ev:
        1:   65:TEST(Scalar2DRepresentationTest, TestPointAdditionOperator) {
        1:   65-block  0
------------------
_ZN57Scalar2DRepresentationTest_TestPointAdditionOperator_Test8TestBodyEv:
        1:   65:TEST(Scalar2DRepresentationTest, TestPointAdditionOperator) {
        1:   66:  auto p1 = CoordinateValue({3, 4});
        1:   66-block  0
        1:   67:  auto p2 = CoordinateValue({2, 5});
        1:   68:  auto p3 = p1 + p2;
       1*:   69:  ASSERT_TRUE(abs(p3.getX() - 5) < 1e-5);
        1:   69-block  0
    %%%%%:   69-block  1
    %%%%%:   69-block  2
    %%%%%:   69-block  3
    %%%%%:   69-block  4
    %%%%%:   69-block  5
        1:   69-block  6
        1:   69-block  7
    $$$$$:   69-block  8
    $$$$$:   69-block  9
    $$$$$:   69-block 10
    $$$$$:   69-block 11
    $$$$$:   69-block 12
    $$$$$:   69-block 13
    $$$$$:   69-block 14
       1*:   70:  ASSERT_TRUE(abs(p3.getY() - 9) < 1e-5);
        1:   70-block  0
    %%%%%:   70-block  1
    %%%%%:   70-block  2
    %%%%%:   70-block  3
    %%%%%:   70-block  4
    %%%%%:   70-block  5
        1:   70-block  6
        1:   70-block  7
    $$$$$:   70-block  8
    $$$$$:   70-block  9
    $$$$$:   70-block 10
    $$$$$:   70-block 11
    $$$$$:   70-block 12
    $$$$$:   70-block 13
    $$$$$:   70-block 14
        -:   71:}
------------------
        -:   72:
        4:   73:TEST(Scalar2DRepresentationTest, TestPointSubtractionOperator) {
        1:   74:  auto p1 = CoordinateValue({3, 4});
        1:   75:  auto p2 = CoordinateValue({2, 5});
        1:   76:  auto p3 = p1 - p2;
       1*:   77:  ASSERT_TRUE(abs(p3.getX() - 1) < 1e-5);
       1*:   78:  ASSERT_TRUE(abs(p3.getY() + 1) < 1e-5);
        -:   79:}
------------------
_ZN60Scalar2DRepresentationTest_TestPointSubtractionOperator_TestC2Ev:
        1:   73:TEST(Scalar2DRepresentationTest, TestPointSubtractionOperator) {
        1:   73-block  0
------------------
_ZN60Scalar2DRepresentationTest_TestPointSubtractionOperator_TestD0Ev:
        1:   73:TEST(Scalar2DRepresentationTest, TestPointSubtractionOperator) {
        1:   73-block  0
------------------
_ZN60Scalar2DRepresentationTest_TestPointSubtractionOperator_TestD2Ev:
        1:   73:TEST(Scalar2DRepresentationTest, TestPointSubtractionOperator) {
        1:   73-block  0
------------------
_ZN60Scalar2DRepresentationTest_TestPointSubtractionOperator_Test8TestBodyEv:
        1:   73:TEST(Scalar2DRepresentationTest, TestPointSubtractionOperator) {
        1:   74:  auto p1 = CoordinateValue({3, 4});
        1:   74-block  0
        1:   75:  auto p2 = CoordinateValue({2, 5});
        1:   76:  auto p3 = p1 - p2;
       1*:   77:  ASSERT_TRUE(abs(p3.getX() - 1) < 1e-5);
        1:   77-block  0
    %%%%%:   77-block  1
    %%%%%:   77-block  2
    %%%%%:   77-block  3
    %%%%%:   77-block  4
    %%%%%:   77-block  5
        1:   77-block  6
        1:   77-block  7
    $$$$$:   77-block  8
    $$$$$:   77-block  9
    $$$$$:   77-block 10
    $$$$$:   77-block 11
    $$$$$:   77-block 12
    $$$$$:   77-block 13
    $$$$$:   77-block 14
       1*:   78:  ASSERT_TRUE(abs(p3.getY() + 1) < 1e-5);
        1:   78-block  0
    %%%%%:   78-block  1
    %%%%%:   78-block  2
    %%%%%:   78-block  3
    %%%%%:   78-block  4
    %%%%%:   78-block  5
        1:   78-block  6
        1:   78-block  7
    $$$$$:   78-block  8
    $$$$$:   78-block  9
    $$$$$:   78-block 10
    $$$$$:   78-block 11
    $$$$$:   78-block 12
    $$$$$:   78-block 13
    $$$$$:   78-block 14
        -:   79:}
------------------
        -:   80:
        4:   81:TEST(Scalar2DRepresentationTest, TestOstreamOperatorCoordinate) {
        1:   82:  CoordinateValue p(3, 5);
        1:   83:  std::ostringstream oss;
        1:   84:  oss << p;
        -:   85:
       1*:   86:  ASSERT_TRUE(oss.str() == "CoordinateValue: (3, 5)");
        1:   87:}
------------------
_ZN61Scalar2DRepresentationTest_TestOstreamOperatorCoordinate_TestC2Ev:
        1:   81:TEST(Scalar2DRepresentationTest, TestOstreamOperatorCoordinate) {
        1:   81-block  0
------------------
_ZN61Scalar2DRepresentationTest_TestOstreamOperatorCoordinate_TestD0Ev:
        1:   81:TEST(Scalar2DRepresentationTest, TestOstreamOperatorCoordinate) {
        1:   81-block  0
------------------
_ZN61Scalar2DRepresentationTest_TestOstreamOperatorCoordinate_TestD2Ev:
        1:   81:TEST(Scalar2DRepresentationTest, TestOstreamOperatorCoordinate) {
        1:   81-block  0
------------------
_ZN61Scalar2DRepresentationTest_TestOstreamOperatorCoordinate_Test8TestBodyEv:
        1:   81:TEST(Scalar2DRepresentationTest, TestOstreamOperatorCoordinate) {
        1:   82:  CoordinateValue p(3, 5);
        1:   82-block  0
        1:   83:  std::ostringstream oss;
        1:   84:  oss << p;
        1:   84-block  0
        -:   85:
       1*:   86:  ASSERT_TRUE(oss.str() == "CoordinateValue: (3, 5)");
        1:   86-block  0
        1:   86-block  1
    %%%%%:   86-block  2
    %%%%%:   86-block  3
    %%%%%:   86-block  4
    %%%%%:   86-block  5
    %%%%%:   86-block  6
        1:   86-block  7
        1:   86-block  8
    $$$$$:   86-block  9
    $$$$$:   86-block 10
    $$$$$:   86-block 11
    $$$$$:   86-block 12
    $$$$$:   86-block 13
    $$$$$:   86-block 14
    $$$$$:   86-block 15
        1:   87:}
        1:   87-block  0
        1:   87-block  1
    $$$$$:   87-block  2
------------------
        -:   88:
        4:   89:TEST(Scalar2DRepresentationTest, TestOstreamOperatorResolution) {
        1:   90:    Resolution p(3, 5);
        1:   91:    std::ostringstream oss;
        1:   92:    oss << p;
        -:   93:
       1*:   94:    ASSERT_TRUE(oss.str() == "Resolution: 3p x 5p");
        1:   95:}
------------------
_ZN61Scalar2DRepresentationTest_TestOstreamOperatorResolution_TestC2Ev:
        1:   89:TEST(Scalar2DRepresentationTest, TestOstreamOperatorResolution) {
        1:   89-block  0
------------------
_ZN61Scalar2DRepresentationTest_TestOstreamOperatorResolution_TestD0Ev:
        1:   89:TEST(Scalar2DRepresentationTest, TestOstreamOperatorResolution) {
        1:   89-block  0
------------------
_ZN61Scalar2DRepresentationTest_TestOstreamOperatorResolution_TestD2Ev:
        1:   89:TEST(Scalar2DRepresentationTest, TestOstreamOperatorResolution) {
        1:   89-block  0
------------------
_ZN61Scalar2DRepresentationTest_TestOstreamOperatorResolution_Test8TestBodyEv:
        1:   89:TEST(Scalar2DRepresentationTest, TestOstreamOperatorResolution) {
        1:   90:    Resolution p(3, 5);
        1:   90-block  0
        1:   91:    std::ostringstream oss;
        1:   92:    oss << p;
        1:   92-block  0
        -:   93:
       1*:   94:    ASSERT_TRUE(oss.str() == "Resolution: 3p x 5p");
        1:   94-block  0
        1:   94-block  1
    %%%%%:   94-block  2
    %%%%%:   94-block  3
    %%%%%:   94-block  4
    %%%%%:   94-block  5
    %%%%%:   94-block  6
        1:   94-block  7
        1:   94-block  8
    $$$$$:   94-block  9
    $$$$$:   94-block 10
    $$$$$:   94-block 11
    $$$$$:   94-block 12
    $$$$$:   94-block 13
    $$$$$:   94-block 14
    $$$$$:   94-block 15
        1:   95:}
        1:   95-block  0
        1:   95-block  1
    $$$$$:   95-block  2
------------------
        -:   96:
        4:   97:TEST(Scalar2DRepresentationTest, TestDirectionLength) {
        1:   98:  Direction d1(3, 4);
       1*:   99:  ASSERT_TRUE(abs(length(d1) - 5) < 1e-5);
        -:  100:
        1:  101:  Direction d2(5, 6);
       1*:  102:  ASSERT_TRUE(abs(length(d2) - std::sqrt(5 * 5 + 6 * 6)) < 1e-5);
        -:  103:}
------------------
_ZN51Scalar2DRepresentationTest_TestDirectionLength_TestC2Ev:
        1:   97:TEST(Scalar2DRepresentationTest, TestDirectionLength) {
        1:   97-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestDirectionLength_TestD0Ev:
        1:   97:TEST(Scalar2DRepresentationTest, TestDirectionLength) {
        1:   97-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestDirectionLength_TestD2Ev:
        1:   97:TEST(Scalar2DRepresentationTest, TestDirectionLength) {
        1:   97-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestDirectionLength_Test8TestBodyEv:
        1:   97:TEST(Scalar2DRepresentationTest, TestDirectionLength) {
        1:   98:  Direction d1(3, 4);
        1:   98-block  0
       1*:   99:  ASSERT_TRUE(abs(length(d1) - 5) < 1e-5);
        1:   99-block  0
    %%%%%:   99-block  1
    %%%%%:   99-block  2
    %%%%%:   99-block  3
    %%%%%:   99-block  4
    %%%%%:   99-block  5
        1:   99-block  6
        1:   99-block  7
    $$$$$:   99-block  8
    $$$$$:   99-block  9
    $$$$$:   99-block 10
    $$$$$:   99-block 11
    $$$$$:   99-block 12
    $$$$$:   99-block 13
    $$$$$:   99-block 14
        -:  100:
        1:  101:  Direction d2(5, 6);
        1:  101-block  0
       1*:  102:  ASSERT_TRUE(abs(length(d2) - std::sqrt(5 * 5 + 6 * 6)) < 1e-5);
        1:  102-block  0
    %%%%%:  102-block  1
    %%%%%:  102-block  2
    %%%%%:  102-block  3
    %%%%%:  102-block  4
    %%%%%:  102-block  5
        1:  102-block  6
        1:  102-block  7
    $$$$$:  102-block  8
    $$$$$:  102-block  9
    $$$$$:  102-block 10
    $$$$$:  102-block 11
    $$$$$:  102-block 12
    $$$$$:  102-block 13
    $$$$$:  102-block 14
        -:  103:}
------------------
        -:  104:
        4:  105:TEST(Scalar2DRepresentationTest, TestDirectionZeroLength) {
        1:  106:  Direction d1(0, 0);
       1*:  107:  ASSERT_TRUE(abs(length(d1) - 0) < 1e-5);
        -:  108:}
------------------
_ZN55Scalar2DRepresentationTest_TestDirectionZeroLength_TestC2Ev:
        1:  105:TEST(Scalar2DRepresentationTest, TestDirectionZeroLength) {
        1:  105-block  0
------------------
_ZN55Scalar2DRepresentationTest_TestDirectionZeroLength_TestD0Ev:
        1:  105:TEST(Scalar2DRepresentationTest, TestDirectionZeroLength) {
        1:  105-block  0
------------------
_ZN55Scalar2DRepresentationTest_TestDirectionZeroLength_TestD2Ev:
        1:  105:TEST(Scalar2DRepresentationTest, TestDirectionZeroLength) {
        1:  105-block  0
------------------
_ZN55Scalar2DRepresentationTest_TestDirectionZeroLength_Test8TestBodyEv:
        1:  105:TEST(Scalar2DRepresentationTest, TestDirectionZeroLength) {
        1:  106:  Direction d1(0, 0);
        1:  106-block  0
       1*:  107:  ASSERT_TRUE(abs(length(d1) - 0) < 1e-5);
        1:  107-block  0
    %%%%%:  107-block  1
    %%%%%:  107-block  2
    %%%%%:  107-block  3
    %%%%%:  107-block  4
    %%%%%:  107-block  5
        1:  107-block  6
        1:  107-block  7
    $$$$$:  107-block  8
    $$$$$:  107-block  9
    $$$$$:  107-block 10
    $$$$$:  107-block 11
    $$$$$:  107-block 12
    $$$$$:  107-block 13
    $$$$$:  107-block 14
        -:  108:}
------------------
        -:  109:
        4:  110:TEST(Scalar2DRepresentationTest, TestNormalizeZeroLengthDirection) {
        1:  111:  auto d1 = Direction(0, 0);
        1:  112:  auto d2 = normalizeDirection(d1);
       1*:  113:  ASSERT_TRUE(abs(d2.getX() - 0) < 1e-5);
       1*:  114:  ASSERT_TRUE(abs(d2.getY() - 0) < 1e-5);
        -:  115:}
------------------
_ZN64Scalar2DRepresentationTest_TestNormalizeZeroLengthDirection_TestC2Ev:
        1:  110:TEST(Scalar2DRepresentationTest, TestNormalizeZeroLengthDirection) {
        1:  110-block  0
------------------
_ZN64Scalar2DRepresentationTest_TestNormalizeZeroLengthDirection_TestD0Ev:
        1:  110:TEST(Scalar2DRepresentationTest, TestNormalizeZeroLengthDirection) {
        1:  110-block  0
------------------
_ZN64Scalar2DRepresentationTest_TestNormalizeZeroLengthDirection_TestD2Ev:
        1:  110:TEST(Scalar2DRepresentationTest, TestNormalizeZeroLengthDirection) {
        1:  110-block  0
------------------
_ZN64Scalar2DRepresentationTest_TestNormalizeZeroLengthDirection_Test8TestBodyEv:
        1:  110:TEST(Scalar2DRepresentationTest, TestNormalizeZeroLengthDirection) {
        1:  111:  auto d1 = Direction(0, 0);
        1:  111-block  0
        1:  112:  auto d2 = normalizeDirection(d1);
       1*:  113:  ASSERT_TRUE(abs(d2.getX() - 0) < 1e-5);
        1:  113-block  0
    %%%%%:  113-block  1
    %%%%%:  113-block  2
    %%%%%:  113-block  3
    %%%%%:  113-block  4
    %%%%%:  113-block  5
        1:  113-block  6
        1:  113-block  7
    $$$$$:  113-block  8
    $$$$$:  113-block  9
    $$$$$:  113-block 10
    $$$$$:  113-block 11
    $$$$$:  113-block 12
    $$$$$:  113-block 13
    $$$$$:  113-block 14
       1*:  114:  ASSERT_TRUE(abs(d2.getY() - 0) < 1e-5);
        1:  114-block  0
    %%%%%:  114-block  1
    %%%%%:  114-block  2
    %%%%%:  114-block  3
    %%%%%:  114-block  4
    %%%%%:  114-block  5
        1:  114-block  6
        1:  114-block  7
    $$$$$:  114-block  8
    $$$$$:  114-block  9
    $$$$$:  114-block 10
    $$$$$:  114-block 11
    $$$$$:  114-block 12
    $$$$$:  114-block 13
    $$$$$:  114-block 14
        -:  115:}
------------------
        -:  116:
        4:  117:TEST(Scalar2DRepresentationTest, TestNormalizeDirection) {
        1:  118:  auto d1 = Direction(3, 4);
        1:  119:  auto d2 = normalizeDirection(d1);
       1*:  120:  ASSERT_TRUE(abs(d2.getX() - 0.6) < 1e-5);
       1*:  121:  ASSERT_TRUE(abs(d2.getY() - 0.8) < 1e-5);
       1*:  122:  ASSERT_TRUE(abs(length(d2) - 1) < 1e-5);
        -:  123:}
------------------
_ZN54Scalar2DRepresentationTest_TestNormalizeDirection_TestC2Ev:
        1:  117:TEST(Scalar2DRepresentationTest, TestNormalizeDirection) {
        1:  117-block  0
------------------
_ZN54Scalar2DRepresentationTest_TestNormalizeDirection_TestD0Ev:
        1:  117:TEST(Scalar2DRepresentationTest, TestNormalizeDirection) {
        1:  117-block  0
------------------
_ZN54Scalar2DRepresentationTest_TestNormalizeDirection_TestD2Ev:
        1:  117:TEST(Scalar2DRepresentationTest, TestNormalizeDirection) {
        1:  117-block  0
------------------
_ZN54Scalar2DRepresentationTest_TestNormalizeDirection_Test8TestBodyEv:
        1:  117:TEST(Scalar2DRepresentationTest, TestNormalizeDirection) {
        1:  118:  auto d1 = Direction(3, 4);
        1:  118-block  0
        1:  119:  auto d2 = normalizeDirection(d1);
       1*:  120:  ASSERT_TRUE(abs(d2.getX() - 0.6) < 1e-5);
        1:  120-block  0
    %%%%%:  120-block  1
    %%%%%:  120-block  2
    %%%%%:  120-block  3
    %%%%%:  120-block  4
    %%%%%:  120-block  5
        1:  120-block  6
        1:  120-block  7
    $$$$$:  120-block  8
    $$$$$:  120-block  9
    $$$$$:  120-block 10
    $$$$$:  120-block 11
    $$$$$:  120-block 12
    $$$$$:  120-block 13
    $$$$$:  120-block 14
       1*:  121:  ASSERT_TRUE(abs(d2.getY() - 0.8) < 1e-5);
        1:  121-block  0
    %%%%%:  121-block  1
    %%%%%:  121-block  2
    %%%%%:  121-block  3
    %%%%%:  121-block  4
    %%%%%:  121-block  5
        1:  121-block  6
        1:  121-block  7
    $$$$$:  121-block  8
    $$$$$:  121-block  9
    $$$$$:  121-block 10
    $$$$$:  121-block 11
    $$$$$:  121-block 12
    $$$$$:  121-block 13
    $$$$$:  121-block 14
       1*:  122:  ASSERT_TRUE(abs(length(d2) - 1) < 1e-5);
        1:  122-block  0
        1:  122-block  1
    %%%%%:  122-block  2
    %%%%%:  122-block  3
    %%%%%:  122-block  4
    %%%%%:  122-block  5
    %%%%%:  122-block  6
        1:  122-block  7
        1:  122-block  8
    $$$$$:  122-block  9
    $$$$$:  122-block 10
    $$$$$:  122-block 11
    $$$$$:  122-block 12
    $$$$$:  122-block 13
    $$$$$:  122-block 14
    $$$$$:  122-block 15
        -:  123:}
------------------
        -:  124:
        4:  125:TEST(Scalar2DRepresentationTest, TestDirectionZeroAngle) {
        1:  126:  auto d = Direction(1, 0);
        1:  127:  auto angle = getDirectionAngle(d);
       1*:  128:  ASSERT_FLOAT_EQ(angle, 0);
        -:  129:}
------------------
_ZN54Scalar2DRepresentationTest_TestDirectionZeroAngle_TestC2Ev:
        1:  125:TEST(Scalar2DRepresentationTest, TestDirectionZeroAngle) {
        1:  125-block  0
------------------
_ZN54Scalar2DRepresentationTest_TestDirectionZeroAngle_TestD0Ev:
        1:  125:TEST(Scalar2DRepresentationTest, TestDirectionZeroAngle) {
        1:  125-block  0
------------------
_ZN54Scalar2DRepresentationTest_TestDirectionZeroAngle_TestD2Ev:
        1:  125:TEST(Scalar2DRepresentationTest, TestDirectionZeroAngle) {
        1:  125-block  0
------------------
_ZN54Scalar2DRepresentationTest_TestDirectionZeroAngle_Test8TestBodyEv:
        1:  125:TEST(Scalar2DRepresentationTest, TestDirectionZeroAngle) {
        1:  126:  auto d = Direction(1, 0);
        1:  126-block  0
        1:  127:  auto angle = getDirectionAngle(d);
       1*:  128:  ASSERT_FLOAT_EQ(angle, 0);
        1:  128-block  0
        1:  128-block  1
    %%%%%:  128-block  2
    %%%%%:  128-block  3
    %%%%%:  128-block  4
    %%%%%:  128-block  5
        1:  128-block  6
        1:  128-block  7
    $$$$$:  128-block  8
    $$$$$:  128-block  9
    $$$$$:  128-block 10
    $$$$$:  128-block 11
    $$$$$:  128-block 12
        -:  129:}
------------------
        -:  130:
        4:  131:TEST(Scalar2DRepresentationTest, TestDirection90Angle) {
        1:  132:  auto d = Direction(0, 1);
        1:  133:  auto angle = getDirectionAngle(d);
       1*:  134:  ASSERT_FLOAT_EQ(angle, M_PI / 2);
        -:  135:}
------------------
_ZN52Scalar2DRepresentationTest_TestDirection90Angle_TestC2Ev:
        1:  131:TEST(Scalar2DRepresentationTest, TestDirection90Angle) {
        1:  131-block  0
------------------
_ZN52Scalar2DRepresentationTest_TestDirection90Angle_TestD0Ev:
        1:  131:TEST(Scalar2DRepresentationTest, TestDirection90Angle) {
        1:  131-block  0
------------------
_ZN52Scalar2DRepresentationTest_TestDirection90Angle_TestD2Ev:
        1:  131:TEST(Scalar2DRepresentationTest, TestDirection90Angle) {
        1:  131-block  0
------------------
_ZN52Scalar2DRepresentationTest_TestDirection90Angle_Test8TestBodyEv:
        1:  131:TEST(Scalar2DRepresentationTest, TestDirection90Angle) {
        1:  132:  auto d = Direction(0, 1);
        1:  132-block  0
        1:  133:  auto angle = getDirectionAngle(d);
       1*:  134:  ASSERT_FLOAT_EQ(angle, M_PI / 2);
        1:  134-block  0
        1:  134-block  1
    %%%%%:  134-block  2
    %%%%%:  134-block  3
    %%%%%:  134-block  4
    %%%%%:  134-block  5
        1:  134-block  6
        1:  134-block  7
    $$$$$:  134-block  8
    $$$$$:  134-block  9
    $$$$$:  134-block 10
    $$$$$:  134-block 11
    $$$$$:  134-block 12
        -:  135:}
------------------
        -:  136:
        4:  137:TEST(Scalar2DRepresentatioTest, TestDirectionAngle) {
        1:  138:  auto d = Direction(1, 1);
        1:  139:  auto angle = getDirectionAngle(d);
       1*:  140:  ASSERT_FLOAT_EQ(angle, M_PI / 4);
        -:  141:}
------------------
_ZN49Scalar2DRepresentatioTest_TestDirectionAngle_TestC2Ev:
        1:  137:TEST(Scalar2DRepresentatioTest, TestDirectionAngle) {
        1:  137-block  0
------------------
_ZN49Scalar2DRepresentatioTest_TestDirectionAngle_TestD0Ev:
        1:  137:TEST(Scalar2DRepresentatioTest, TestDirectionAngle) {
        1:  137-block  0
------------------
_ZN49Scalar2DRepresentatioTest_TestDirectionAngle_TestD2Ev:
        1:  137:TEST(Scalar2DRepresentatioTest, TestDirectionAngle) {
        1:  137-block  0
------------------
_ZN49Scalar2DRepresentatioTest_TestDirectionAngle_Test8TestBodyEv:
        1:  137:TEST(Scalar2DRepresentatioTest, TestDirectionAngle) {
        1:  138:  auto d = Direction(1, 1);
        1:  138-block  0
        1:  139:  auto angle = getDirectionAngle(d);
       1*:  140:  ASSERT_FLOAT_EQ(angle, M_PI / 4);
        1:  140-block  0
        1:  140-block  1
    %%%%%:  140-block  2
    %%%%%:  140-block  3
    %%%%%:  140-block  4
    %%%%%:  140-block  5
        1:  140-block  6
        1:  140-block  7
    $$$$$:  140-block  8
    $$$$$:  140-block  9
    $$$$$:  140-block 10
    $$$$$:  140-block 11
    $$$$$:  140-block 12
        -:  141:}
------------------
        -:  142:
        4:  143:TEST(Scalar2DRepresentationTest, TestNegativeXAngle) {
        1:  144:  auto d = Direction(-1, 1);
        1:  145:  auto angle = getDirectionAngle(d);
       1*:  146:  ASSERT_FLOAT_EQ(angle, 3 * M_PI / 4);
        -:  147:}
------------------
_ZN50Scalar2DRepresentationTest_TestNegativeXAngle_TestC2Ev:
        1:  143:TEST(Scalar2DRepresentationTest, TestNegativeXAngle) {
        1:  143-block  0
------------------
_ZN50Scalar2DRepresentationTest_TestNegativeXAngle_TestD0Ev:
        1:  143:TEST(Scalar2DRepresentationTest, TestNegativeXAngle) {
        1:  143-block  0
------------------
_ZN50Scalar2DRepresentationTest_TestNegativeXAngle_TestD2Ev:
        1:  143:TEST(Scalar2DRepresentationTest, TestNegativeXAngle) {
        1:  143-block  0
------------------
_ZN50Scalar2DRepresentationTest_TestNegativeXAngle_Test8TestBodyEv:
        1:  143:TEST(Scalar2DRepresentationTest, TestNegativeXAngle) {
        1:  144:  auto d = Direction(-1, 1);
        1:  144-block  0
        1:  145:  auto angle = getDirectionAngle(d);
       1*:  146:  ASSERT_FLOAT_EQ(angle, 3 * M_PI / 4);
        1:  146-block  0
        1:  146-block  1
    %%%%%:  146-block  2
    %%%%%:  146-block  3
    %%%%%:  146-block  4
    %%%%%:  146-block  5
        1:  146-block  6
        1:  146-block  7
    $$$$$:  146-block  8
    $$$$$:  146-block  9
    $$$$$:  146-block 10
    $$$$$:  146-block 11
    $$$$$:  146-block 12
        -:  147:}
------------------
        -:  148:
        4:  149:TEST(Scalar2DRepresentationTest, TestNegativeXYAngle) {
        1:  150:  auto d = Direction(-1, -1);
        1:  151:  auto angle = getDirectionAngle(d);
       1*:  152:  ASSERT_FLOAT_EQ(angle, -3 * M_PI / 4);
        -:  153:}
------------------
_ZN51Scalar2DRepresentationTest_TestNegativeXYAngle_TestC2Ev:
        1:  149:TEST(Scalar2DRepresentationTest, TestNegativeXYAngle) {
        1:  149-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestNegativeXYAngle_TestD0Ev:
        1:  149:TEST(Scalar2DRepresentationTest, TestNegativeXYAngle) {
        1:  149-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestNegativeXYAngle_TestD2Ev:
        1:  149:TEST(Scalar2DRepresentationTest, TestNegativeXYAngle) {
        1:  149-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestNegativeXYAngle_Test8TestBodyEv:
        1:  149:TEST(Scalar2DRepresentationTest, TestNegativeXYAngle) {
        1:  150:  auto d = Direction(-1, -1);
        1:  150-block  0
        1:  151:  auto angle = getDirectionAngle(d);
       1*:  152:  ASSERT_FLOAT_EQ(angle, -3 * M_PI / 4);
        1:  152-block  0
        1:  152-block  1
    %%%%%:  152-block  2
    %%%%%:  152-block  3
    %%%%%:  152-block  4
    %%%%%:  152-block  5
        1:  152-block  6
        1:  152-block  7
    $$$$$:  152-block  8
    $$$$$:  152-block  9
    $$$$$:  152-block 10
    $$$$$:  152-block 11
    $$$$$:  152-block 12
        -:  153:}
------------------
        -:  154:
        4:  155:TEST(Scalar2DRepresentationTest, TestNegativeYAngle) {
        1:  156:  auto d = Direction(1, -1);
        1:  157:  auto angle = getDirectionAngle(d);
       1*:  158:  ASSERT_FLOAT_EQ(angle, -M_PI / 4);
        -:  159:}
------------------
_ZN50Scalar2DRepresentationTest_TestNegativeYAngle_TestC2Ev:
        1:  155:TEST(Scalar2DRepresentationTest, TestNegativeYAngle) {
        1:  155-block  0
------------------
_ZN50Scalar2DRepresentationTest_TestNegativeYAngle_TestD0Ev:
        1:  155:TEST(Scalar2DRepresentationTest, TestNegativeYAngle) {
        1:  155-block  0
------------------
_ZN50Scalar2DRepresentationTest_TestNegativeYAngle_TestD2Ev:
        1:  155:TEST(Scalar2DRepresentationTest, TestNegativeYAngle) {
        1:  155-block  0
------------------
_ZN50Scalar2DRepresentationTest_TestNegativeYAngle_Test8TestBodyEv:
        1:  155:TEST(Scalar2DRepresentationTest, TestNegativeYAngle) {
        1:  156:  auto d = Direction(1, -1);
        1:  156-block  0
        1:  157:  auto angle = getDirectionAngle(d);
       1*:  158:  ASSERT_FLOAT_EQ(angle, -M_PI / 4);
        1:  158-block  0
        1:  158-block  1
    %%%%%:  158-block  2
    %%%%%:  158-block  3
    %%%%%:  158-block  4
    %%%%%:  158-block  5
        1:  158-block  6
        1:  158-block  7
    $$$$$:  158-block  8
    $$$$$:  158-block  9
    $$$$$:  158-block 10
    $$$$$:  158-block 11
    $$$$$:  158-block 12
        -:  159:}
------------------
        -:  160:
        4:  161:TEST(Scalar2DRepresentatinoTest, TestPIAngle) {
        1:  162:  auto d = Direction(-1, 0);
        1:  163:  auto angle = getDirectionAngle(d);
       1*:  164:  ASSERT_FLOAT_EQ(angle, M_PI);
        -:  165:}
------------------
_ZN43Scalar2DRepresentatinoTest_TestPIAngle_TestC2Ev:
        1:  161:TEST(Scalar2DRepresentatinoTest, TestPIAngle) {
        1:  161-block  0
------------------
_ZN43Scalar2DRepresentatinoTest_TestPIAngle_TestD0Ev:
        1:  161:TEST(Scalar2DRepresentatinoTest, TestPIAngle) {
        1:  161-block  0
------------------
_ZN43Scalar2DRepresentatinoTest_TestPIAngle_TestD2Ev:
        1:  161:TEST(Scalar2DRepresentatinoTest, TestPIAngle) {
        1:  161-block  0
------------------
_ZN43Scalar2DRepresentatinoTest_TestPIAngle_Test8TestBodyEv:
        1:  161:TEST(Scalar2DRepresentatinoTest, TestPIAngle) {
        1:  162:  auto d = Direction(-1, 0);
        1:  162-block  0
        1:  163:  auto angle = getDirectionAngle(d);
       1*:  164:  ASSERT_FLOAT_EQ(angle, M_PI);
        1:  164-block  0
        1:  164-block  1
    %%%%%:  164-block  2
    %%%%%:  164-block  3
    %%%%%:  164-block  4
    %%%%%:  164-block  5
        1:  164-block  6
        1:  164-block  7
    $$$$$:  164-block  8
    $$$$$:  164-block  9
    $$$$$:  164-block 10
    $$$$$:  164-block 11
    $$$$$:  164-block 12
        -:  165:}
------------------
        -:  166:
        4:  167:TEST(Scalar2DRepresentationTest, TestNegative90Angle) {
        1:  168:  auto d = Direction(0, -1);
        1:  169:  auto angle = getDirectionAngle(d);
       1*:  170:  ASSERT_FLOAT_EQ(angle, -M_PI / 2);
        -:  171:}
------------------
_ZN51Scalar2DRepresentationTest_TestNegative90Angle_TestC2Ev:
        1:  167:TEST(Scalar2DRepresentationTest, TestNegative90Angle) {
        1:  167-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestNegative90Angle_TestD0Ev:
        1:  167:TEST(Scalar2DRepresentationTest, TestNegative90Angle) {
        1:  167-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestNegative90Angle_TestD2Ev:
        1:  167:TEST(Scalar2DRepresentationTest, TestNegative90Angle) {
        1:  167-block  0
------------------
_ZN51Scalar2DRepresentationTest_TestNegative90Angle_Test8TestBodyEv:
        1:  167:TEST(Scalar2DRepresentationTest, TestNegative90Angle) {
        1:  168:  auto d = Direction(0, -1);
        1:  168-block  0
        1:  169:  auto angle = getDirectionAngle(d);
       1*:  170:  ASSERT_FLOAT_EQ(angle, -M_PI / 2);
        1:  170-block  0
        1:  170-block  1
    %%%%%:  170-block  2
    %%%%%:  170-block  3
    %%%%%:  170-block  4
    %%%%%:  170-block  5
        1:  170-block  6
        1:  170-block  7
    $$$$$:  170-block  8
    $$$$$:  170-block  9
    $$$$$:  170-block 10
    $$$$$:  170-block 11
    $$$$$:  170-block 12
        -:  171:}
------------------
        -:  172:
        4:  173:TEST(Scalar2DRepresentationTest, TestDistanceBetweenParallelDirections) {
        1:  174:  auto d1 = Direction(1, 2);
        1:  175:  auto d2 = Direction(2, 4);
        1:  176:  auto res = countDistanceBetweenConjoinedDirections(d1, d2);
       1*:  177:  ASSERT_TRUE(abs(res - 0) < 1e-5);
        -:  178:}
------------------
_ZN69Scalar2DRepresentationTest_TestDistanceBetweenParallelDirections_TestC2Ev:
        1:  173:TEST(Scalar2DRepresentationTest, TestDistanceBetweenParallelDirections) {
        1:  173-block  0
------------------
_ZN69Scalar2DRepresentationTest_TestDistanceBetweenParallelDirections_TestD0Ev:
        1:  173:TEST(Scalar2DRepresentationTest, TestDistanceBetweenParallelDirections) {
        1:  173-block  0
------------------
_ZN69Scalar2DRepresentationTest_TestDistanceBetweenParallelDirections_TestD2Ev:
        1:  173:TEST(Scalar2DRepresentationTest, TestDistanceBetweenParallelDirections) {
        1:  173-block  0
------------------
_ZN69Scalar2DRepresentationTest_TestDistanceBetweenParallelDirections_Test8TestBodyEv:
        1:  173:TEST(Scalar2DRepresentationTest, TestDistanceBetweenParallelDirections) {
        1:  174:  auto d1 = Direction(1, 2);
        1:  174-block  0
        1:  175:  auto d2 = Direction(2, 4);
        1:  176:  auto res = countDistanceBetweenConjoinedDirections(d1, d2);
       1*:  177:  ASSERT_TRUE(abs(res - 0) < 1e-5);
        1:  177-block  0
    %%%%%:  177-block  1
    %%%%%:  177-block  2
    %%%%%:  177-block  3
    %%%%%:  177-block  4
    %%%%%:  177-block  5
        1:  177-block  6
        1:  177-block  7
    $$$$$:  177-block  8
    $$$$$:  177-block  9
    $$$$$:  177-block 10
    $$$$$:  177-block 11
    $$$$$:  177-block 12
    $$$$$:  177-block 13
    $$$$$:  177-block 14
        -:  178:}
------------------
        -:  179:
        4:  180:TEST(Scalar2DRepresentationTest, TestDistanceBetweenPerpendicularDirections) {
        1:  181:  auto d1 = Direction(1, 0);
        1:  182:  auto d2 = Direction(0, 1);
        1:  183:  auto res = countDistanceBetweenConjoinedDirections(d1, d2);
       1*:  184:  ASSERT_FLOAT_EQ(res, 1);
        -:  185:}
------------------
_ZN74Scalar2DRepresentationTest_TestDistanceBetweenPerpendicularDirections_TestC2Ev:
        1:  180:TEST(Scalar2DRepresentationTest, TestDistanceBetweenPerpendicularDirections) {
        1:  180-block  0
------------------
_ZN74Scalar2DRepresentationTest_TestDistanceBetweenPerpendicularDirections_TestD0Ev:
        1:  180:TEST(Scalar2DRepresentationTest, TestDistanceBetweenPerpendicularDirections) {
        1:  180-block  0
------------------
_ZN74Scalar2DRepresentationTest_TestDistanceBetweenPerpendicularDirections_TestD2Ev:
        1:  180:TEST(Scalar2DRepresentationTest, TestDistanceBetweenPerpendicularDirections) {
        1:  180-block  0
------------------
_ZN74Scalar2DRepresentationTest_TestDistanceBetweenPerpendicularDirections_Test8TestBodyEv:
        1:  180:TEST(Scalar2DRepresentationTest, TestDistanceBetweenPerpendicularDirections) {
        1:  181:  auto d1 = Direction(1, 0);
        1:  181-block  0
        1:  182:  auto d2 = Direction(0, 1);
        1:  183:  auto res = countDistanceBetweenConjoinedDirections(d1, d2);
       1*:  184:  ASSERT_FLOAT_EQ(res, 1);
        1:  184-block  0
        1:  184-block  1
    %%%%%:  184-block  2
    %%%%%:  184-block  3
    %%%%%:  184-block  4
    %%%%%:  184-block  5
        1:  184-block  6
        1:  184-block  7
    $$$$$:  184-block  8
    $$$$$:  184-block  9
    $$$$$:  184-block 10
    $$$$$:  184-block 11
    $$$$$:  184-block 12
        -:  185:}
------------------
        -:  186:
        4:  187:TEST(Scalar2DRepresentationTest, TestDistanceBetweenOppositDirections) {
        1:  188:  auto d1 = Direction(1, 0);
        1:  189:  auto d2 = Direction(-1, 0);
        1:  190:  auto res = countDistanceBetweenConjoinedDirections(d1, d2);
       1*:  191:  ASSERT_TRUE(abs(res - 0) < 1e-5);
        -:  192:}
------------------
_ZN68Scalar2DRepresentationTest_TestDistanceBetweenOppositDirections_TestC2Ev:
        1:  187:TEST(Scalar2DRepresentationTest, TestDistanceBetweenOppositDirections) {
        1:  187-block  0
------------------
_ZN68Scalar2DRepresentationTest_TestDistanceBetweenOppositDirections_TestD0Ev:
        1:  187:TEST(Scalar2DRepresentationTest, TestDistanceBetweenOppositDirections) {
        1:  187-block  0
------------------
_ZN68Scalar2DRepresentationTest_TestDistanceBetweenOppositDirections_TestD2Ev:
        1:  187:TEST(Scalar2DRepresentationTest, TestDistanceBetweenOppositDirections) {
        1:  187-block  0
------------------
_ZN68Scalar2DRepresentationTest_TestDistanceBetweenOppositDirections_Test8TestBodyEv:
        1:  187:TEST(Scalar2DRepresentationTest, TestDistanceBetweenOppositDirections) {
        1:  188:  auto d1 = Direction(1, 0);
        1:  188-block  0
        1:  189:  auto d2 = Direction(-1, 0);
        1:  190:  auto res = countDistanceBetweenConjoinedDirections(d1, d2);
       1*:  191:  ASSERT_TRUE(abs(res - 0) < 1e-5);
        1:  191-block  0
    %%%%%:  191-block  1
    %%%%%:  191-block  2
    %%%%%:  191-block  3
    %%%%%:  191-block  4
    %%%%%:  191-block  5
        1:  191-block  6
        1:  191-block  7
    $$$$$:  191-block  8
    $$$$$:  191-block  9
    $$$$$:  191-block 10
    $$$$$:  191-block 11
    $$$$$:  191-block 12
    $$$$$:  191-block 13
    $$$$$:  191-block 14
        -:  192:}
------------------
        -:  193:
        4:  194:TEST(Scalar2DRepresentationTest, TestDistanceBetweenNormalizedDirections) {
        1:  195:  auto d1 = normalizeDirection(Direction(1, 0));
        1:  196:  auto d2 = normalizeDirection(Direction(1, 1));
        1:  197:  auto res = countDistanceBetweenConjoinedDirections(d1, d2);
       1*:  198:  ASSERT_TRUE(abs(res - sqrt(2) / 2.) < 1e-5);
        -:  199:}
------------------
_ZN71Scalar2DRepresentationTest_TestDistanceBetweenNormalizedDirections_TestC2Ev:
        1:  194:TEST(Scalar2DRepresentationTest, TestDistanceBetweenNormalizedDirections) {
        1:  194-block  0
------------------
_ZN71Scalar2DRepresentationTest_TestDistanceBetweenNormalizedDirections_TestD0Ev:
        1:  194:TEST(Scalar2DRepresentationTest, TestDistanceBetweenNormalizedDirections) {
        1:  194-block  0
------------------
_ZN71Scalar2DRepresentationTest_TestDistanceBetweenNormalizedDirections_TestD2Ev:
        1:  194:TEST(Scalar2DRepresentationTest, TestDistanceBetweenNormalizedDirections) {
        1:  194-block  0
------------------
_ZN71Scalar2DRepresentationTest_TestDistanceBetweenNormalizedDirections_Test8TestBodyEv:
        1:  194:TEST(Scalar2DRepresentationTest, TestDistanceBetweenNormalizedDirections) {
        1:  195:  auto d1 = normalizeDirection(Direction(1, 0));
        1:  195-block  0
    $$$$$:  195-block  1
        1:  196:  auto d2 = normalizeDirection(Direction(1, 1));
        1:  196-block  0
    $$$$$:  196-block  1
        1:  197:  auto res = countDistanceBetweenConjoinedDirections(d1, d2);
        1:  197-block  0
       1*:  198:  ASSERT_TRUE(abs(res - sqrt(2) / 2.) < 1e-5);
        1:  198-block  0
    %%%%%:  198-block  1
    %%%%%:  198-block  2
    %%%%%:  198-block  3
    %%%%%:  198-block  4
    %%%%%:  198-block  5
        1:  198-block  6
        1:  198-block  7
    $$$$$:  198-block  8
    $$$$$:  198-block  9
    $$$$$:  198-block 10
    $$$$$:  198-block 11
    $$$$$:  198-block 12
    $$$$$:  198-block 13
    $$$$$:  198-block 14
        -:  199:}
------------------
        -:  200:
        4:  201:TEST(Scalar2DRepresentationTest, TestRescaleDirection) {
        1:  202:    auto d1 = Direction(2,3);
        1:  203:    auto d2 = d1 * 2;
       1*:  204:    ASSERT_FLOAT_EQ(d2.getX(), 4);
       1*:  205:    ASSERT_FLOAT_EQ(d2.getY(), 6);
        -:  206:}
------------------
_ZN52Scalar2DRepresentationTest_TestRescaleDirection_TestC2Ev:
        1:  201:TEST(Scalar2DRepresentationTest, TestRescaleDirection) {
        1:  201-block  0
------------------
_ZN52Scalar2DRepresentationTest_TestRescaleDirection_TestD0Ev:
        1:  201:TEST(Scalar2DRepresentationTest, TestRescaleDirection) {
        1:  201-block  0
------------------
_ZN52Scalar2DRepresentationTest_TestRescaleDirection_TestD2Ev:
        1:  201:TEST(Scalar2DRepresentationTest, TestRescaleDirection) {
        1:  201-block  0
------------------
_ZN52Scalar2DRepresentationTest_TestRescaleDirection_Test8TestBodyEv:
        1:  201:TEST(Scalar2DRepresentationTest, TestRescaleDirection) {
        1:  202:    auto d1 = Direction(2,3);
        1:  202-block  0
        1:  203:    auto d2 = d1 * 2;
       1*:  204:    ASSERT_FLOAT_EQ(d2.getX(), 4);
        1:  204-block  0
        1:  204-block  1
    %%%%%:  204-block  2
    %%%%%:  204-block  3
    %%%%%:  204-block  4
    %%%%%:  204-block  5
        1:  204-block  6
        1:  204-block  7
    $$$$$:  204-block  8
    $$$$$:  204-block  9
    $$$$$:  204-block 10
    $$$$$:  204-block 11
    $$$$$:  204-block 12
       1*:  205:    ASSERT_FLOAT_EQ(d2.getY(), 6);
        1:  205-block  0
        1:  205-block  1
    %%%%%:  205-block  2
    %%%%%:  205-block  3
    %%%%%:  205-block  4
    %%%%%:  205-block  5
        1:  205-block  6
        1:  205-block  7
    $$$$$:  205-block  8
    $$$$$:  205-block  9
    $$$$$:  205-block 10
    $$$$$:  205-block 11
    $$$$$:  205-block 12
        -:  206:}
------------------
        -:  207:
        4:  208:TEST(Scalar2DRepresentationTest, TestRescaleCoordinate) {
        1:  209:    auto c1 = CoordinateValue(2,3);
        1:  210:    auto c2 = c1 * 0.5;
       1*:  211:    ASSERT_FLOAT_EQ(c2.getX(), 1);
       1*:  212:    ASSERT_FLOAT_EQ(c2.getY(), 1.5);
        -:  213:}
------------------
_ZN53Scalar2DRepresentationTest_TestRescaleCoordinate_TestC2Ev:
        1:  208:TEST(Scalar2DRepresentationTest, TestRescaleCoordinate) {
        1:  208-block  0
------------------
_ZN53Scalar2DRepresentationTest_TestRescaleCoordinate_TestD0Ev:
        1:  208:TEST(Scalar2DRepresentationTest, TestRescaleCoordinate) {
        1:  208-block  0
------------------
_ZN53Scalar2DRepresentationTest_TestRescaleCoordinate_TestD2Ev:
        1:  208:TEST(Scalar2DRepresentationTest, TestRescaleCoordinate) {
        1:  208-block  0
------------------
_ZN53Scalar2DRepresentationTest_TestRescaleCoordinate_Test8TestBodyEv:
        1:  208:TEST(Scalar2DRepresentationTest, TestRescaleCoordinate) {
        1:  209:    auto c1 = CoordinateValue(2,3);
        1:  209-block  0
        1:  210:    auto c2 = c1 * 0.5;
       1*:  211:    ASSERT_FLOAT_EQ(c2.getX(), 1);
        1:  211-block  0
        1:  211-block  1
    %%%%%:  211-block  2
    %%%%%:  211-block  3
    %%%%%:  211-block  4
    %%%%%:  211-block  5
        1:  211-block  6
        1:  211-block  7
    $$$$$:  211-block  8
    $$$$$:  211-block  9
    $$$$$:  211-block 10
    $$$$$:  211-block 11
    $$$$$:  211-block 12
       1*:  212:    ASSERT_FLOAT_EQ(c2.getY(), 1.5);
        1:  212-block  0
        1:  212-block  1
    %%%%%:  212-block  2
    %%%%%:  212-block  3
    %%%%%:  212-block  4
    %%%%%:  212-block  5
        1:  212-block  6
        1:  212-block  7
    $$$$$:  212-block  8
    $$$$$:  212-block  9
    $$$$$:  212-block 10
    $$$$$:  212-block 11
    $$$$$:  212-block 12
        -:  213:}
------------------
        -:  214:
        4:  215:TEST(Scalar2DRepresentationTest, TestRescaleResolution) {
        1:  216:    auto c1 = Resolution(2,3);
        1:  217:    auto c2 = c1 * 0.5;
       1*:  218:    ASSERT_FLOAT_EQ(c2.getX(), 1);
       1*:  219:    ASSERT_FLOAT_EQ(c2.getY(), 1);
        -:  220:}
------------------
_ZN53Scalar2DRepresentationTest_TestRescaleResolution_TestC2Ev:
        1:  215:TEST(Scalar2DRepresentationTest, TestRescaleResolution) {
        1:  215-block  0
------------------
_ZN53Scalar2DRepresentationTest_TestRescaleResolution_TestD0Ev:
        1:  215:TEST(Scalar2DRepresentationTest, TestRescaleResolution) {
        1:  215-block  0
------------------
_ZN53Scalar2DRepresentationTest_TestRescaleResolution_TestD2Ev:
        1:  215:TEST(Scalar2DRepresentationTest, TestRescaleResolution) {
        1:  215-block  0
------------------
_ZN53Scalar2DRepresentationTest_TestRescaleResolution_Test8TestBodyEv:
        1:  215:TEST(Scalar2DRepresentationTest, TestRescaleResolution) {
        1:  216:    auto c1 = Resolution(2,3);
        1:  216-block  0
        1:  217:    auto c2 = c1 * 0.5;
       1*:  218:    ASSERT_FLOAT_EQ(c2.getX(), 1);
        1:  218-block  0
        1:  218-block  1
    %%%%%:  218-block  2
    %%%%%:  218-block  3
    %%%%%:  218-block  4
    %%%%%:  218-block  5
        1:  218-block  6
        1:  218-block  7
    $$$$$:  218-block  8
    $$$$$:  218-block  9
    $$$$$:  218-block 10
    $$$$$:  218-block 11
    $$$$$:  218-block 12
       1*:  219:    ASSERT_FLOAT_EQ(c2.getY(), 1);
        1:  219-block  0
        1:  219-block  1
    %%%%%:  219-block  2
    %%%%%:  219-block  3
    %%%%%:  219-block  4
    %%%%%:  219-block  5
        1:  219-block  6
        1:  219-block  7
    $$$$$:  219-block  8
    $$$$$:  219-block  9
    $$$$$:  219-block 10
    $$$$$:  219-block 11
    $$$$$:  219-block 12
        -:  220:}
------------------
        -:  221:
        4:  222:TEST(Scalar2DRepresentationTest, TestRescaleResolutionByNegativeFactor) {
        1:  223:    auto c1 = Resolution(2,3);
        1:  224:    auto c2 = c1 * -0.5;
       1*:  225:    ASSERT_FLOAT_EQ(c2.getX(), 0);
       1*:  226:    ASSERT_FLOAT_EQ(c2.getY(), 0);
        -:  227:}
------------------
_ZN69Scalar2DRepresentationTest_TestRescaleResolutionByNegativeFactor_TestC2Ev:
        1:  222:TEST(Scalar2DRepresentationTest, TestRescaleResolutionByNegativeFactor) {
        1:  222-block  0
------------------
_ZN69Scalar2DRepresentationTest_TestRescaleResolutionByNegativeFactor_TestD0Ev:
        1:  222:TEST(Scalar2DRepresentationTest, TestRescaleResolutionByNegativeFactor) {
        1:  222-block  0
------------------
_ZN69Scalar2DRepresentationTest_TestRescaleResolutionByNegativeFactor_TestD2Ev:
        1:  222:TEST(Scalar2DRepresentationTest, TestRescaleResolutionByNegativeFactor) {
        1:  222-block  0
------------------
_ZN69Scalar2DRepresentationTest_TestRescaleResolutionByNegativeFactor_Test8TestBodyEv:
        1:  222:TEST(Scalar2DRepresentationTest, TestRescaleResolutionByNegativeFactor) {
        1:  223:    auto c1 = Resolution(2,3);
        1:  223-block  0
        1:  224:    auto c2 = c1 * -0.5;
       1*:  225:    ASSERT_FLOAT_EQ(c2.getX(), 0);
        1:  225-block  0
        1:  225-block  1
    %%%%%:  225-block  2
    %%%%%:  225-block  3
    %%%%%:  225-block  4
    %%%%%:  225-block  5
        1:  225-block  6
        1:  225-block  7
    $$$$$:  225-block  8
    $$$$$:  225-block  9
    $$$$$:  225-block 10
    $$$$$:  225-block 11
    $$$$$:  225-block 12
       1*:  226:    ASSERT_FLOAT_EQ(c2.getY(), 0);
        1:  226-block  0
        1:  226-block  1
    %%%%%:  226-block  2
    %%%%%:  226-block  3
    %%%%%:  226-block  4
    %%%%%:  226-block  5
        1:  226-block  6
        1:  226-block  7
    $$$$$:  226-block  8
    $$$$$:  226-block  9
    $$$$$:  226-block 10
    $$$$$:  226-block 11
    $$$$$:  226-block 12
        -:  227:}
------------------
        -:  228:
        -:  229:
        1:  230:int main(int argc, char **argv) {
        1:  231:  ::testing::InitGoogleTest(&argc, argv);
        1:  231-block  0
        1:  232:  return RUN_ALL_TESTS();
        -:  233:}

        -:    0:Source:/home/kacper/Pulpit/zpr_eps/src/Scalar2DRepresentation.cc
        -:    0:Graph:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/src/CMakeFiles/Scalar2DRepresentation.dir/Scalar2DRepresentation.cc.gcno
        -:    0:Data:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/src/CMakeFiles/Scalar2DRepresentation.dir/Scalar2DRepresentation.cc.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kacper on 04.11.2022.
        -:    3://
        -:    4:#include "Scalar2DRepresentation.h"
        -:    5:#include <cmath>
        -:    6:#include <sstream>
        -:    7:
        -:    8:
        -:    9:
        2:   10:std::string CoordinateValue::toString() const {
        2:   11:  std::stringstream s;
        2:   11-block  0
        2:   12:  s << "CoordinateValue: (" << getX() << ", " << getY() << ")";
        2:   12-block  0
        2:   12-block  1
        2:   12-block  2
        2:   12-block  3
        2:   12-block  4
        4:   13:  return s.str();
        2:   13-block  0
        2:   13-block  1
        2:   14:}
        2:   14-block  0
    $$$$$:   14-block  1
        -:   15:
        2:   16:std::string Resolution::toString() const {
        2:   17:  std::stringstream s;
        2:   17-block  0
        2:   18:  s << "Resolution: " << getX() << "p x " << getY() << "p";
        2:   18-block  0
        2:   18-block  1
        2:   18-block  2
        2:   18-block  3
        2:   18-block  4
        4:   19:  return s.str();
        2:   19-block  0
        2:   19-block  1
        2:   20:}
        2:   20-block  0
    $$$$$:   20-block  1
        -:   21:/*
        -:   22:Coordinates Coordinates::getMidpoint(const Coordinates &p) const {
        -:   23:  return Coordinates((p.getX() + getX()) / 2, (p.getY() + getY()) / 2);
        -:   24:}
        -:   25:*/
       28:   26:double length(const Direction &d) {
       28:   27:  return std::sqrt(std::pow(d.getX(), 2) + std::pow(d.getY(), 2));
       28:   27-block  0
        -:   28:}
        -:   29:
       20:   30:Direction normalizeDirection(const Direction &d) {
       20:   31:  auto len = length(d);
       20:   31-block  0
       20:   32:  return len == 0 ? Direction(0, 0) : d / len;
        1:   32-block  0
       19:   32-block  1
        -:   33:}
        -:   34:
       16:   35:double getDirectionAngle(const Direction &d) {
       16:   36:  auto d2 = normalizeDirection(d);
       16:   36-block  0
       16:   37:  auto angle = std::asin(d2.getY());
       16:   37-block  0
       16:   38:  if (d2.getX() < 0) {
        4:   39:    angle = (angle >= 0 ? M_PI : -M_PI) - angle;
        4:   39-block  0
        3:   39-block  1
        1:   39-block  2
        4:   39-block  3
        -:   40:  }
       16:   41:  return angle;
       16:   41-block  0
       16:   41-block  1
        -:   42:}
        -:   43:
        -:   44://@todo opposite Directions are a fuss
        4:   45:double countDistanceBetweenConjoinedDirections(const Direction &d1,
        -:   46:                                               const Direction &d2) {
        4:   47:  auto firstAngle = getDirectionAngle(d1);
        4:   47-block  0
        4:   48:  auto secondAngle = getDirectionAngle(d2);
        4:   49:  auto angleInBetween = secondAngle - firstAngle;
        4:   50:  return std::sin(angleInBetween) * length(d2);
        -:   51:}
        -:   52:
       21:   53:CoordinateValue CoordinateValue::operator/(double div) const {
       21:   54:  return div < 1e-5 ? Direction(0, 0) : Direction(getX() / div, getY() / div);
       21:   54-block  0
        1:   54-block  1
       20:   54-block  2
        -:   55:}
        -:   56:
        1:   57:CoordinateValue CoordinateValue::operator+(const CoordinateValue &d) const {
        1:   58:    return {getX() + d.getX(), getY() + d.getY()};
        1:   58-block  0
        -:   59:}
        -:   60:
        1:   61:CoordinateValue CoordinateValue::operator-(const CoordinateValue &d) const {
        1:   62:    return {getX() - d.getX(), getY() - d.getY()};
        1:   62-block  0
        -:   63:}
        2:   64:CoordinateValue CoordinateValue::operator*(double scale) const {
        2:   65:    return { getX() * scale, getY() * scale};
        2:   65-block  0
        -:   66:}
        -:   67:
        2:   68:Resolution Resolution::operator*(double scale) const {
        2:   69:    return (scale >= 0) ? Resolution(static_cast<unsigned int>(getX() * scale), static_cast<unsigned int>(getY() * scale)) : Resolution(0,0);
        2:   69-block  0
        1:   69-block  1
        1:   69-block  2
        -:   70:}
        -:   71:
        1:   72:std::ostream &operator<<(std::ostream &os, const Resolution & res) {
        1:   73:    return os << res.toString();
        1:   73-block  0
        1:   73-block  1
        1:   73-block  2
    $$$$$:   73-block  3
        -:   74:}
        1:   75:std::ostream &operator<<(std::ostream &os, const CoordinateValue & cv) {
        1:   76:    return os << cv.toString();
        1:   76-block  0
        1:   76-block  1
        1:   76-block  2
    $$$$$:   76-block  3
        -:   77:}

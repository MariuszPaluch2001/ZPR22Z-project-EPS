        -:    0:Source:/usr/include/c++/11/bits/move.h
        -:    0:Graph:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/AlgorithmTest.dir/AlgorithmTest.cc.gcno
        -:    0:Data:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/AlgorithmTest.dir/AlgorithmTest.cc.gcda
        -:    0:Runs:1
        -:    1:// Move, forward and identity for C++11 + swap -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2007-2021 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/move.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{utility}
        -:   28: */
        -:   29:
        -:   30:#ifndef _MOVE_H
        -:   31:#define _MOVE_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#if __cplusplus < 201103L
        -:   35:# include <bits/concept_check.h>
        -:   36:#endif
        -:   37:
        -:   38:namespace std _GLIBCXX_VISIBILITY(default)
        -:   39:{
        -:   40:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   41:
        -:   42:  // Used, in C++03 mode too, by allocators, etc.
        -:   43:  /**
        -:   44:   *  @brief Same as C++11 std::addressof
        -:   45:   *  @ingroup utilities
        -:   46:   */
        -:   47:  template<typename _Tp>
        -:   48:    inline _GLIBCXX_CONSTEXPR _Tp*
      377:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
      377:   50:    { return __builtin_addressof(__r); }
------------------
_ZSt11__addressofINSt8__detail9__variant15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEPT_RS6_:
       26:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
       26:   50:    { return __builtin_addressof(__r); }
       26:   50-block  0
------------------
_ZSt11__addressofINSt8__detail9__variant15_Variadic_unionIJ12PointCommand11MoveCommandEEEEPT_RS6_:
       54:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
       54:   50:    { return __builtin_addressof(__r); }
       54:   50-block  0
------------------
_ZSt11__addressofIN9__gnu_cxx16__aligned_membufI16RightLineCommandEEEPT_RS4_:
        4:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        4:   50:    { return __builtin_addressof(__r); }
        4:   50-block  0
------------------
_ZSt11__addressofIN9__gnu_cxx16__aligned_membufI15LeftLineCommandEEEPT_RS4_:
        6:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        6:   50:    { return __builtin_addressof(__r); }
        6:   50-block  0
------------------
_ZSt11__addressofISt7variantIJ15LeftLineCommand16RightLineCommandEEEPT_RS4_:
       46:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
       46:   50:    { return __builtin_addressof(__r); }
       46:   50-block  0
------------------
_ZSt11__addressofIN9__gnu_cxx16__aligned_membufI11MoveCommandEEEPT_RS4_:
        1:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        1:   50:    { return __builtin_addressof(__r); }
        1:   50-block  0
------------------
_ZSt11__addressofIN9__gnu_cxx16__aligned_membufI12PointCommandEEEPT_RS4_:
       22:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
       22:   50:    { return __builtin_addressof(__r); }
       22:   50-block  0
------------------
_ZSt11__addressofISt7variantIJ12PointCommand11MoveCommandEEEPT_RS4_:
      102:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
      102:   50:    { return __builtin_addressof(__r); }
      102:   50-block  0
------------------
_ZSt11__addressofI16RightLineCommandEPT_RS1_:
       14:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
       14:   50:    { return __builtin_addressof(__r); }
       14:   50-block  0
------------------
_ZSt11__addressofI15LeftLineCommandEPT_RS1_:
       25:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
       25:   50:    { return __builtin_addressof(__r); }
       25:   50-block  0
------------------
_ZSt11__addressofI11MoveCommandEPT_RS1_:
        2:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        2:   50:    { return __builtin_addressof(__r); }
        2:   50-block  0
------------------
_ZSt11__addressofI12PointCommandEPT_RS1_:
       75:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
       75:   50:    { return __builtin_addressof(__r); }
       75:   50-block  0
------------------
        -:   51:
        -:   52:#if __cplusplus >= 201103L
        -:   53:
        -:   54:_GLIBCXX_END_NAMESPACE_VERSION
        -:   55:} // namespace
        -:   56:
        -:   57:#include <type_traits> // Brings in std::declval too.
        -:   58:
        -:   59:namespace std _GLIBCXX_VISIBILITY(default)
        -:   60:{
        -:   61:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   62:
        -:   63:  /**
        -:   64:   *  @addtogroup utilities
        -:   65:   *  @{
        -:   66:   */
        -:   67:
        -:   68:  /**
        -:   69:   *  @brief  Forward an lvalue.
        -:   70:   *  @return The parameter cast to the specified type.
        -:   71:   *
        -:   72:   *  This function is used to implement "perfect forwarding".
        -:   73:   */
        -:   74:  template<typename _Tp>
        -:   75:    _GLIBCXX_NODISCARD
        -:   76:    constexpr _Tp&&
    4490*:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    4490*:   78:    { return static_cast<_Tp&&>(__t); }
------------------
_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJ16RightLineCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
        5:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        5:   78:    { return static_cast<_Tp&&>(__t); }
        5:   78-block  0
------------------
_ZSt7forwardIR15LeftLineCommandEOT_RNSt16remove_referenceIS2_E4typeE:
       60:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       60:   78:    { return static_cast<_Tp&&>(__t); }
       60:   78-block  0
------------------
_ZSt7forwardIR16RightLineCommandEOT_RNSt16remove_referenceIS2_E4typeE:
       38:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       38:   78:    { return static_cast<_Tp&&>(__t); }
       38:   78-block  0
------------------
_ZSt7forwardIRNL15differenceVisitMUlRKT_RKT0_E_EEOS0_RNSt16remove_referenceIS0_E4typeE:
      165:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      165:   78:    { return static_cast<_Tp&&>(__t); }
      165:   78-block  0
------------------
_ZSt7forwardIRKSt7variantIJ12PointCommand11MoveCommandEEEOT_RNSt16remove_referenceIS6_E4typeE:
      142:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      142:   78:    { return static_cast<_Tp&&>(__t); }
      142:   78-block  0
------------------
_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJ12PointCommand11MoveCommandEEEEOT_RNSt16remove_referenceIS8_E4typeE:
       26:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       26:   78:    { return static_cast<_Tp&&>(__t); }
       26:   78-block  0
------------------
_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJ11MoveCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
_ZSt7forwardIRNL13midpointVisitMUlRKT_RKT0_E_EEOS0_RNSt16remove_referenceIS0_E4typeE:
       20:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       20:   78:    { return static_cast<_Tp&&>(__t); }
       20:   78-block  0
------------------
_ZSt7forwardIRKSt7variantIJ15LeftLineCommand16RightLineCommandEEEOT_RNSt16remove_referenceIS6_E4typeE:
       75:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       75:   78:    { return static_cast<_Tp&&>(__t); }
       75:   78-block  0
------------------
_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEOT_RNSt16remove_referenceIS8_E4typeE:
       13:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       13:   78:    { return static_cast<_Tp&&>(__t); }
       13:   78-block  0
------------------
_ZSt7forwardISt7variantIJ15LeftLineCommand16RightLineCommandEEEOT_RNSt16remove_referenceIS4_E4typeE:
      129:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      129:   78:    { return static_cast<_Tp&&>(__t); }
      129:   78-block  0
------------------
_ZSt7forwardIRKNSt8__detail9__variant15_Copy_ctor_baseILb0EJ12PointCommand11MoveCommandEEEEOT_RNSt16remove_referenceIS8_E4typeE:
        8:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        8:   78:    { return static_cast<_Tp&&>(__t); }
        8:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJ12PointCommand11MoveCommandEEaSERKS5_EUlOT_T0_E_ES9_RNSt16remove_referenceIS8_E4typeE:
       44:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       44:   78:    { return static_cast<_Tp&&>(__t); }
       44:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJ12PointCommand11MoveCommandEEaSERKS5_EUlOT_T0_E_ES9_RNSt16remove_referenceIS8_E4typeE:
       11:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       11:   78:    { return static_cast<_Tp&&>(__t); }
       11:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJ12PointCommand11MoveCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
       11:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       11:   78:    { return static_cast<_Tp&&>(__t); }
       11:   78-block  0
------------------
_ZSt7forwardIRK12PointCommandEOT_RNSt16remove_referenceIS3_E4typeE:
       80:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       80:   78:    { return static_cast<_Tp&&>(__t); }
       80:   78-block  0
------------------
_ZSt7forwardIRK11MoveCommandEOT_RNSt16remove_referenceIS3_E4typeE:
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJ12PointCommand11MoveCommandEEaSEOS5_EUlOT_T0_E_ES8_RNSt16remove_referenceIS7_E4typeE:
        8:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        8:   78:    { return static_cast<_Tp&&>(__t); }
        8:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJ12PointCommand11MoveCommandEEaSEOS5_EUlOT_T0_E_ES8_RNSt16remove_referenceIS7_E4typeE:
        2:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   78:    { return static_cast<_Tp&&>(__t); }
        2:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJ12PointCommand11MoveCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
        2:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   78:    { return static_cast<_Tp&&>(__t); }
        2:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
       54:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       54:   78:    { return static_cast<_Tp&&>(__t); }
       54:   78-block  0
------------------
_ZSt7forwardI12PointCommandEOT_RNSt16remove_referenceIS1_E4typeE:
      210:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      210:   78:    { return static_cast<_Tp&&>(__t); }
      210:   78-block  0
------------------
_ZSt7forwardI11MoveCommandEOT_RNSt16remove_referenceIS1_E4typeE:
        9:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        9:   78:    { return static_cast<_Tp&&>(__t); }
        9:   78-block  0
------------------
_ZSt7forwardI15LeftLineCommandEOT_RNSt16remove_referenceIS1_E4typeE:
       60:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       60:   78:    { return static_cast<_Tp&&>(__t); }
       60:   78-block  0
------------------
_ZSt7forwardI16RightLineCommandEOT_RNSt16remove_referenceIS1_E4typeE:
       42:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       42:   78:    { return static_cast<_Tp&&>(__t); }
       42:   78-block  0
------------------
_ZSt7forwardIRNL16extractMovePointMUlRKT_E_EEOS0_RNSt16remove_referenceIS0_E4typeE:
      110:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      110:   78:    { return static_cast<_Tp&&>(__t); }
      110:   78-block  0
------------------
_ZSt7forwardIRSt7variantIJ12PointCommand11MoveCommandEEEOT_RNSt16remove_referenceIS5_E4typeE:
      672:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      672:   78:    { return static_cast<_Tp&&>(__t); }
      672:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ12PointCommand11MoveCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
      190:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      190:   78:    { return static_cast<_Tp&&>(__t); }
      190:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ11MoveCommandEEEEOT_RNSt16remove_referenceIS6_E4typeE:
        4:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        4:   78:    { return static_cast<_Tp&&>(__t); }
        4:   78-block  0
------------------
_ZSt7forwardIRSt7variantIJ15LeftLineCommand16RightLineCommandEEEOT_RNSt16remove_referenceIS5_E4typeE:
      171:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      171:   78:    { return static_cast<_Tp&&>(__t); }
      171:   78-block  0
------------------
_ZSt7forwardIRKNSt8__detail9__variant15_Copy_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEEEOT_RNSt16remove_referenceIS8_E4typeE:
        5:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        5:   78:    { return static_cast<_Tp&&>(__t); }
        5:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ16RightLineCommandEEEEOT_RNSt16remove_referenceIS6_E4typeE:
       21:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       21:   78:    { return static_cast<_Tp&&>(__t); }
       21:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ12PointCommand11MoveCommandEE8_M_resetEvEUlOT_E_ES7_RNSt16remove_referenceIS6_E4typeE:
       77:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       77:   78:    { return static_cast<_Tp&&>(__t); }
       77:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ12PointCommand11MoveCommandEE8_M_resetEvEUlOT_E_ES7_RNSt16remove_referenceIS6_E4typeE:
      231:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      231:   78:    { return static_cast<_Tp&&>(__t); }
      231:   78-block  0
------------------
_ZSt7forwardISt7variantIJ12PointCommand11MoveCommandEEEOT_RNSt16remove_referenceIS4_E4typeE:
      312:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      312:   78:    { return static_cast<_Tp&&>(__t); }
      312:   78-block  0
------------------
_ZSt7forwardIRZNKL12rescaleVisitMUldE_clEdEUlRT_E_EOS1_RNSt16remove_referenceIS1_E4typeE:
       50:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       50:   78:    { return static_cast<_Tp&&>(__t); }
       50:   78-block  0
------------------
_ZSt7forwardIR12PointCommandEOT_RNSt16remove_referenceIS2_E4typeE:
      330:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      330:   78:    { return static_cast<_Tp&&>(__t); }
      330:   78-block  0
------------------
_ZSt7forwardIR11MoveCommandEOT_RNSt16remove_referenceIS2_E4typeE:
        8:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        8:   78:    { return static_cast<_Tp&&>(__t); }
        8:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEE8_M_resetEvEUlOT_E_ES7_RNSt16remove_referenceIS6_E4typeE:
       36:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       36:   78:    { return static_cast<_Tp&&>(__t); }
       36:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEE8_M_resetEvEUlOT_E_ES7_RNSt16remove_referenceIS6_E4typeE:
      108:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      108:   78:    { return static_cast<_Tp&&>(__t); }
      108:   78-block  0
------------------
_ZSt7forwardIO12PointCommandEOT_RNSt16remove_referenceIS2_E4typeE:
       90:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       90:   78:    { return static_cast<_Tp&&>(__t); }
       90:   78-block  0
------------------
_ZSt7forwardIZNSt7variantIJ12PointCommand11MoveCommandEE4swapERS3_EUlOT_T0_E_ES6_RNSt16remove_referenceIS5_E4typeE:
       32:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       32:   78:    { return static_cast<_Tp&&>(__t); }
       32:   78-block  0
------------------
_ZSt7forwardIOZNSt7variantIJ12PointCommand11MoveCommandEE4swapERS3_EUlOT_T0_E_ES6_RNSt16remove_referenceIS5_E4typeE:
        8:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        8:   78:    { return static_cast<_Tp&&>(__t); }
        8:   78-block  0
------------------
_ZSt7forwardINSt8__detail9__variant15_Move_ctor_baseILb0EJ12PointCommand11MoveCommandEEEEOT_RNSt16remove_referenceIS6_E4typeE:
       46:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       46:   78:    { return static_cast<_Tp&&>(__t); }
       46:   78-block  0
------------------
_ZSt7forwardINSt8__detail9__variant15_Move_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEEEOT_RNSt16remove_referenceIS6_E4typeE:
       19:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       19:   78:    { return static_cast<_Tp&&>(__t); }
       19:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJ12PointCommand11MoveCommandERNS1_15_Move_ctor_baseILb0EJS3_S4_EEES6_EEvOT0_OT1_EUlOT_E_ESD_RNSt16remove_referenceISC_E4typeE:
      184:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      184:   78:    { return static_cast<_Tp&&>(__t); }
      184:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJ12PointCommand11MoveCommandERNS1_15_Move_ctor_baseILb0EJS3_S4_EEES6_EEvOT0_OT1_EUlOT_E_ESD_RNSt16remove_referenceISC_E4typeE:
       46:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       46:   78:    { return static_cast<_Tp&&>(__t); }
       46:   78-block  0
------------------
_ZSt7forwardIOSt7variantIJ12PointCommand11MoveCommandEEEOT_RNSt16remove_referenceIS5_E4typeE:
       46:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       46:   78:    { return static_cast<_Tp&&>(__t); }
       46:   78-block  0
------------------
_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJ12PointCommand11MoveCommandEEEEOT_RNSt16remove_referenceIS6_E4typeE:
       46:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       46:   78:    { return static_cast<_Tp&&>(__t); }
       46:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant15_Move_ctor_baseILb0EJ12PointCommand11MoveCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
       46:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       46:   78:    { return static_cast<_Tp&&>(__t); }
       46:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
        5:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        5:   78:    { return static_cast<_Tp&&>(__t); }
        5:   78-block  0
------------------
_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJ11MoveCommandEEEEOT_RNSt16remove_referenceIS5_E4typeE:
        1:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        1:   78:    { return static_cast<_Tp&&>(__t); }
        1:   78-block  0
------------------
_ZSt7forwardIO11MoveCommandEOT_RNSt16remove_referenceIS2_E4typeE:
        2:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   78:    { return static_cast<_Tp&&>(__t); }
        2:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS1_15_Move_ctor_baseILb0EJS3_S4_EEES6_EEvOT0_OT1_EUlOT_E_ESD_RNSt16remove_referenceISC_E4typeE:
       76:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       76:   78:    { return static_cast<_Tp&&>(__t); }
       76:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS1_15_Move_ctor_baseILb0EJS3_S4_EEES6_EEvOT0_OT1_EUlOT_E_ESD_RNSt16remove_referenceISC_E4typeE:
       19:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       19:   78:    { return static_cast<_Tp&&>(__t); }
       19:   78-block  0
------------------
_ZSt7forwardIOSt7variantIJ15LeftLineCommand16RightLineCommandEEEOT_RNSt16remove_referenceIS5_E4typeE:
       19:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       19:   78:    { return static_cast<_Tp&&>(__t); }
       19:   78-block  0
------------------
_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEOT_RNSt16remove_referenceIS6_E4typeE:
       19:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       19:   78:    { return static_cast<_Tp&&>(__t); }
       19:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant15_Move_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
       19:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       19:   78:    { return static_cast<_Tp&&>(__t); }
       19:   78-block  0
------------------
_ZSt7forwardIO15LeftLineCommandEOT_RNSt16remove_referenceIS2_E4typeE:
       24:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       24:   78:    { return static_cast<_Tp&&>(__t); }
       24:   78-block  0
------------------
_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJ16RightLineCommandEEEEOT_RNSt16remove_referenceIS5_E4typeE:
        7:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        7:   78:    { return static_cast<_Tp&&>(__t); }
        7:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJ12PointCommand11MoveCommandERNS1_15_Copy_ctor_baseILb0EJS3_S4_EEERKS6_EEvOT0_OT1_EUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE:
        8:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        8:   78:    { return static_cast<_Tp&&>(__t); }
        8:   78-block  0
------------------
_ZSt7forwardIRK15LeftLineCommandEOT_RNSt16remove_referenceIS3_E4typeE:
       25:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       25:   78:    { return static_cast<_Tp&&>(__t); }
       25:   78-block  0
------------------
_ZSt7forwardIRK16RightLineCommandEOT_RNSt16remove_referenceIS3_E4typeE:
       13:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       13:   78:    { return static_cast<_Tp&&>(__t); }
       13:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS5_EUlOT_T0_E_ES8_RNSt16remove_referenceIS7_E4typeE:
        8:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        8:   78:    { return static_cast<_Tp&&>(__t); }
        8:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS5_EUlOT_T0_E_ES8_RNSt16remove_referenceIS7_E4typeE:
        2:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   78:    { return static_cast<_Tp&&>(__t); }
        2:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
        2:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   78:    { return static_cast<_Tp&&>(__t); }
        2:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSERKS5_EUlOT_T0_E_ES9_RNSt16remove_referenceIS8_E4typeE:
        8:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        8:   78:    { return static_cast<_Tp&&>(__t); }
        8:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSERKS5_EUlOT_T0_E_ES9_RNSt16remove_referenceIS8_E4typeE:
        2:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   78:    { return static_cast<_Tp&&>(__t); }
        2:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJ12PointCommand11MoveCommandERNS1_15_Copy_ctor_baseILb0EJS3_S4_EEERKS6_EEvOT0_OT1_EUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE:
       32:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       32:   78:    { return static_cast<_Tp&&>(__t); }
       32:   78-block  0
------------------
_ZSt7forwardIO16RightLineCommandEOT_RNSt16remove_referenceIS2_E4typeE:
       14:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       14:   78:    { return static_cast<_Tp&&>(__t); }
       14:   78-block  0
------------------
_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJ12PointCommand11MoveCommandEEEEOT_RNSt16remove_referenceIS7_E4typeE:
        8:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        8:   78:    { return static_cast<_Tp&&>(__t); }
        8:   78-block  0
------------------
_ZSt7forwardIONSt8__detail9__variant16__variant_cookieEEOT_RNSt16remove_referenceIS4_E4typeE:
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
_ZSt7forwardISt17integral_constantImLm0EEEOT_RNSt16remove_referenceIS2_E4typeE:
       46:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       46:   78:    { return static_cast<_Tp&&>(__t); }
       46:   78-block  0
------------------
_ZSt7forwardINSt8__detail9__variant16__variant_cookieEEOT_RNSt16remove_referenceIS3_E4typeE:
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
_ZSt7forwardISt17integral_constantImLm18446744073709551615EEEOT_RNSt16remove_referenceIS2_E4typeE:
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
_ZSt7forwardISt17integral_constantImLm1EEEOT_RNSt16remove_referenceIS2_E4typeE:
        4:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        4:   78:    { return static_cast<_Tp&&>(__t); }
        4:   78-block  0
------------------
_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS1_15_Copy_ctor_baseILb0EJS3_S4_EEERKS6_EEvOT0_OT1_EUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE:
       20:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       20:   78:    { return static_cast<_Tp&&>(__t); }
       20:   78-block  0
------------------
_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS1_15_Copy_ctor_baseILb0EJS3_S4_EEERKS6_EEvOT0_OT1_EUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE:
        5:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        5:   78:    { return static_cast<_Tp&&>(__t); }
        5:   78-block  0
------------------
        -:   79:
        -:   80:  /**
        -:   81:   *  @brief  Forward an rvalue.
        -:   82:   *  @return The parameter cast to the specified type.
        -:   83:   *
        -:   84:   *  This function is used to implement "perfect forwarding".
        -:   85:   */
        -:   86:  template<typename _Tp>
        -:   87:    _GLIBCXX_NODISCARD
        -:   88:    constexpr _Tp&&
        -:   89:    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
        -:   90:    {
        -:   91:      static_assert(!std::is_lvalue_reference<_Tp>::value,
        -:   92:	  "std::forward must not be used to convert an rvalue to an lvalue");
        -:   93:      return static_cast<_Tp&&>(__t);
        -:   94:    }
        -:   95:
        -:   96:  /**
        -:   97:   *  @brief  Convert a value to an rvalue.
        -:   98:   *  @param  __t  A thing of arbitrary type.
        -:   99:   *  @return The parameter cast to an rvalue-reference to allow moving it.
        -:  100:  */
        -:  101:  template<typename _Tp>
        -:  102:    _GLIBCXX_NODISCARD
        -:  103:    constexpr typename std::remove_reference<_Tp>::type&&
     319*:  104:    move(_Tp&& __t) noexcept
     319*:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
_ZSt4moveIRNSt12_Vector_baseISt7variantIJ15LeftLineCommand16RightLineCommandEESaIS4_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOSA_:
        2:  104:    move(_Tp&& __t) noexcept
        2:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        2:  105-block  0
------------------
_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_:
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
_ZSt4moveIRPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_:
       64:  104:    move(_Tp&& __t) noexcept
       64:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       64:  105-block  0
------------------
_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_:
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
_ZSt4moveIRSt7variantIJ12PointCommand11MoveCommandEEEONSt16remove_referenceIT_E4typeEOS6_:
       46:  104:    move(_Tp&& __t) noexcept
       46:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       46:  105-block  0
------------------
_ZSt4moveIRSt7variantIJ15LeftLineCommand16RightLineCommandEEEONSt16remove_referenceIT_E4typeEOS6_:
       19:  104:    move(_Tp&& __t) noexcept
       19:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       19:  105-block  0
------------------
_ZSt4moveIRSt6vectorISt7variantIJ12PointCommand11MoveCommandEESaIS4_EEEONSt16remove_referenceIT_E4typeEOS9_:
        3:  104:    move(_Tp&& __t) noexcept
        3:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        3:  105-block  0
------------------
_ZSt4moveIRSt6vectorISt7variantIJ15LeftLineCommand16RightLineCommandEESaIS4_EEEONSt16remove_referenceIT_E4typeEOS9_:
        3:  104:    move(_Tp&& __t) noexcept
        3:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        3:  105-block  0
------------------
_ZSt4moveIRNSt12_Vector_baseISt7variantIJ12PointCommand11MoveCommandEESaIS4_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOSA_:
        2:  104:    move(_Tp&& __t) noexcept
        2:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        2:  105-block  0
------------------
_ZSt4moveIRNSt8__detail9__variant15_Move_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEEEONSt16remove_referenceIT_E4typeEOS8_:
       19:  104:    move(_Tp&& __t) noexcept
       19:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       19:  105-block  0
------------------
_ZSt4moveIRZNK9Algorithm9sortBatchISt6vectorISt7variantIJ12PointCommand11MoveCommandEESaIS6_EEEEvRT_EUlSA_RT0_E_EONSt16remove_referenceIS9_E4typeEOS9_:
       16:  104:    move(_Tp&& __t) noexcept
       16:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       16:  105-block  0
------------------
_ZSt4moveIR12PointCommandEONSt16remove_referenceIT_E4typeEOS3_:
       71:  104:    move(_Tp&& __t) noexcept
       71:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       71:  105-block  0
------------------
_ZSt4moveIR11MoveCommandEONSt16remove_referenceIT_E4typeEOS3_:
        1:  104:    move(_Tp&& __t) noexcept
        1:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        1:  105-block  0
------------------
_ZSt4moveIRSaISt7variantIJ12PointCommand11MoveCommandEEEEONSt16remove_referenceIT_E4typeEOS7_:
        3:  104:    move(_Tp&& __t) noexcept
        3:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        3:  105-block  0
------------------
_ZSt4moveIR15LeftLineCommandEONSt16remove_referenceIT_E4typeEOS3_:
       13:  104:    move(_Tp&& __t) noexcept
       13:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       13:  105-block  0
------------------
_ZSt4moveIR16RightLineCommandEONSt16remove_referenceIT_E4typeEOS3_:
        8:  104:    move(_Tp&& __t) noexcept
        8:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        8:  105-block  0
------------------
_ZSt4moveIRSaISt7variantIJ15LeftLineCommand16RightLineCommandEEEEONSt16remove_referenceIT_E4typeEOS7_:
        3:  104:    move(_Tp&& __t) noexcept
        3:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        3:  105-block  0
------------------
_ZSt4moveIRNSt8__detail9__variant15_Move_ctor_baseILb0EJ12PointCommand11MoveCommandEEEEONSt16remove_referenceIT_E4typeEOS8_:
       46:  104:    move(_Tp&& __t) noexcept
       46:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       46:  105-block  0
------------------
        -:  106:
        -:  107:
        -:  108:  template<typename _Tp>
        -:  109:    struct __move_if_noexcept_cond
        -:  110:    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        -:  111:                    is_copy_constructible<_Tp>>::type { };
        -:  112:
        -:  113:  /**
        -:  114:   *  @brief  Conditionally convert a value to an rvalue.
        -:  115:   *  @param  __x  A thing of arbitrary type.
        -:  116:   *  @return The parameter, possibly cast to an rvalue-reference.
        -:  117:   *
        -:  118:   *  Same as std::move unless the type's move constructor could throw and the
        -:  119:   *  type is copyable, in which case an lvalue-reference is returned instead.
        -:  120:   */
        -:  121:  template<typename _Tp>
        -:  122:    _GLIBCXX_NODISCARD
        -:  123:    constexpr typename
        -:  124:    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
        -:  125:    move_if_noexcept(_Tp& __x) noexcept
        -:  126:    { return std::move(__x); }
        -:  127:
        -:  128:  // declval, from type_traits.
        -:  129:
        -:  130:#if __cplusplus > 201402L
        -:  131:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  132:  // 2296. std::addressof should be constexpr
        -:  133:# define __cpp_lib_addressof_constexpr 201603
        -:  134:#endif
        -:  135:  /**
        -:  136:   *  @brief Returns the actual address of the object or function
        -:  137:   *         referenced by r, even in the presence of an overloaded
        -:  138:   *         operator&.
        -:  139:   *  @param  __r  Reference to an object or function.
        -:  140:   *  @return   The actual address.
        -:  141:  */
        -:  142:  template<typename _Tp>
        -:  143:    _GLIBCXX_NODISCARD
        -:  144:    inline _GLIBCXX17_CONSTEXPR _Tp*
     116*:  145:    addressof(_Tp& __r) noexcept
     116*:  146:    { return std::__addressof(__r); }
------------------
_ZSt9addressofI11MoveCommandEPT_RS1_:
    #####:  145:    addressof(_Tp& __r) noexcept
    #####:  146:    { return std::__addressof(__r); }
    %%%%%:  146-block  0
------------------
_ZSt9addressofI12PointCommandEPT_RS1_:
    #####:  145:    addressof(_Tp& __r) noexcept
    #####:  146:    { return std::__addressof(__r); }
    %%%%%:  146-block  0
------------------
_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEPT_RS6_:
       26:  145:    addressof(_Tp& __r) noexcept
       26:  146:    { return std::__addressof(__r); }
       26:  146-block  0
------------------
_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJ12PointCommand11MoveCommandEEEEPT_RS6_:
       54:  145:    addressof(_Tp& __r) noexcept
       54:  146:    { return std::__addressof(__r); }
       54:  146-block  0
------------------
_ZSt9addressofIN9__gnu_cxx16__aligned_membufI16RightLineCommandEEEPT_RS4_:
        4:  145:    addressof(_Tp& __r) noexcept
        4:  146:    { return std::__addressof(__r); }
        4:  146-block  0
------------------
_ZSt9addressofIN9__gnu_cxx16__aligned_membufI15LeftLineCommandEEEPT_RS4_:
        6:  145:    addressof(_Tp& __r) noexcept
        6:  146:    { return std::__addressof(__r); }
        6:  146-block  0
------------------
_ZSt9addressofIN9__gnu_cxx16__aligned_membufI11MoveCommandEEEPT_RS4_:
        1:  145:    addressof(_Tp& __r) noexcept
        1:  146:    { return std::__addressof(__r); }
        1:  146-block  0
------------------
_ZSt9addressofIN9__gnu_cxx16__aligned_membufI12PointCommandEEEPT_RS4_:
       22:  145:    addressof(_Tp& __r) noexcept
       22:  146:    { return std::__addressof(__r); }
       22:  146-block  0
------------------
_ZSt9addressofI16RightLineCommandEPT_RS1_:
        1:  145:    addressof(_Tp& __r) noexcept
        1:  146:    { return std::__addressof(__r); }
        1:  146-block  0
------------------
_ZSt9addressofI15LeftLineCommandEPT_RS1_:
        2:  145:    addressof(_Tp& __r) noexcept
        2:  146:    { return std::__addressof(__r); }
        2:  146-block  0
------------------
        -:  147:
        -:  148:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  149:  // 2598. addressof works on temporaries
        -:  150:  template<typename _Tp>
        -:  151:    const _Tp* addressof(const _Tp&&) = delete;
        -:  152:
        -:  153:  // C++11 version of std::exchange for internal use.
        -:  154:  template <typename _Tp, typename _Up = _Tp>
        -:  155:    _GLIBCXX20_CONSTEXPR
        -:  156:    inline _Tp
        -:  157:    __exchange(_Tp& __obj, _Up&& __new_val)
        -:  158:    {
        -:  159:      _Tp __old_val = std::move(__obj);
        -:  160:      __obj = std::forward<_Up>(__new_val);
        -:  161:      return __old_val;
        -:  162:    }
        -:  163:
        -:  164:  /// @} group utilities
        -:  165:
        -:  166:#define _GLIBCXX_FWDREF(_Tp) _Tp&&
        -:  167:#define _GLIBCXX_MOVE(__val) std::move(__val)
        -:  168:#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
        -:  169:#else
        -:  170:#define _GLIBCXX_FWDREF(_Tp) const _Tp&
        -:  171:#define _GLIBCXX_MOVE(__val) (__val)
        -:  172:#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
        -:  173:#endif
        -:  174:
        -:  175:  /**
        -:  176:   *  @addtogroup utilities
        -:  177:   *  @{
        -:  178:   */
        -:  179:
        -:  180:  /**
        -:  181:   *  @brief Swaps two values.
        -:  182:   *  @param  __a  A thing of arbitrary type.
        -:  183:   *  @param  __b  Another thing of arbitrary type.
        -:  184:   *  @return   Nothing.
        -:  185:  */
        -:  186:  template<typename _Tp>
        -:  187:    _GLIBCXX20_CONSTEXPR
        -:  188:    inline
        -:  189:#if __cplusplus >= 201103L
        -:  190:    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
        -:  191:			      is_move_constructible<_Tp>,
        -:  192:			      is_move_assignable<_Tp>>::value>::type
        -:  193:#else
        -:  194:    void
        -:  195:#endif
       8*:  196:    swap(_Tp& __a, _Tp& __b)
        -:  197:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  198:				is_nothrow_move_assignable<_Tp>>::value)
        -:  199:    {
        -:  200:#if __cplusplus < 201103L
        -:  201:      // concept requirements
        -:  202:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  203:#endif
       8*:  204:      _Tp __tmp = _GLIBCXX_MOVE(__a);
       8*:  205:      __a = _GLIBCXX_MOVE(__b);
       8*:  206:      __b = _GLIBCXX_MOVE(__tmp);
       8*:  207:    }
------------------
_ZSt4swapI11MoveCommandENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_:
    #####:  196:    swap(_Tp& __a, _Tp& __b)
        -:  197:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  198:				is_nothrow_move_assignable<_Tp>>::value)
        -:  199:    {
        -:  200:#if __cplusplus < 201103L
        -:  201:      // concept requirements
        -:  202:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  203:#endif
    #####:  204:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    %%%%%:  204-block  0
    #####:  205:      __a = _GLIBCXX_MOVE(__b);
    #####:  206:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  207:    }
------------------
_ZSt4swapI12PointCommandENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_:
        8:  196:    swap(_Tp& __a, _Tp& __b)
        -:  197:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  198:				is_nothrow_move_assignable<_Tp>>::value)
        -:  199:    {
        -:  200:#if __cplusplus < 201103L
        -:  201:      // concept requirements
        -:  202:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  203:#endif
        8:  204:      _Tp __tmp = _GLIBCXX_MOVE(__a);
        8:  204-block  0
        8:  205:      __a = _GLIBCXX_MOVE(__b);
        8:  206:      __b = _GLIBCXX_MOVE(__tmp);
        8:  207:    }
------------------
        -:  208:
        -:  209:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  210:  // DR 809. std::swap should be overloaded for array types.
        -:  211:  /// Swap the contents of two arrays.
        -:  212:  template<typename _Tp, size_t _Nm>
        -:  213:    _GLIBCXX20_CONSTEXPR
        -:  214:    inline
        -:  215:#if __cplusplus >= 201103L
        -:  216:    typename enable_if<__is_swappable<_Tp>::value>::type
        -:  217:#else
        -:  218:    void
        -:  219:#endif
        -:  220:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  221:    _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Tp>::value)
        -:  222:    {
        -:  223:      for (size_t __n = 0; __n < _Nm; ++__n)
        -:  224:	swap(__a[__n], __b[__n]);
        -:  225:    }
        -:  226:
        -:  227:  /// @} group utilities
        -:  228:_GLIBCXX_END_NAMESPACE_VERSION
        -:  229:} // namespace
        -:  230:
        -:  231:#endif /* _MOVE_H */

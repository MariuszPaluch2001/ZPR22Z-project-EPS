        -:    0:Source:/home/kacper/Pulpit/zpr_eps/tests/EPSFileToolsTest.cc
        -:    0:Graph:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/EPSFileToolsTest.dir/EPSFileToolsTest.cc.gcno
        -:    0:Data:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/EPSFileToolsTest.dir/EPSFileToolsTest.cc.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by mariusz on 06.11.22.
        -:    3://
        -:    4:#include <gtest/gtest.h>
        -:    5:#include <sstream>
        -:    6:
        -:    7:#include "EPSFileTools.hpp"
        -:    8:#include "GraphicCommands.h"
        -:    9:
        4:   10:TEST(EPSFileToolsTest, ThrowExceptionGetHeaderTest) {
        -:   11:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:   12:                     "%%Pages: (atend)\n"
        -:   13:                     "%%BoundingBox: 0 0 302 302\n"
        1:   14:                     "%%EndComments\n";
        -:   15:
        1:   16:  std::istringstream iss(data);
        1:   17:  EPSInFile EPSFs(iss);
        1:   18:  EPSFs.getHeader();
       1*:   19:  ASSERT_ANY_THROW(EPSFs.getHeader());
        1:   20:}
------------------
_ZN49EPSFileToolsTest_ThrowExceptionGetHeaderTest_TestC2Ev:
        1:   10:TEST(EPSFileToolsTest, ThrowExceptionGetHeaderTest) {
        1:   10-block  0
------------------
_ZN49EPSFileToolsTest_ThrowExceptionGetHeaderTest_TestD0Ev:
        1:   10:TEST(EPSFileToolsTest, ThrowExceptionGetHeaderTest) {
        1:   10-block  0
------------------
_ZN49EPSFileToolsTest_ThrowExceptionGetHeaderTest_TestD2Ev:
        1:   10:TEST(EPSFileToolsTest, ThrowExceptionGetHeaderTest) {
        1:   10-block  0
------------------
_ZN49EPSFileToolsTest_ThrowExceptionGetHeaderTest_Test8TestBodyEv:
        1:   10:TEST(EPSFileToolsTest, ThrowExceptionGetHeaderTest) {
        -:   11:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:   12:                     "%%Pages: (atend)\n"
        -:   13:                     "%%BoundingBox: 0 0 302 302\n"
        1:   14:                     "%%EndComments\n";
        1:   14-block  0
    $$$$$:   14-block  1
        -:   15:
        1:   16:  std::istringstream iss(data);
        1:   17:  EPSInFile EPSFs(iss);
        1:   17-block  0
        1:   18:  EPSFs.getHeader();
        1:   18-block  0
       1*:   19:  ASSERT_ANY_THROW(EPSFs.getHeader());
        1:   19-block  0
        1:   19-block  1
        1:   19-block  2
        1:   19-block  3
    %%%%%:   19-block  4
        1:   19-block  5
    %%%%%:   19-block  6
    %%%%%:   19-block  7
    %%%%%:   19-block  8
    %%%%%:   19-block  9
    %%%%%:   19-block 10
        1:   19-block 11
        1:   19-block 12
    $$$$$:   19-block 13
    $$$$$:   19-block 14
    $$$$$:   19-block 15
    $$$$$:   19-block 16
        1:   20:}
        1:   20-block  0
        1:   20-block  1
        1:   20-block  2
        1:   20-block  3
    $$$$$:   20-block  4
    $$$$$:   20-block  5
------------------
        -:   21:
        4:   22:TEST(EPSFileToolsTest, ThrowExceptionWhenHeaderDoesntHaveEndTag) {
        -:   23:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:   24:                     "%%Pages: (atend)\n"
        1:   25:                     "%%BoundingBox: 0 0 302 302\n";
        -:   26:
        1:   27:  std::istringstream iss(data);
        1:   28:  EPSInFile EPSFs(iss);
       1*:   29:  ASSERT_ANY_THROW(EPSFs.getHeader());
        1:   30:}
------------------
_ZN62EPSFileToolsTest_ThrowExceptionWhenHeaderDoesntHaveEndTag_TestC2Ev:
        1:   22:TEST(EPSFileToolsTest, ThrowExceptionWhenHeaderDoesntHaveEndTag) {
        1:   22-block  0
------------------
_ZN62EPSFileToolsTest_ThrowExceptionWhenHeaderDoesntHaveEndTag_TestD0Ev:
        1:   22:TEST(EPSFileToolsTest, ThrowExceptionWhenHeaderDoesntHaveEndTag) {
        1:   22-block  0
------------------
_ZN62EPSFileToolsTest_ThrowExceptionWhenHeaderDoesntHaveEndTag_TestD2Ev:
        1:   22:TEST(EPSFileToolsTest, ThrowExceptionWhenHeaderDoesntHaveEndTag) {
        1:   22-block  0
------------------
_ZN62EPSFileToolsTest_ThrowExceptionWhenHeaderDoesntHaveEndTag_Test8TestBodyEv:
        1:   22:TEST(EPSFileToolsTest, ThrowExceptionWhenHeaderDoesntHaveEndTag) {
        -:   23:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:   24:                     "%%Pages: (atend)\n"
        1:   25:                     "%%BoundingBox: 0 0 302 302\n";
        1:   25-block  0
    $$$$$:   25-block  1
        -:   26:
        1:   27:  std::istringstream iss(data);
        1:   28:  EPSInFile EPSFs(iss);
        1:   28-block  0
       1*:   29:  ASSERT_ANY_THROW(EPSFs.getHeader());
        1:   29-block  0
        1:   29-block  1
        1:   29-block  2
        1:   29-block  3
    %%%%%:   29-block  4
        1:   29-block  5
    %%%%%:   29-block  6
    %%%%%:   29-block  7
    %%%%%:   29-block  8
    %%%%%:   29-block  9
    %%%%%:   29-block 10
        1:   29-block 11
        1:   29-block 12
    $$$$$:   29-block 13
    $$$$$:   29-block 14
    $$$$$:   29-block 15
    $$$$$:   29-block 16
        1:   30:}
        1:   30-block  0
        1:   30-block  1
        1:   30-block  2
        1:   30-block  3
    $$$$$:   30-block  4
    $$$$$:   30-block  5
------------------
        -:   31:
        4:   32:TEST(EPSFileToolsTest, TestReadingHeaderFromFile) {
        -:   33:  std::string data = "%!PS-Adobe-3.0\n"
        -:   34:                     "%%BoundingBox: 0 0 302 302\n"
        -:   35:                     "%%EndComments\n"
        1:   36:                     "67.47 72.08 m\n";
        -:   37:
        1:   38:  std::istringstream iss(data);
        1:   39:  EPSInFile EPSFs(iss);
        1:   40:  Header h = EPSFs.getHeader();
       2*:   41:  ASSERT_EQ(h.getHeaderString(),
        1:   42:            "%!PS-Adobe-3.0\n%%BoundingBox: 0 0 302 302\n%%EndComments\n");
        1:   43:}
------------------
_ZN47EPSFileToolsTest_TestReadingHeaderFromFile_TestC2Ev:
        1:   32:TEST(EPSFileToolsTest, TestReadingHeaderFromFile) {
        1:   32-block  0
------------------
_ZN47EPSFileToolsTest_TestReadingHeaderFromFile_TestD0Ev:
        1:   32:TEST(EPSFileToolsTest, TestReadingHeaderFromFile) {
        1:   32-block  0
------------------
_ZN47EPSFileToolsTest_TestReadingHeaderFromFile_TestD2Ev:
        1:   32:TEST(EPSFileToolsTest, TestReadingHeaderFromFile) {
        1:   32-block  0
------------------
_ZN47EPSFileToolsTest_TestReadingHeaderFromFile_Test8TestBodyEv:
        1:   32:TEST(EPSFileToolsTest, TestReadingHeaderFromFile) {
        -:   33:  std::string data = "%!PS-Adobe-3.0\n"
        -:   34:                     "%%BoundingBox: 0 0 302 302\n"
        -:   35:                     "%%EndComments\n"
        1:   36:                     "67.47 72.08 m\n";
        1:   36-block  0
    $$$$$:   36-block  1
        -:   37:
        1:   38:  std::istringstream iss(data);
        1:   39:  EPSInFile EPSFs(iss);
        1:   39-block  0
        1:   40:  Header h = EPSFs.getHeader();
       2*:   41:  ASSERT_EQ(h.getHeaderString(),
        1:   41-block  0
        1:   41-block  1
    %%%%%:   41-block  2
    %%%%%:   41-block  3
    %%%%%:   41-block  4
    %%%%%:   41-block  5
    $$$$$:   41-block  6
    $$$$$:   41-block  7
    $$$$$:   41-block  8
    $$$$$:   41-block  9
    $$$$$:   41-block 10
        1:   42:            "%!PS-Adobe-3.0\n%%BoundingBox: 0 0 302 302\n%%EndComments\n");
        1:   42-block  0
        1:   42-block  1
    $$$$$:   42-block  2
        1:   43:}
        1:   43-block  0
        1:   43-block  1
        1:   43-block  2
        1:   43-block  3
        1:   43-block  4
        1:   43-block  5
    $$$$$:   43-block  6
    $$$$$:   43-block  7
    $$$$$:   43-block  8
------------------
        -:   44:
        4:   45:TEST(EPSFileToolsTest, TestThrowingExceptionWhenResolutionNotFound) {
       4*:   46:  ASSERT_ANY_THROW(Header h("Test\n%%EndComments\n"));
        -:   47:}
------------------
_ZN65EPSFileToolsTest_TestThrowingExceptionWhenResolutionNotFound_TestC2Ev:
        1:   45:TEST(EPSFileToolsTest, TestThrowingExceptionWhenResolutionNotFound) {
        1:   45-block  0
------------------
_ZN65EPSFileToolsTest_TestThrowingExceptionWhenResolutionNotFound_TestD0Ev:
        1:   45:TEST(EPSFileToolsTest, TestThrowingExceptionWhenResolutionNotFound) {
        1:   45-block  0
------------------
_ZN65EPSFileToolsTest_TestThrowingExceptionWhenResolutionNotFound_TestD2Ev:
        1:   45:TEST(EPSFileToolsTest, TestThrowingExceptionWhenResolutionNotFound) {
        1:   45-block  0
------------------
_ZN65EPSFileToolsTest_TestThrowingExceptionWhenResolutionNotFound_Test8TestBodyEv:
        1:   45:TEST(EPSFileToolsTest, TestThrowingExceptionWhenResolutionNotFound) {
       4*:   46:  ASSERT_ANY_THROW(Header h("Test\n%%EndComments\n"));
        1:   46-block  0
        1:   46-block  1
        1:   46-block  2
        1:   46-block  3
        1:   46-block  4
        1:   46-block  5
    %%%%%:   46-block  6
    %%%%%:   46-block  7
    %%%%%:   46-block  8
    %%%%%:   46-block  9
        1:   46-block 10
        1:   46-block 11
        1:   46-block 12
        1:   46-block 13
    $$$$$:   46-block 14
    $$$$$:   46-block 15
    $$$$$:   46-block 16
        -:   47:}
------------------
        -:   48:
        4:   49:TEST(EPSFileToolsTest, TestResolutionSize) {
        -:   50:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:   51:                     "%%DocumentNeededResources: font Courier\n"
        -:   52:                     "%%+ font Courier-Bold\n"
        -:   53:                     "%%+ font Courier-Oblique\n"
        -:   54:                     "%%+ font Courier-BoldOblique\n"
        -:   55:                     "%%+ font Symbol\n"
        -:   56:                     "%%Title: R Graphics Output\n"
        -:   57:                     "%%Creator: R Software\n"
        -:   58:                     "%%Pages: (atend)\n"
        -:   59:                     "%%BoundingBox: 0 0 302 302\n"
        1:   60:                     "%%EndComments\n";
        -:   61:
        1:   62:  std::istringstream iss(data);
        1:   63:  EPSInFile EPSFs(iss);
        1:   64:  Header h = EPSFs.getHeader();
        1:   65:  Resolution r = h.getResolution();
       1*:   66:  ASSERT_EQ(r.getX(), 302);
       1*:   67:  ASSERT_EQ(r.getY(), 302);
        1:   68:}
------------------
_ZN40EPSFileToolsTest_TestResolutionSize_TestC2Ev:
        1:   49:TEST(EPSFileToolsTest, TestResolutionSize) {
        1:   49-block  0
------------------
_ZN40EPSFileToolsTest_TestResolutionSize_TestD0Ev:
        1:   49:TEST(EPSFileToolsTest, TestResolutionSize) {
        1:   49-block  0
------------------
_ZN40EPSFileToolsTest_TestResolutionSize_TestD2Ev:
        1:   49:TEST(EPSFileToolsTest, TestResolutionSize) {
        1:   49-block  0
------------------
_ZN40EPSFileToolsTest_TestResolutionSize_Test8TestBodyEv:
        1:   49:TEST(EPSFileToolsTest, TestResolutionSize) {
        -:   50:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:   51:                     "%%DocumentNeededResources: font Courier\n"
        -:   52:                     "%%+ font Courier-Bold\n"
        -:   53:                     "%%+ font Courier-Oblique\n"
        -:   54:                     "%%+ font Courier-BoldOblique\n"
        -:   55:                     "%%+ font Symbol\n"
        -:   56:                     "%%Title: R Graphics Output\n"
        -:   57:                     "%%Creator: R Software\n"
        -:   58:                     "%%Pages: (atend)\n"
        -:   59:                     "%%BoundingBox: 0 0 302 302\n"
        1:   60:                     "%%EndComments\n";
        1:   60-block  0
    $$$$$:   60-block  1
        -:   61:
        1:   62:  std::istringstream iss(data);
        1:   63:  EPSInFile EPSFs(iss);
        1:   63-block  0
        1:   64:  Header h = EPSFs.getHeader();
        1:   65:  Resolution r = h.getResolution();
        1:   65-block  0
       1*:   66:  ASSERT_EQ(r.getX(), 302);
        1:   66-block  0
    %%%%%:   66-block  1
    %%%%%:   66-block  2
    %%%%%:   66-block  3
    %%%%%:   66-block  4
        1:   66-block  5
        1:   66-block  6
    $$$$$:   66-block  7
    $$$$$:   66-block  8
    $$$$$:   66-block  9
    $$$$$:   66-block 10
    $$$$$:   66-block 11
    $$$$$:   66-block 12
    $$$$$:   66-block 13
       1*:   67:  ASSERT_EQ(r.getY(), 302);
        1:   67-block  0
        1:   67-block  1
    %%%%%:   67-block  2
    %%%%%:   67-block  3
    %%%%%:   67-block  4
    %%%%%:   67-block  5
        1:   67-block  6
        1:   67-block  7
    $$$$$:   67-block  8
    $$$$$:   67-block  9
    $$$$$:   67-block 10
    $$$$$:   67-block 11
    $$$$$:   67-block 12
    $$$$$:   67-block 13
    $$$$$:   67-block 14
        1:   68:}
        1:   68-block  0
        1:   68-block  1
        1:   68-block  2
        1:   68-block  3
        1:   68-block  4
        1:   68-block  5
    $$$$$:   68-block  6
    $$$$$:   68-block  7
    $$$$$:   68-block  8
------------------
        -:   69:
        4:   70:TEST(EPSFileToolsTest, TestSettingResolutionInHeader) {
        2:   71:  Header h("%%BoundingBox: 0 0 302 302\n%%EndComments\n");
        1:   72:  Resolution r(100, 150);
        1:   73:  h.setResolution(r);
       1*:   74:  ASSERT_EQ(h.getResolution().getX(), 100);
       1*:   75:  ASSERT_EQ(h.getResolution().getY(), 150);
       2*:   76:  ASSERT_EQ(h.getHeaderString(), "%%BoundingBox: 0 0 100 150\n%%EndComments\n");
        1:   77:}
------------------
_ZN51EPSFileToolsTest_TestSettingResolutionInHeader_TestC2Ev:
        1:   70:TEST(EPSFileToolsTest, TestSettingResolutionInHeader) {
        1:   70-block  0
------------------
_ZN51EPSFileToolsTest_TestSettingResolutionInHeader_TestD0Ev:
        1:   70:TEST(EPSFileToolsTest, TestSettingResolutionInHeader) {
        1:   70-block  0
------------------
_ZN51EPSFileToolsTest_TestSettingResolutionInHeader_TestD2Ev:
        1:   70:TEST(EPSFileToolsTest, TestSettingResolutionInHeader) {
        1:   70-block  0
------------------
_ZN51EPSFileToolsTest_TestSettingResolutionInHeader_Test8TestBodyEv:
        1:   70:TEST(EPSFileToolsTest, TestSettingResolutionInHeader) {
        2:   71:  Header h("%%BoundingBox: 0 0 302 302\n%%EndComments\n");
        1:   71-block  0
        1:   71-block  1
    $$$$$:   71-block  2
    $$$$$:   71-block  3
        1:   72:  Resolution r(100, 150);
        1:   73:  h.setResolution(r);
       1*:   74:  ASSERT_EQ(h.getResolution().getX(), 100);
        1:   74-block  0
        1:   74-block  1
    %%%%%:   74-block  2
    %%%%%:   74-block  3
    %%%%%:   74-block  4
    %%%%%:   74-block  5
        1:   74-block  6
        1:   74-block  7
    $$$$$:   74-block  8
    $$$$$:   74-block  9
    $$$$$:   74-block 10
    $$$$$:   74-block 11
    $$$$$:   74-block 12
    $$$$$:   74-block 13
    $$$$$:   74-block 14
    $$$$$:   74-block 15
       1*:   75:  ASSERT_EQ(h.getResolution().getY(), 150);
        1:   75-block  0
        1:   75-block  1
    %%%%%:   75-block  2
    %%%%%:   75-block  3
    %%%%%:   75-block  4
    %%%%%:   75-block  5
        1:   75-block  6
        1:   75-block  7
    $$$$$:   75-block  8
    $$$$$:   75-block  9
    $$$$$:   75-block 10
    $$$$$:   75-block 11
    $$$$$:   75-block 12
    $$$$$:   75-block 13
    $$$$$:   75-block 14
    $$$$$:   75-block 15
       2*:   76:  ASSERT_EQ(h.getHeaderString(), "%%BoundingBox: 0 0 100 150\n%%EndComments\n");
        1:   76-block  0
        1:   76-block  1
    %%%%%:   76-block  2
    %%%%%:   76-block  3
    %%%%%:   76-block  4
    %%%%%:   76-block  5
        1:   76-block  6
        1:   76-block  7
    $$$$$:   76-block  8
    $$$$$:   76-block  9
    $$$$$:   76-block 10
    $$$$$:   76-block 11
    $$$$$:   76-block 12
    $$$$$:   76-block 13
        1:   77:}
        1:   77-block  0
        1:   77-block  1
    $$$$$:   77-block  2
------------------
        -:   78:
        4:   79:TEST(EPSFileToolsTest, TestSettingResolutionInHeaderWithSecondResolution) {
        -:   80:    std::string data = "%!PS-Adobe-3.0\n"
        -:   81:                       "%%DocumentNeededResources: font Helvetica\n"
        -:   82:                       "%%+ font Helvetica-Bold\n"
        -:   83:                       "%%+ font Helvetica-Oblique\n"
        -:   84:                       "%%+ font Helvetica-BoldOblique\n"
        -:   85:                       "%%+ font Symbol\n"
        -:   86:                       "%%DocumentMedia: special 576 576 0 () ()\n"
        -:   87:                       "%%Title: R Graphics Output\n"
        -:   88:                       "%%Creator: R Software\n"
        -:   89:                       "%%Pages: (atend)\n"
        -:   90:                       "%%BoundingBox: 0 0 576 576\n"
        -:   91:                       "%%EndComments\n"
        1:   92:                       "%%BeginProlog\n";
        -:   93:
        -:   94:    std::string data_expected = "%!PS-Adobe-3.0\n"
        -:   95:                       "%%DocumentNeededResources: font Helvetica\n"
        -:   96:                       "%%+ font Helvetica-Bold\n"
        -:   97:                       "%%+ font Helvetica-Oblique\n"
        -:   98:                       "%%+ font Helvetica-BoldOblique\n"
        -:   99:                       "%%+ font Symbol\n"
        -:  100:                       "%%DocumentMedia: special 100 150 0 () ()\n"
        -:  101:                       "%%Title: R Graphics Output\n"
        -:  102:                       "%%Creator: R Software\n"
        -:  103:                       "%%Pages: (atend)\n"
        -:  104:                       "%%BoundingBox: 0 0 100 150\n"
        -:  105:                       "%%EndComments\n"
        1:  106:                       "%%BeginProlog\n";
        -:  107:
        -:  108:
        1:  109:    Header h(data);
        1:  110:    Resolution r(100, 150);
        1:  111:    h.setResolution(r);
       1*:  112:    ASSERT_EQ(h.getResolution().getX(), 100);
       1*:  113:    ASSERT_EQ(h.getResolution().getY(), 150);
       2*:  114:    ASSERT_EQ(h.getHeaderString(), data_expected);
        1:  115:}
------------------
_ZN71EPSFileToolsTest_TestSettingResolutionInHeaderWithSecondResolution_TestC2Ev:
        1:   79:TEST(EPSFileToolsTest, TestSettingResolutionInHeaderWithSecondResolution) {
        1:   79-block  0
------------------
_ZN71EPSFileToolsTest_TestSettingResolutionInHeaderWithSecondResolution_TestD0Ev:
        1:   79:TEST(EPSFileToolsTest, TestSettingResolutionInHeaderWithSecondResolution) {
        1:   79-block  0
------------------
_ZN71EPSFileToolsTest_TestSettingResolutionInHeaderWithSecondResolution_TestD2Ev:
        1:   79:TEST(EPSFileToolsTest, TestSettingResolutionInHeaderWithSecondResolution) {
        1:   79-block  0
------------------
_ZN71EPSFileToolsTest_TestSettingResolutionInHeaderWithSecondResolution_Test8TestBodyEv:
        1:   79:TEST(EPSFileToolsTest, TestSettingResolutionInHeaderWithSecondResolution) {
        -:   80:    std::string data = "%!PS-Adobe-3.0\n"
        -:   81:                       "%%DocumentNeededResources: font Helvetica\n"
        -:   82:                       "%%+ font Helvetica-Bold\n"
        -:   83:                       "%%+ font Helvetica-Oblique\n"
        -:   84:                       "%%+ font Helvetica-BoldOblique\n"
        -:   85:                       "%%+ font Symbol\n"
        -:   86:                       "%%DocumentMedia: special 576 576 0 () ()\n"
        -:   87:                       "%%Title: R Graphics Output\n"
        -:   88:                       "%%Creator: R Software\n"
        -:   89:                       "%%Pages: (atend)\n"
        -:   90:                       "%%BoundingBox: 0 0 576 576\n"
        -:   91:                       "%%EndComments\n"
        1:   92:                       "%%BeginProlog\n";
        1:   92-block  0
    $$$$$:   92-block  1
        -:   93:
        -:   94:    std::string data_expected = "%!PS-Adobe-3.0\n"
        -:   95:                       "%%DocumentNeededResources: font Helvetica\n"
        -:   96:                       "%%+ font Helvetica-Bold\n"
        -:   97:                       "%%+ font Helvetica-Oblique\n"
        -:   98:                       "%%+ font Helvetica-BoldOblique\n"
        -:   99:                       "%%+ font Symbol\n"
        -:  100:                       "%%DocumentMedia: special 100 150 0 () ()\n"
        -:  101:                       "%%Title: R Graphics Output\n"
        -:  102:                       "%%Creator: R Software\n"
        -:  103:                       "%%Pages: (atend)\n"
        -:  104:                       "%%BoundingBox: 0 0 100 150\n"
        -:  105:                       "%%EndComments\n"
        1:  106:                       "%%BeginProlog\n";
    $$$$$:  106-block  0
        -:  107:
        -:  108:
        1:  109:    Header h(data);
        1:  110:    Resolution r(100, 150);
        1:  110-block  0
        1:  111:    h.setResolution(r);
       1*:  112:    ASSERT_EQ(h.getResolution().getX(), 100);
        1:  112-block  0
        1:  112-block  1
    %%%%%:  112-block  2
    %%%%%:  112-block  3
    %%%%%:  112-block  4
    %%%%%:  112-block  5
        1:  112-block  6
        1:  112-block  7
    $$$$$:  112-block  8
    $$$$$:  112-block  9
    $$$$$:  112-block 10
    $$$$$:  112-block 11
    $$$$$:  112-block 12
    $$$$$:  112-block 13
    $$$$$:  112-block 14
    $$$$$:  112-block 15
       1*:  113:    ASSERT_EQ(h.getResolution().getY(), 150);
        1:  113-block  0
        1:  113-block  1
    %%%%%:  113-block  2
    %%%%%:  113-block  3
    %%%%%:  113-block  4
    %%%%%:  113-block  5
        1:  113-block  6
        1:  113-block  7
    $$$$$:  113-block  8
    $$$$$:  113-block  9
    $$$$$:  113-block 10
    $$$$$:  113-block 11
    $$$$$:  113-block 12
    $$$$$:  113-block 13
    $$$$$:  113-block 14
    $$$$$:  113-block 15
       2*:  114:    ASSERT_EQ(h.getHeaderString(), data_expected);
        1:  114-block  0
        1:  114-block  1
    %%%%%:  114-block  2
    %%%%%:  114-block  3
    %%%%%:  114-block  4
    %%%%%:  114-block  5
        1:  114-block  6
        1:  114-block  7
    $$$$$:  114-block  8
    $$$$$:  114-block  9
    $$$$$:  114-block 10
    $$$$$:  114-block 11
    $$$$$:  114-block 12
    $$$$$:  114-block 13
        1:  115:}
        1:  115-block  0
        1:  115-block  1
        1:  115-block  2
        1:  115-block  3
        1:  115-block  4
        1:  115-block  5
    $$$$$:  115-block  6
    $$$$$:  115-block  7
    $$$$$:  115-block  8
------------------
        4:  116:TEST(EPSFileToolsTest, TestIsNextRelativeFalse) {
        -:  117:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  118:                       "%%BoundingBox: 0 0 302 302\n"
        -:  119:                       "%%EndComments\n"
        -:  120:                       "/m   { moveto } bind def\n"
        -:  121:                       "/l  { rlineto } bind def\n"
        -:  122:                       "\n"
        -:  123:                       "newpath\n"
        1:  124:                       "10.03 2.46 l\n";
        1:  125:    std::istringstream iss(data);
        1:  126:    EPSInFile EPSFs(iss);
        1:  127:    EPSFs.getHeader();
       1*:  128:    ASSERT_FALSE(EPSFs.isNextRelative());
        1:  129:}
------------------
_ZN45EPSFileToolsTest_TestIsNextRelativeFalse_TestC2Ev:
        1:  116:TEST(EPSFileToolsTest, TestIsNextRelativeFalse) {
        1:  116-block  0
------------------
_ZN45EPSFileToolsTest_TestIsNextRelativeFalse_TestD0Ev:
        1:  116:TEST(EPSFileToolsTest, TestIsNextRelativeFalse) {
        1:  116-block  0
------------------
_ZN45EPSFileToolsTest_TestIsNextRelativeFalse_TestD2Ev:
        1:  116:TEST(EPSFileToolsTest, TestIsNextRelativeFalse) {
        1:  116-block  0
------------------
_ZN45EPSFileToolsTest_TestIsNextRelativeFalse_Test8TestBodyEv:
        1:  116:TEST(EPSFileToolsTest, TestIsNextRelativeFalse) {
        -:  117:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  118:                       "%%BoundingBox: 0 0 302 302\n"
        -:  119:                       "%%EndComments\n"
        -:  120:                       "/m   { moveto } bind def\n"
        -:  121:                       "/l  { rlineto } bind def\n"
        -:  122:                       "\n"
        -:  123:                       "newpath\n"
        1:  124:                       "10.03 2.46 l\n";
        1:  124-block  0
    $$$$$:  124-block  1
        1:  125:    std::istringstream iss(data);
        1:  126:    EPSInFile EPSFs(iss);
        1:  126-block  0
        1:  127:    EPSFs.getHeader();
        1:  127-block  0
       1*:  128:    ASSERT_FALSE(EPSFs.isNextRelative());
        1:  128-block  0
    %%%%%:  128-block  1
    %%%%%:  128-block  2
    %%%%%:  128-block  3
    %%%%%:  128-block  4
    %%%%%:  128-block  5
        1:  128-block  6
        1:  128-block  7
    $$$$$:  128-block  8
    $$$$$:  128-block  9
    $$$$$:  128-block 10
    $$$$$:  128-block 11
    $$$$$:  128-block 12
    $$$$$:  128-block 13
    $$$$$:  128-block 14
        1:  129:}
        1:  129-block  0
        1:  129-block  1
        1:  129-block  2
        1:  129-block  3
    $$$$$:  129-block  4
    $$$$$:  129-block  5
------------------
        -:  130:
        4:  131:TEST(EPSFileToolsTest, TestIsNextRelativeLeftCommand) {
        -:  132:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  133:                       "%%BoundingBox: 0 0 302 302\n"
        -:  134:                       "%%EndComments\n"
        1:  135:                       "10.03 2.46 l\n";
        1:  136:    std::istringstream iss(data);
        1:  137:    EPSInFile EPSFs(iss);
        1:  138:    EPSFs.getHeader();
       1*:  139:    ASSERT_TRUE(EPSFs.isNextRelative());
        1:  140:}
------------------
_ZN51EPSFileToolsTest_TestIsNextRelativeLeftCommand_TestC2Ev:
        1:  131:TEST(EPSFileToolsTest, TestIsNextRelativeLeftCommand) {
        1:  131-block  0
------------------
_ZN51EPSFileToolsTest_TestIsNextRelativeLeftCommand_TestD0Ev:
        1:  131:TEST(EPSFileToolsTest, TestIsNextRelativeLeftCommand) {
        1:  131-block  0
------------------
_ZN51EPSFileToolsTest_TestIsNextRelativeLeftCommand_TestD2Ev:
        1:  131:TEST(EPSFileToolsTest, TestIsNextRelativeLeftCommand) {
        1:  131-block  0
------------------
_ZN51EPSFileToolsTest_TestIsNextRelativeLeftCommand_Test8TestBodyEv:
        1:  131:TEST(EPSFileToolsTest, TestIsNextRelativeLeftCommand) {
        -:  132:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  133:                       "%%BoundingBox: 0 0 302 302\n"
        -:  134:                       "%%EndComments\n"
        1:  135:                       "10.03 2.46 l\n";
        1:  135-block  0
    $$$$$:  135-block  1
        1:  136:    std::istringstream iss(data);
        1:  137:    EPSInFile EPSFs(iss);
        1:  137-block  0
        1:  138:    EPSFs.getHeader();
        1:  138-block  0
       1*:  139:    ASSERT_TRUE(EPSFs.isNextRelative());
        1:  139-block  0
    %%%%%:  139-block  1
    %%%%%:  139-block  2
    %%%%%:  139-block  3
    %%%%%:  139-block  4
    %%%%%:  139-block  5
        1:  139-block  6
        1:  139-block  7
    $$$$$:  139-block  8
    $$$$$:  139-block  9
    $$$$$:  139-block 10
    $$$$$:  139-block 11
    $$$$$:  139-block 12
    $$$$$:  139-block 13
    $$$$$:  139-block 14
        1:  140:}
        1:  140-block  0
        1:  140-block  1
        1:  140-block  2
        1:  140-block  3
    $$$$$:  140-block  4
    $$$$$:  140-block  5
------------------
        -:  141:
        4:  142:TEST(EPSFileToolsTest, TestIsNextRelativeRightCommand) {
        -:  143:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  144:                       "%%BoundingBox: 0 0 302 302\n"
        -:  145:                       "%%EndComments\n"
        1:  146:                       "164.72 100.9 lineto\n";
        1:  147:    std::istringstream iss(data);
        1:  148:    EPSInFile EPSFs(iss);
        1:  149:    EPSFs.getHeader();
       1*:  150:    ASSERT_TRUE(EPSFs.isNextRelative());
        1:  151:}
------------------
_ZN52EPSFileToolsTest_TestIsNextRelativeRightCommand_TestC2Ev:
        1:  142:TEST(EPSFileToolsTest, TestIsNextRelativeRightCommand) {
        1:  142-block  0
------------------
_ZN52EPSFileToolsTest_TestIsNextRelativeRightCommand_TestD0Ev:
        1:  142:TEST(EPSFileToolsTest, TestIsNextRelativeRightCommand) {
        1:  142-block  0
------------------
_ZN52EPSFileToolsTest_TestIsNextRelativeRightCommand_TestD2Ev:
        1:  142:TEST(EPSFileToolsTest, TestIsNextRelativeRightCommand) {
        1:  142-block  0
------------------
_ZN52EPSFileToolsTest_TestIsNextRelativeRightCommand_Test8TestBodyEv:
        1:  142:TEST(EPSFileToolsTest, TestIsNextRelativeRightCommand) {
        -:  143:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  144:                       "%%BoundingBox: 0 0 302 302\n"
        -:  145:                       "%%EndComments\n"
        1:  146:                       "164.72 100.9 lineto\n";
        1:  146-block  0
    $$$$$:  146-block  1
        1:  147:    std::istringstream iss(data);
        1:  148:    EPSInFile EPSFs(iss);
        1:  148-block  0
        1:  149:    EPSFs.getHeader();
        1:  149-block  0
       1*:  150:    ASSERT_TRUE(EPSFs.isNextRelative());
        1:  150-block  0
    %%%%%:  150-block  1
    %%%%%:  150-block  2
    %%%%%:  150-block  3
    %%%%%:  150-block  4
    %%%%%:  150-block  5
        1:  150-block  6
        1:  150-block  7
    $$$$$:  150-block  8
    $$$$$:  150-block  9
    $$$$$:  150-block 10
    $$$$$:  150-block 11
    $$$$$:  150-block 12
    $$$$$:  150-block 13
    $$$$$:  150-block 14
        1:  151:}
        1:  151-block  0
        1:  151-block  1
        1:  151-block  2
        1:  151-block  3
    $$$$$:  151-block  4
    $$$$$:  151-block  5
------------------
        -:  152:
        4:  153:TEST(EPSFileToolsTest, TestIsNextAbsoluteFalse) {
        -:  154:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  155:                       "%%BoundingBox: 0 0 302 302\n"
        -:  156:                       "%%EndComments\n"
        1:  157:                       "10.03 2.46 l\n";
        1:  158:    std::istringstream iss(data);
        1:  159:    EPSInFile EPSFs(iss);
        1:  160:    EPSFs.getHeader();
       1*:  161:    ASSERT_FALSE(EPSFs.isNextAbsolute());
        1:  162:}
------------------
_ZN45EPSFileToolsTest_TestIsNextAbsoluteFalse_TestC2Ev:
        1:  153:TEST(EPSFileToolsTest, TestIsNextAbsoluteFalse) {
        1:  153-block  0
------------------
_ZN45EPSFileToolsTest_TestIsNextAbsoluteFalse_TestD0Ev:
        1:  153:TEST(EPSFileToolsTest, TestIsNextAbsoluteFalse) {
        1:  153-block  0
------------------
_ZN45EPSFileToolsTest_TestIsNextAbsoluteFalse_TestD2Ev:
        1:  153:TEST(EPSFileToolsTest, TestIsNextAbsoluteFalse) {
        1:  153-block  0
------------------
_ZN45EPSFileToolsTest_TestIsNextAbsoluteFalse_Test8TestBodyEv:
        1:  153:TEST(EPSFileToolsTest, TestIsNextAbsoluteFalse) {
        -:  154:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  155:                       "%%BoundingBox: 0 0 302 302\n"
        -:  156:                       "%%EndComments\n"
        1:  157:                       "10.03 2.46 l\n";
        1:  157-block  0
    $$$$$:  157-block  1
        1:  158:    std::istringstream iss(data);
        1:  159:    EPSInFile EPSFs(iss);
        1:  159-block  0
        1:  160:    EPSFs.getHeader();
        1:  160-block  0
       1*:  161:    ASSERT_FALSE(EPSFs.isNextAbsolute());
        1:  161-block  0
    %%%%%:  161-block  1
    %%%%%:  161-block  2
    %%%%%:  161-block  3
    %%%%%:  161-block  4
    %%%%%:  161-block  5
        1:  161-block  6
        1:  161-block  7
    $$$$$:  161-block  8
    $$$$$:  161-block  9
    $$$$$:  161-block 10
    $$$$$:  161-block 11
    $$$$$:  161-block 12
    $$$$$:  161-block 13
    $$$$$:  161-block 14
        1:  162:}
        1:  162-block  0
        1:  162-block  1
        1:  162-block  2
        1:  162-block  3
    $$$$$:  162-block  4
    $$$$$:  162-block  5
------------------
        -:  163:
        4:  164:TEST(EPSFileToolsTest, TestIsNextAbsolutePointCommand) {
        -:  165:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  166:                       "%%BoundingBox: 0 0 302 302\n"
        -:  167:                       "%%EndComments\n"
        1:  168:                       "234.12 374.92 1.00 1.00 r p2\n";
        1:  169:    std::istringstream iss(data);
        1:  170:    EPSInFile EPSFs(iss);
        1:  171:    EPSFs.getHeader();
       1*:  172:    ASSERT_TRUE(EPSFs.isNextAbsolute());
        1:  173:}
------------------
_ZN52EPSFileToolsTest_TestIsNextAbsolutePointCommand_TestC2Ev:
        1:  164:TEST(EPSFileToolsTest, TestIsNextAbsolutePointCommand) {
        1:  164-block  0
------------------
_ZN52EPSFileToolsTest_TestIsNextAbsolutePointCommand_TestD0Ev:
        1:  164:TEST(EPSFileToolsTest, TestIsNextAbsolutePointCommand) {
        1:  164-block  0
------------------
_ZN52EPSFileToolsTest_TestIsNextAbsolutePointCommand_TestD2Ev:
        1:  164:TEST(EPSFileToolsTest, TestIsNextAbsolutePointCommand) {
        1:  164-block  0
------------------
_ZN52EPSFileToolsTest_TestIsNextAbsolutePointCommand_Test8TestBodyEv:
        1:  164:TEST(EPSFileToolsTest, TestIsNextAbsolutePointCommand) {
        -:  165:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  166:                       "%%BoundingBox: 0 0 302 302\n"
        -:  167:                       "%%EndComments\n"
        1:  168:                       "234.12 374.92 1.00 1.00 r p2\n";
        1:  168-block  0
    $$$$$:  168-block  1
        1:  169:    std::istringstream iss(data);
        1:  170:    EPSInFile EPSFs(iss);
        1:  170-block  0
        1:  171:    EPSFs.getHeader();
        1:  171-block  0
       1*:  172:    ASSERT_TRUE(EPSFs.isNextAbsolute());
        1:  172-block  0
    %%%%%:  172-block  1
    %%%%%:  172-block  2
    %%%%%:  172-block  3
    %%%%%:  172-block  4
    %%%%%:  172-block  5
        1:  172-block  6
        1:  172-block  7
    $$$$$:  172-block  8
    $$$$$:  172-block  9
    $$$$$:  172-block 10
    $$$$$:  172-block 11
    $$$$$:  172-block 12
    $$$$$:  172-block 13
    $$$$$:  172-block 14
        1:  173:}
        1:  173-block  0
        1:  173-block  1
        1:  173-block  2
        1:  173-block  3
    $$$$$:  173-block  4
    $$$$$:  173-block  5
------------------
        -:  174:
        4:  175:TEST(EPSFileToolsTest, TestIsNextAbsoluteMoveCommand) {
        -:  176:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  177:                       "%%BoundingBox: 0 0 302 302\n"
        -:  178:                       "%%EndComments\n"
        1:  179:                       "67.47 72.08 m\n";
        1:  180:    std::istringstream iss(data);
        1:  181:    EPSInFile EPSFs(iss);
        1:  182:    EPSFs.getHeader();
       1*:  183:    ASSERT_TRUE(EPSFs.isNextAbsolute());
        1:  184:}
------------------
_ZN51EPSFileToolsTest_TestIsNextAbsoluteMoveCommand_TestC2Ev:
        1:  175:TEST(EPSFileToolsTest, TestIsNextAbsoluteMoveCommand) {
        1:  175-block  0
------------------
_ZN51EPSFileToolsTest_TestIsNextAbsoluteMoveCommand_TestD0Ev:
        1:  175:TEST(EPSFileToolsTest, TestIsNextAbsoluteMoveCommand) {
        1:  175-block  0
------------------
_ZN51EPSFileToolsTest_TestIsNextAbsoluteMoveCommand_TestD2Ev:
        1:  175:TEST(EPSFileToolsTest, TestIsNextAbsoluteMoveCommand) {
        1:  175-block  0
------------------
_ZN51EPSFileToolsTest_TestIsNextAbsoluteMoveCommand_Test8TestBodyEv:
        1:  175:TEST(EPSFileToolsTest, TestIsNextAbsoluteMoveCommand) {
        -:  176:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  177:                       "%%BoundingBox: 0 0 302 302\n"
        -:  178:                       "%%EndComments\n"
        1:  179:                       "67.47 72.08 m\n";
        1:  179-block  0
    $$$$$:  179-block  1
        1:  180:    std::istringstream iss(data);
        1:  181:    EPSInFile EPSFs(iss);
        1:  181-block  0
        1:  182:    EPSFs.getHeader();
        1:  182-block  0
       1*:  183:    ASSERT_TRUE(EPSFs.isNextAbsolute());
        1:  183-block  0
    %%%%%:  183-block  1
    %%%%%:  183-block  2
    %%%%%:  183-block  3
    %%%%%:  183-block  4
    %%%%%:  183-block  5
        1:  183-block  6
        1:  183-block  7
    $$$$$:  183-block  8
    $$$$$:  183-block  9
    $$$$$:  183-block 10
    $$$$$:  183-block 11
    $$$$$:  183-block 12
    $$$$$:  183-block 13
    $$$$$:  183-block 14
        1:  184:}
        1:  184-block  0
        1:  184-block  1
        1:  184-block  2
        1:  184-block  3
    $$$$$:  184-block  4
    $$$$$:  184-block  5
------------------
        -:  185:
        4:  186:TEST(EPSFileToolsTest, TestIsNextUnprocessableFalse) {
        -:  187:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  188:                       "%%BoundingBox: 0 0 302 302\n"
        -:  189:                       "%%EndComments\n"
        1:  190:                       "10.03 2.46 l\n";
        1:  191:    std::istringstream iss(data);
        1:  192:    EPSInFile EPSFs(iss);
        1:  193:    EPSFs.getHeader();
       1*:  194:    ASSERT_FALSE(EPSFs.isNextUnprocessable());
        1:  195:}
------------------
_ZN50EPSFileToolsTest_TestIsNextUnprocessableFalse_TestC2Ev:
        1:  186:TEST(EPSFileToolsTest, TestIsNextUnprocessableFalse) {
        1:  186-block  0
------------------
_ZN50EPSFileToolsTest_TestIsNextUnprocessableFalse_TestD0Ev:
        1:  186:TEST(EPSFileToolsTest, TestIsNextUnprocessableFalse) {
        1:  186-block  0
------------------
_ZN50EPSFileToolsTest_TestIsNextUnprocessableFalse_TestD2Ev:
        1:  186:TEST(EPSFileToolsTest, TestIsNextUnprocessableFalse) {
        1:  186-block  0
------------------
_ZN50EPSFileToolsTest_TestIsNextUnprocessableFalse_Test8TestBodyEv:
        1:  186:TEST(EPSFileToolsTest, TestIsNextUnprocessableFalse) {
        -:  187:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  188:                       "%%BoundingBox: 0 0 302 302\n"
        -:  189:                       "%%EndComments\n"
        1:  190:                       "10.03 2.46 l\n";
        1:  190-block  0
    $$$$$:  190-block  1
        1:  191:    std::istringstream iss(data);
        1:  192:    EPSInFile EPSFs(iss);
        1:  192-block  0
        1:  193:    EPSFs.getHeader();
        1:  193-block  0
       1*:  194:    ASSERT_FALSE(EPSFs.isNextUnprocessable());
        1:  194-block  0
    %%%%%:  194-block  1
    %%%%%:  194-block  2
    %%%%%:  194-block  3
    %%%%%:  194-block  4
    %%%%%:  194-block  5
        1:  194-block  6
        1:  194-block  7
    $$$$$:  194-block  8
    $$$$$:  194-block  9
    $$$$$:  194-block 10
    $$$$$:  194-block 11
    $$$$$:  194-block 12
    $$$$$:  194-block 13
    $$$$$:  194-block 14
        1:  195:}
        1:  195-block  0
        1:  195-block  1
        1:  195-block  2
        1:  195-block  3
    $$$$$:  195-block  4
    $$$$$:  195-block  5
------------------
        -:  196:
        4:  197:TEST(EPSFileToolsTest, TestIsNextUnprocessableTrue) {
        -:  198:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  199:                       "%%BoundingBox: 0 0 302 302\n"
        -:  200:                       "%%EndComments\n"
        1:  201:                       "/m   { moveto } bind def\n";
        1:  202:    std::istringstream iss(data);
        1:  203:    EPSInFile EPSFs(iss);
        1:  204:    EPSFs.getHeader();
       1*:  205:    ASSERT_TRUE(EPSFs.isNextUnprocessable());
        1:  206:}
------------------
_ZN49EPSFileToolsTest_TestIsNextUnprocessableTrue_TestC2Ev:
        1:  197:TEST(EPSFileToolsTest, TestIsNextUnprocessableTrue) {
        1:  197-block  0
------------------
_ZN49EPSFileToolsTest_TestIsNextUnprocessableTrue_TestD0Ev:
        1:  197:TEST(EPSFileToolsTest, TestIsNextUnprocessableTrue) {
        1:  197-block  0
------------------
_ZN49EPSFileToolsTest_TestIsNextUnprocessableTrue_TestD2Ev:
        1:  197:TEST(EPSFileToolsTest, TestIsNextUnprocessableTrue) {
        1:  197-block  0
------------------
_ZN49EPSFileToolsTest_TestIsNextUnprocessableTrue_Test8TestBodyEv:
        1:  197:TEST(EPSFileToolsTest, TestIsNextUnprocessableTrue) {
        -:  198:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  199:                       "%%BoundingBox: 0 0 302 302\n"
        -:  200:                       "%%EndComments\n"
        1:  201:                       "/m   { moveto } bind def\n";
        1:  201-block  0
    $$$$$:  201-block  1
        1:  202:    std::istringstream iss(data);
        1:  203:    EPSInFile EPSFs(iss);
        1:  203-block  0
        1:  204:    EPSFs.getHeader();
        1:  204-block  0
       1*:  205:    ASSERT_TRUE(EPSFs.isNextUnprocessable());
        1:  205-block  0
    %%%%%:  205-block  1
    %%%%%:  205-block  2
    %%%%%:  205-block  3
    %%%%%:  205-block  4
    %%%%%:  205-block  5
        1:  205-block  6
        1:  205-block  7
    $$$$$:  205-block  8
    $$$$$:  205-block  9
    $$$$$:  205-block 10
    $$$$$:  205-block 11
    $$$$$:  205-block 12
    $$$$$:  205-block 13
    $$$$$:  205-block 14
        1:  206:}
        1:  206-block  0
        1:  206-block  1
        1:  206-block  2
        1:  206-block  3
    $$$$$:  206-block  4
    $$$$$:  206-block  5
------------------
        -:  207:
        4:  208:TEST(EPSFileToolsTest, TestGetRelativeCommandVarRightLineCommand){
        -:  209:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  210:                       "%%BoundingBox: 0 0 302 302\n"
        -:  211:                       "%%EndComments\n"
        1:  212:                       "10.03 2.46 l\n";
        1:  213:    std::istringstream iss(data);
        1:  214:    EPSInFile EPSFs(iss);
        1:  215:    EPSFs.getHeader();
        1:  216:    RelativeCommandVar RelVar = EPSFs.getRelativeCommandVar();
       1*:  217:    ASSERT_TRUE(std::get_if<RightLineCommand>(&RelVar));
        1:  218:}
------------------
_ZN63EPSFileToolsTest_TestGetRelativeCommandVarRightLineCommand_TestC2Ev:
        1:  208:TEST(EPSFileToolsTest, TestGetRelativeCommandVarRightLineCommand){
        1:  208-block  0
------------------
_ZN63EPSFileToolsTest_TestGetRelativeCommandVarRightLineCommand_TestD0Ev:
        1:  208:TEST(EPSFileToolsTest, TestGetRelativeCommandVarRightLineCommand){
        1:  208-block  0
------------------
_ZN63EPSFileToolsTest_TestGetRelativeCommandVarRightLineCommand_TestD2Ev:
        1:  208:TEST(EPSFileToolsTest, TestGetRelativeCommandVarRightLineCommand){
        1:  208-block  0
------------------
_ZN63EPSFileToolsTest_TestGetRelativeCommandVarRightLineCommand_Test8TestBodyEv:
        1:  208:TEST(EPSFileToolsTest, TestGetRelativeCommandVarRightLineCommand){
        -:  209:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  210:                       "%%BoundingBox: 0 0 302 302\n"
        -:  211:                       "%%EndComments\n"
        1:  212:                       "10.03 2.46 l\n";
        1:  212-block  0
    $$$$$:  212-block  1
        1:  213:    std::istringstream iss(data);
        1:  214:    EPSInFile EPSFs(iss);
        1:  214-block  0
        1:  215:    EPSFs.getHeader();
        1:  215-block  0
        1:  216:    RelativeCommandVar RelVar = EPSFs.getRelativeCommandVar();
       1*:  217:    ASSERT_TRUE(std::get_if<RightLineCommand>(&RelVar));
        1:  217-block  0
    %%%%%:  217-block  1
    %%%%%:  217-block  2
    %%%%%:  217-block  3
    %%%%%:  217-block  4
    %%%%%:  217-block  5
        1:  217-block  6
        1:  217-block  7
    $$$$$:  217-block  8
    $$$$$:  217-block  9
    $$$$$:  217-block 10
    $$$$$:  217-block 11
    $$$$$:  217-block 12
    $$$$$:  217-block 13
    $$$$$:  217-block 14
        1:  218:}
        1:  218-block  0
        1:  218-block  1
        1:  218-block  2
        1:  218-block  3
        1:  218-block  4
        1:  218-block  5
    $$$$$:  218-block  6
    $$$$$:  218-block  7
    $$$$$:  218-block  8
------------------
        -:  219:
        4:  220:TEST(EPSFileToolsTest, TestGetRelativeCommandVarLeftLineCommand){
        -:  221:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  222:                       "%%BoundingBox: 0 0 302 302\n"
        -:  223:                       "%%EndComments\n"
        1:  224:                       "10.03 2.46 lineto\n";
        1:  225:    std::istringstream iss(data);
        1:  226:    EPSInFile EPSFs(iss);
        1:  227:    EPSFs.getHeader();
        1:  228:    RelativeCommandVar RelVar = EPSFs.getRelativeCommandVar();
       1*:  229:    ASSERT_TRUE(std::get_if<LeftLineCommand>(&RelVar));
        1:  230:}
------------------
_ZN62EPSFileToolsTest_TestGetRelativeCommandVarLeftLineCommand_TestC2Ev:
        1:  220:TEST(EPSFileToolsTest, TestGetRelativeCommandVarLeftLineCommand){
        1:  220-block  0
------------------
_ZN62EPSFileToolsTest_TestGetRelativeCommandVarLeftLineCommand_TestD0Ev:
        1:  220:TEST(EPSFileToolsTest, TestGetRelativeCommandVarLeftLineCommand){
        1:  220-block  0
------------------
_ZN62EPSFileToolsTest_TestGetRelativeCommandVarLeftLineCommand_TestD2Ev:
        1:  220:TEST(EPSFileToolsTest, TestGetRelativeCommandVarLeftLineCommand){
        1:  220-block  0
------------------
_ZN62EPSFileToolsTest_TestGetRelativeCommandVarLeftLineCommand_Test8TestBodyEv:
        1:  220:TEST(EPSFileToolsTest, TestGetRelativeCommandVarLeftLineCommand){
        -:  221:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  222:                       "%%BoundingBox: 0 0 302 302\n"
        -:  223:                       "%%EndComments\n"
        1:  224:                       "10.03 2.46 lineto\n";
        1:  224-block  0
    $$$$$:  224-block  1
        1:  225:    std::istringstream iss(data);
        1:  226:    EPSInFile EPSFs(iss);
        1:  226-block  0
        1:  227:    EPSFs.getHeader();
        1:  227-block  0
        1:  228:    RelativeCommandVar RelVar = EPSFs.getRelativeCommandVar();
       1*:  229:    ASSERT_TRUE(std::get_if<LeftLineCommand>(&RelVar));
        1:  229-block  0
    %%%%%:  229-block  1
    %%%%%:  229-block  2
    %%%%%:  229-block  3
    %%%%%:  229-block  4
    %%%%%:  229-block  5
        1:  229-block  6
        1:  229-block  7
    $$$$$:  229-block  8
    $$$$$:  229-block  9
    $$$$$:  229-block 10
    $$$$$:  229-block 11
    $$$$$:  229-block 12
    $$$$$:  229-block 13
    $$$$$:  229-block 14
        1:  230:}
        1:  230-block  0
        1:  230-block  1
        1:  230-block  2
        1:  230-block  3
        1:  230-block  4
        1:  230-block  5
    $$$$$:  230-block  6
    $$$$$:  230-block  7
    $$$$$:  230-block  8
------------------
        -:  231:
        4:  232:TEST(EPSFileToolsTest, TestGetRelativeCommandVarException){
        -:  233:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  234:                       "%%BoundingBox: 0 0 302 302\n"
        -:  235:                       "%%EndComments\n"
        -:  236:                       "/m   { moveto } bind def\n"
        -:  237:                       "/l  { rlineto } bind def\n"
        -:  238:                       "\n"
        1:  239:                       "newpath\n";
        1:  240:    std::istringstream iss(data);
        1:  241:    EPSInFile EPSFs(iss);
        1:  242:    EPSFs.getHeader();
       1*:  243:    ASSERT_ANY_THROW(EPSFs.getRelativeCommandVar());
        1:  244:}
------------------
_ZN56EPSFileToolsTest_TestGetRelativeCommandVarException_TestC2Ev:
        1:  232:TEST(EPSFileToolsTest, TestGetRelativeCommandVarException){
        1:  232-block  0
------------------
_ZN56EPSFileToolsTest_TestGetRelativeCommandVarException_TestD0Ev:
        1:  232:TEST(EPSFileToolsTest, TestGetRelativeCommandVarException){
        1:  232-block  0
------------------
_ZN56EPSFileToolsTest_TestGetRelativeCommandVarException_TestD2Ev:
        1:  232:TEST(EPSFileToolsTest, TestGetRelativeCommandVarException){
        1:  232-block  0
------------------
_ZN56EPSFileToolsTest_TestGetRelativeCommandVarException_Test8TestBodyEv:
        1:  232:TEST(EPSFileToolsTest, TestGetRelativeCommandVarException){
        -:  233:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  234:                       "%%BoundingBox: 0 0 302 302\n"
        -:  235:                       "%%EndComments\n"
        -:  236:                       "/m   { moveto } bind def\n"
        -:  237:                       "/l  { rlineto } bind def\n"
        -:  238:                       "\n"
        1:  239:                       "newpath\n";
        1:  239-block  0
    $$$$$:  239-block  1
        1:  240:    std::istringstream iss(data);
        1:  241:    EPSInFile EPSFs(iss);
        1:  241-block  0
        1:  242:    EPSFs.getHeader();
        1:  242-block  0
       1*:  243:    ASSERT_ANY_THROW(EPSFs.getRelativeCommandVar());
        1:  243-block  0
        1:  243-block  1
        1:  243-block  2
        1:  243-block  3
    %%%%%:  243-block  4
        1:  243-block  5
    %%%%%:  243-block  6
    %%%%%:  243-block  7
    %%%%%:  243-block  8
    %%%%%:  243-block  9
    %%%%%:  243-block 10
        1:  243-block 11
        1:  243-block 12
    $$$$$:  243-block 13
    $$$$$:  243-block 14
    $$$$$:  243-block 15
    $$$$$:  243-block 16
        1:  244:}
        1:  244-block  0
        1:  244-block  1
        1:  244-block  2
        1:  244-block  3
    $$$$$:  244-block  4
    $$$$$:  244-block  5
------------------
        -:  245:
        4:  246:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarPointCommand){
        -:  247:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  248:                       "%%BoundingBox: 0 0 302 302\n"
        -:  249:                       "%%EndComments\n"
        1:  250:                       "234.12 374.92 1.00 1.00 r p2\n";
        1:  251:    std::istringstream iss(data);
        1:  252:    EPSInFile EPSFs(iss);
        1:  253:    EPSFs.getHeader();
        1:  254:    AbsoluteCommandVar AbsVar = EPSFs.getAbsoluteCommandVar();
       1*:  255:    ASSERT_TRUE(std::get_if<PointCommand>(&AbsVar));
        1:  256:}
------------------
_ZN59EPSFileToolsTest_TestGetAbsoluteCommandVarPointCommand_TestC2Ev:
        1:  246:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarPointCommand){
        1:  246-block  0
------------------
_ZN59EPSFileToolsTest_TestGetAbsoluteCommandVarPointCommand_TestD0Ev:
        1:  246:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarPointCommand){
        1:  246-block  0
------------------
_ZN59EPSFileToolsTest_TestGetAbsoluteCommandVarPointCommand_TestD2Ev:
        1:  246:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarPointCommand){
        1:  246-block  0
------------------
_ZN59EPSFileToolsTest_TestGetAbsoluteCommandVarPointCommand_Test8TestBodyEv:
        1:  246:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarPointCommand){
        -:  247:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  248:                       "%%BoundingBox: 0 0 302 302\n"
        -:  249:                       "%%EndComments\n"
        1:  250:                       "234.12 374.92 1.00 1.00 r p2\n";
        1:  250-block  0
    $$$$$:  250-block  1
        1:  251:    std::istringstream iss(data);
        1:  252:    EPSInFile EPSFs(iss);
        1:  252-block  0
        1:  253:    EPSFs.getHeader();
        1:  253-block  0
        1:  254:    AbsoluteCommandVar AbsVar = EPSFs.getAbsoluteCommandVar();
       1*:  255:    ASSERT_TRUE(std::get_if<PointCommand>(&AbsVar));
        1:  255-block  0
    %%%%%:  255-block  1
    %%%%%:  255-block  2
    %%%%%:  255-block  3
    %%%%%:  255-block  4
    %%%%%:  255-block  5
        1:  255-block  6
        1:  255-block  7
    $$$$$:  255-block  8
    $$$$$:  255-block  9
    $$$$$:  255-block 10
    $$$$$:  255-block 11
    $$$$$:  255-block 12
    $$$$$:  255-block 13
    $$$$$:  255-block 14
        1:  256:}
        1:  256-block  0
        1:  256-block  1
        1:  256-block  2
        1:  256-block  3
        1:  256-block  4
        1:  256-block  5
    $$$$$:  256-block  6
    $$$$$:  256-block  7
    $$$$$:  256-block  8
------------------
        -:  257:
        4:  258:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarMoveCommand){
        -:  259:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  260:                       "%%BoundingBox: 0 0 302 302\n"
        -:  261:                       "%%EndComments\n"
        1:  262:                       "67.47 72.08 m\n";
        1:  263:    std::istringstream iss(data);
        1:  264:    EPSInFile EPSFs(iss);
        1:  265:    EPSFs.getHeader();
        1:  266:    AbsoluteCommandVar AbsVar = EPSFs.getAbsoluteCommandVar();
       1*:  267:    ASSERT_TRUE(std::get_if<MoveCommand>(&AbsVar));
        1:  268:}
------------------
_ZN58EPSFileToolsTest_TestGetAbsoluteCommandVarMoveCommand_TestC2Ev:
        1:  258:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarMoveCommand){
        1:  258-block  0
------------------
_ZN58EPSFileToolsTest_TestGetAbsoluteCommandVarMoveCommand_TestD0Ev:
        1:  258:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarMoveCommand){
        1:  258-block  0
------------------
_ZN58EPSFileToolsTest_TestGetAbsoluteCommandVarMoveCommand_TestD2Ev:
        1:  258:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarMoveCommand){
        1:  258-block  0
------------------
_ZN58EPSFileToolsTest_TestGetAbsoluteCommandVarMoveCommand_Test8TestBodyEv:
        1:  258:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarMoveCommand){
        -:  259:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  260:                       "%%BoundingBox: 0 0 302 302\n"
        -:  261:                       "%%EndComments\n"
        1:  262:                       "67.47 72.08 m\n";
        1:  262-block  0
    $$$$$:  262-block  1
        1:  263:    std::istringstream iss(data);
        1:  264:    EPSInFile EPSFs(iss);
        1:  264-block  0
        1:  265:    EPSFs.getHeader();
        1:  265-block  0
        1:  266:    AbsoluteCommandVar AbsVar = EPSFs.getAbsoluteCommandVar();
       1*:  267:    ASSERT_TRUE(std::get_if<MoveCommand>(&AbsVar));
        1:  267-block  0
    %%%%%:  267-block  1
    %%%%%:  267-block  2
    %%%%%:  267-block  3
    %%%%%:  267-block  4
    %%%%%:  267-block  5
        1:  267-block  6
        1:  267-block  7
    $$$$$:  267-block  8
    $$$$$:  267-block  9
    $$$$$:  267-block 10
    $$$$$:  267-block 11
    $$$$$:  267-block 12
    $$$$$:  267-block 13
    $$$$$:  267-block 14
        1:  268:}
        1:  268-block  0
        1:  268-block  1
        1:  268-block  2
        1:  268-block  3
        1:  268-block  4
        1:  268-block  5
    $$$$$:  268-block  6
    $$$$$:  268-block  7
    $$$$$:  268-block  8
------------------
        -:  269:
        4:  270:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarException){
        -:  271:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  272:                       "%%BoundingBox: 0 0 302 302\n"
        -:  273:                       "%%EndComments\n"
        -:  274:                       "/m   { moveto } bind def\n"
        -:  275:                       "/l  { rlineto } bind def\n"
        -:  276:                       "\n"
        1:  277:                       "newpath\n";
        1:  278:    std::istringstream iss(data);
        1:  279:    EPSInFile EPSFs(iss);
        1:  280:    EPSFs.getHeader();
       1*:  281:    ASSERT_ANY_THROW(EPSFs.getAbsoluteCommandVar());
        1:  282:}
------------------
_ZN56EPSFileToolsTest_TestGetAbsoluteCommandVarException_TestC2Ev:
        1:  270:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarException){
        1:  270-block  0
------------------
_ZN56EPSFileToolsTest_TestGetAbsoluteCommandVarException_TestD0Ev:
        1:  270:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarException){
        1:  270-block  0
------------------
_ZN56EPSFileToolsTest_TestGetAbsoluteCommandVarException_TestD2Ev:
        1:  270:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarException){
        1:  270-block  0
------------------
_ZN56EPSFileToolsTest_TestGetAbsoluteCommandVarException_Test8TestBodyEv:
        1:  270:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarException){
        -:  271:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  272:                       "%%BoundingBox: 0 0 302 302\n"
        -:  273:                       "%%EndComments\n"
        -:  274:                       "/m   { moveto } bind def\n"
        -:  275:                       "/l  { rlineto } bind def\n"
        -:  276:                       "\n"
        1:  277:                       "newpath\n";
        1:  277-block  0
    $$$$$:  277-block  1
        1:  278:    std::istringstream iss(data);
        1:  279:    EPSInFile EPSFs(iss);
        1:  279-block  0
        1:  280:    EPSFs.getHeader();
        1:  280-block  0
       1*:  281:    ASSERT_ANY_THROW(EPSFs.getAbsoluteCommandVar());
        1:  281-block  0
        1:  281-block  1
        1:  281-block  2
        1:  281-block  3
    %%%%%:  281-block  4
        1:  281-block  5
    %%%%%:  281-block  6
    %%%%%:  281-block  7
    %%%%%:  281-block  8
    %%%%%:  281-block  9
    %%%%%:  281-block 10
        1:  281-block 11
        1:  281-block 12
    $$$$$:  281-block 13
    $$$$$:  281-block 14
    $$$$$:  281-block 15
    $$$$$:  281-block 16
        1:  282:}
        1:  282-block  0
        1:  282-block  1
        1:  282-block  2
        1:  282-block  3
    $$$$$:  282-block  4
    $$$$$:  282-block  5
------------------
        -:  283:
        4:  284:TEST(EPSFileToolsTest, TestGetNonProcessableCommand){
        -:  285:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  286:                       "%%BoundingBox: 0 0 302 302\n"
        -:  287:                       "%%EndComments\n"
        -:  288:                       "/m   { moveto } bind def\n"
        1:  289:                       "/l  { rlineto } bind def\n";
        1:  290:    std::istringstream iss(data);
        1:  291:    EPSInFile EPSFs(iss);
        1:  292:    EPSFs.getHeader();
        1:  293:    NonProcessableCommand c = EPSFs.getNonProcessableCommand();
       2*:  294:    ASSERT_EQ(c.toString(), "/m   { moveto } bind def");
        1:  295:}
------------------
_ZN50EPSFileToolsTest_TestGetNonProcessableCommand_TestC2Ev:
        1:  284:TEST(EPSFileToolsTest, TestGetNonProcessableCommand){
        1:  284-block  0
------------------
_ZN50EPSFileToolsTest_TestGetNonProcessableCommand_TestD0Ev:
        1:  284:TEST(EPSFileToolsTest, TestGetNonProcessableCommand){
        1:  284-block  0
------------------
_ZN50EPSFileToolsTest_TestGetNonProcessableCommand_TestD2Ev:
        1:  284:TEST(EPSFileToolsTest, TestGetNonProcessableCommand){
        1:  284-block  0
------------------
_ZN50EPSFileToolsTest_TestGetNonProcessableCommand_Test8TestBodyEv:
        1:  284:TEST(EPSFileToolsTest, TestGetNonProcessableCommand){
        -:  285:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  286:                       "%%BoundingBox: 0 0 302 302\n"
        -:  287:                       "%%EndComments\n"
        -:  288:                       "/m   { moveto } bind def\n"
        1:  289:                       "/l  { rlineto } bind def\n";
        1:  289-block  0
    $$$$$:  289-block  1
        1:  290:    std::istringstream iss(data);
        1:  291:    EPSInFile EPSFs(iss);
        1:  291-block  0
        1:  292:    EPSFs.getHeader();
        1:  292-block  0
        1:  293:    NonProcessableCommand c = EPSFs.getNonProcessableCommand();
       2*:  294:    ASSERT_EQ(c.toString(), "/m   { moveto } bind def");
        1:  294-block  0
        1:  294-block  1
    %%%%%:  294-block  2
    %%%%%:  294-block  3
    %%%%%:  294-block  4
    %%%%%:  294-block  5
        1:  294-block  6
        1:  294-block  7
    $$$$$:  294-block  8
    $$$$$:  294-block  9
    $$$$$:  294-block 10
    $$$$$:  294-block 11
    $$$$$:  294-block 12
    $$$$$:  294-block 13
        1:  295:}
        1:  295-block  0
        1:  295-block  1
        1:  295-block  2
        1:  295-block  3
        1:  295-block  4
        1:  295-block  5
    $$$$$:  295-block  6
    $$$$$:  295-block  7
    $$$$$:  295-block  8
------------------
        -:  296:
        4:  297:TEST(EPSFileToolsTest, TestGetCommandsFunctions) {
        -:  298:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  299:                     "%%DocumentNeededResources: font Courier\n"
        -:  300:                     "%%+ font Courier-Bold\n"
        -:  301:                     "%%+ font Courier-Oblique\n"
        -:  302:                     "%%+ font Courier-BoldOblique\n"
        -:  303:                     "%%+ font Symbol\n"
        -:  304:                     "%%Title: R Graphics Output\n"
        -:  305:                     "%%Creator: R Software\n"
        -:  306:                     "%%Pages: (atend)\n"
        -:  307:                     "%%BoundingBox: 0 0 302 302\n"
        -:  308:                     "%%EndComments\n"
        -:  309:                     "/m   { moveto } bind def\n"
        -:  310:                     "/l  { rlineto } bind def\n"
        -:  311:                     "\n"
        -:  312:                     "newpath\n"
        -:  313:                     "10.03 2.46 l\n"
        -:  314:                     "164.72 100.9 lineto\n"
        1:  315:                     "234.12 374.92 1.00 1.00 r p2\n";
        -:  316:
        1:  317:  std::istringstream iss(data);
        1:  318:  EPSInFile EPSFs(iss);
        1:  319:  EPSFs.getHeader();
        1:  320:  NonProcessableCommand npc = EPSFs.getNonProcessableCommand();
       2*:  321:  ASSERT_EQ(npc.toString(), "/m   { moveto } bind def");
        1:  322:  npc = EPSFs.getNonProcessableCommand();
       2*:  323:  ASSERT_EQ(npc.toString(), "/l  { rlineto } bind def");
        1:  324:  npc = EPSFs.getNonProcessableCommand();
       2*:  325:  ASSERT_EQ(npc.toString(), "");
        1:  326:  npc = EPSFs.getNonProcessableCommand();
       2*:  327:  ASSERT_EQ(npc.toString(), "newpath");
        1:  328:  RelativeCommandVar rcv = EPSFs.getRelativeCommandVar();
        1:  329:  RightLineCommand* rolc = std::get_if<RightLineCommand>(&rcv);
       1*:  330:  ASSERT_TRUE(rolc);
       2*:  331:  ASSERT_EQ(rolc->toString(), "10.03 2.46 l");
        1:  332:  rcv = EPSFs.getRelativeCommandVar();
        1:  333:  LeftLineCommand* lolc = std::get_if<LeftLineCommand>(&rcv);
       1*:  334:  ASSERT_TRUE(lolc);
       2*:  335:  ASSERT_EQ(lolc->toString(), "164.72 100.9 lineto");
        1:  336:  AbsoluteCommandVar acv = EPSFs.getAbsoluteCommandVar();
        1:  337:  PointCommand* pc = std::get_if<PointCommand>(&acv);
       1*:  338:  ASSERT_TRUE(pc);
       2*:  339:  ASSERT_EQ(pc->toString(), "234.12 374.92 1 1 r p2");
        1:  340:}
------------------
_ZN46EPSFileToolsTest_TestGetCommandsFunctions_TestC2Ev:
        1:  297:TEST(EPSFileToolsTest, TestGetCommandsFunctions) {
        1:  297-block  0
------------------
_ZN46EPSFileToolsTest_TestGetCommandsFunctions_TestD0Ev:
        1:  297:TEST(EPSFileToolsTest, TestGetCommandsFunctions) {
        1:  297-block  0
------------------
_ZN46EPSFileToolsTest_TestGetCommandsFunctions_TestD2Ev:
        1:  297:TEST(EPSFileToolsTest, TestGetCommandsFunctions) {
        1:  297-block  0
------------------
_ZN46EPSFileToolsTest_TestGetCommandsFunctions_Test8TestBodyEv:
        1:  297:TEST(EPSFileToolsTest, TestGetCommandsFunctions) {
        -:  298:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  299:                     "%%DocumentNeededResources: font Courier\n"
        -:  300:                     "%%+ font Courier-Bold\n"
        -:  301:                     "%%+ font Courier-Oblique\n"
        -:  302:                     "%%+ font Courier-BoldOblique\n"
        -:  303:                     "%%+ font Symbol\n"
        -:  304:                     "%%Title: R Graphics Output\n"
        -:  305:                     "%%Creator: R Software\n"
        -:  306:                     "%%Pages: (atend)\n"
        -:  307:                     "%%BoundingBox: 0 0 302 302\n"
        -:  308:                     "%%EndComments\n"
        -:  309:                     "/m   { moveto } bind def\n"
        -:  310:                     "/l  { rlineto } bind def\n"
        -:  311:                     "\n"
        -:  312:                     "newpath\n"
        -:  313:                     "10.03 2.46 l\n"
        -:  314:                     "164.72 100.9 lineto\n"
        1:  315:                     "234.12 374.92 1.00 1.00 r p2\n";
        1:  315-block  0
    $$$$$:  315-block  1
        -:  316:
        1:  317:  std::istringstream iss(data);
        1:  318:  EPSInFile EPSFs(iss);
        1:  318-block  0
        1:  319:  EPSFs.getHeader();
        1:  319-block  0
        1:  320:  NonProcessableCommand npc = EPSFs.getNonProcessableCommand();
       2*:  321:  ASSERT_EQ(npc.toString(), "/m   { moveto } bind def");
        1:  321-block  0
        1:  321-block  1
    %%%%%:  321-block  2
    %%%%%:  321-block  3
    %%%%%:  321-block  4
    %%%%%:  321-block  5
        1:  321-block  6
        1:  321-block  7
    $$$$$:  321-block  8
    $$$$$:  321-block  9
    $$$$$:  321-block 10
    $$$$$:  321-block 11
    $$$$$:  321-block 12
    $$$$$:  321-block 13
        1:  322:  npc = EPSFs.getNonProcessableCommand();
        1:  322-block  0
        1:  322-block  1
       2*:  323:  ASSERT_EQ(npc.toString(), "/l  { rlineto } bind def");
        1:  323-block  0
    %%%%%:  323-block  1
    %%%%%:  323-block  2
    %%%%%:  323-block  3
    %%%%%:  323-block  4
        1:  323-block  5
        1:  323-block  6
    $$$$$:  323-block  7
    $$$$$:  323-block  8
    $$$$$:  323-block  9
    $$$$$:  323-block 10
    $$$$$:  323-block 11
    $$$$$:  323-block 12
        1:  324:  npc = EPSFs.getNonProcessableCommand();
        1:  324-block  0
        1:  324-block  1
       2*:  325:  ASSERT_EQ(npc.toString(), "");
        1:  325-block  0
    %%%%%:  325-block  1
    %%%%%:  325-block  2
    %%%%%:  325-block  3
    %%%%%:  325-block  4
        1:  325-block  5
        1:  325-block  6
    $$$$$:  325-block  7
    $$$$$:  325-block  8
    $$$$$:  325-block  9
    $$$$$:  325-block 10
    $$$$$:  325-block 11
    $$$$$:  325-block 12
        1:  326:  npc = EPSFs.getNonProcessableCommand();
        1:  326-block  0
        1:  326-block  1
       2*:  327:  ASSERT_EQ(npc.toString(), "newpath");
        1:  327-block  0
    %%%%%:  327-block  1
    %%%%%:  327-block  2
    %%%%%:  327-block  3
    %%%%%:  327-block  4
        1:  327-block  5
        1:  327-block  6
    $$$$$:  327-block  7
    $$$$$:  327-block  8
    $$$$$:  327-block  9
    $$$$$:  327-block 10
    $$$$$:  327-block 11
    $$$$$:  327-block 12
        1:  328:  RelativeCommandVar rcv = EPSFs.getRelativeCommandVar();
        1:  328-block  0
    $$$$$:  328-block  1
        1:  329:  RightLineCommand* rolc = std::get_if<RightLineCommand>(&rcv);
        1:  329-block  0
       1*:  330:  ASSERT_TRUE(rolc);
    %%%%%:  330-block  0
    %%%%%:  330-block  1
    %%%%%:  330-block  2
    %%%%%:  330-block  3
    %%%%%:  330-block  4
        1:  330-block  5
        1:  330-block  6
    $$$$$:  330-block  7
    $$$$$:  330-block  8
    $$$$$:  330-block  9
    $$$$$:  330-block 10
    $$$$$:  330-block 11
    $$$$$:  330-block 12
    $$$$$:  330-block 13
       2*:  331:  ASSERT_EQ(rolc->toString(), "10.03 2.46 l");
        1:  331-block  0
        1:  331-block  1
    %%%%%:  331-block  2
    %%%%%:  331-block  3
    %%%%%:  331-block  4
    %%%%%:  331-block  5
        1:  331-block  6
        1:  331-block  7
    $$$$$:  331-block  8
    $$$$$:  331-block  9
    $$$$$:  331-block 10
    $$$$$:  331-block 11
    $$$$$:  331-block 12
    $$$$$:  331-block 13
        1:  332:  rcv = EPSFs.getRelativeCommandVar();
        1:  332-block  0
        1:  332-block  1
        1:  333:  LeftLineCommand* lolc = std::get_if<LeftLineCommand>(&rcv);
       1*:  334:  ASSERT_TRUE(lolc);
    %%%%%:  334-block  0
    %%%%%:  334-block  1
    %%%%%:  334-block  2
    %%%%%:  334-block  3
    %%%%%:  334-block  4
        1:  334-block  5
        1:  334-block  6
    $$$$$:  334-block  7
    $$$$$:  334-block  8
    $$$$$:  334-block  9
    $$$$$:  334-block 10
    $$$$$:  334-block 11
    $$$$$:  334-block 12
    $$$$$:  334-block 13
       2*:  335:  ASSERT_EQ(lolc->toString(), "164.72 100.9 lineto");
        1:  335-block  0
        1:  335-block  1
    %%%%%:  335-block  2
    %%%%%:  335-block  3
    %%%%%:  335-block  4
    %%%%%:  335-block  5
        1:  335-block  6
        1:  335-block  7
    $$$$$:  335-block  8
    $$$$$:  335-block  9
    $$$$$:  335-block 10
    $$$$$:  335-block 11
    $$$$$:  335-block 12
    $$$$$:  335-block 13
        1:  336:  AbsoluteCommandVar acv = EPSFs.getAbsoluteCommandVar();
        1:  336-block  0
    $$$$$:  336-block  1
        1:  337:  PointCommand* pc = std::get_if<PointCommand>(&acv);
        1:  337-block  0
       1*:  338:  ASSERT_TRUE(pc);
    %%%%%:  338-block  0
    %%%%%:  338-block  1
    %%%%%:  338-block  2
    %%%%%:  338-block  3
    %%%%%:  338-block  4
        1:  338-block  5
        1:  338-block  6
    $$$$$:  338-block  7
    $$$$$:  338-block  8
    $$$$$:  338-block  9
    $$$$$:  338-block 10
    $$$$$:  338-block 11
    $$$$$:  338-block 12
    $$$$$:  338-block 13
       2*:  339:  ASSERT_EQ(pc->toString(), "234.12 374.92 1 1 r p2");
        1:  339-block  0
        1:  339-block  1
    %%%%%:  339-block  2
    %%%%%:  339-block  3
    %%%%%:  339-block  4
    %%%%%:  339-block  5
        1:  339-block  6
        1:  339-block  7
    $$$$$:  339-block  8
    $$$$$:  339-block  9
    $$$$$:  339-block 10
    $$$$$:  339-block 11
    $$$$$:  339-block 12
    $$$$$:  339-block 13
        1:  340:}
        1:  340-block  0
        1:  340-block  1
        1:  340-block  2
        1:  340-block  3
        1:  340-block  4
        1:  340-block  5
    $$$$$:  340-block  6
    $$$$$:  340-block  7
    $$$$$:  340-block  8
------------------
        -:  341:
        4:  342:TEST(EPSFileToolsTest, TestGetRelativeCommandVarWhenFileIsEnd) {
        -:  343:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  344:                       "%%BoundingBox: 0 0 302 302\n"
        -:  345:                       "%%EndComments\n"
        -:  346:                       "5.52 1.50 l\n"
        1:  347:                       "164.72 100.90 lineto\n";
        -:  348:
        1:  349:    std::istringstream iss(data);
        1:  350:    EPSInFile EPSFs(iss);
        1:  351:    EPSFs.getHeader();
        3:  352:    for (int i = 1; i < 3; i++)
        2:  353:        EPSFs.getRelativeCommandVar();
       1*:  354:    ASSERT_ANY_THROW(EPSFs.getRelativeCommandVar());
        1:  355:}
------------------
_ZN60EPSFileToolsTest_TestGetRelativeCommandVarWhenFileIsEnd_TestC2Ev:
        1:  342:TEST(EPSFileToolsTest, TestGetRelativeCommandVarWhenFileIsEnd) {
        1:  342-block  0
------------------
_ZN60EPSFileToolsTest_TestGetRelativeCommandVarWhenFileIsEnd_TestD0Ev:
        1:  342:TEST(EPSFileToolsTest, TestGetRelativeCommandVarWhenFileIsEnd) {
        1:  342-block  0
------------------
_ZN60EPSFileToolsTest_TestGetRelativeCommandVarWhenFileIsEnd_TestD2Ev:
        1:  342:TEST(EPSFileToolsTest, TestGetRelativeCommandVarWhenFileIsEnd) {
        1:  342-block  0
------------------
_ZN60EPSFileToolsTest_TestGetRelativeCommandVarWhenFileIsEnd_Test8TestBodyEv:
        1:  342:TEST(EPSFileToolsTest, TestGetRelativeCommandVarWhenFileIsEnd) {
        -:  343:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  344:                       "%%BoundingBox: 0 0 302 302\n"
        -:  345:                       "%%EndComments\n"
        -:  346:                       "5.52 1.50 l\n"
        1:  347:                       "164.72 100.90 lineto\n";
        1:  347-block  0
    $$$$$:  347-block  1
        -:  348:
        1:  349:    std::istringstream iss(data);
        1:  350:    EPSInFile EPSFs(iss);
        1:  350-block  0
        1:  351:    EPSFs.getHeader();
        1:  351-block  0
        3:  352:    for (int i = 1; i < 3; i++)
        3:  352-block  0
        2:  353:        EPSFs.getRelativeCommandVar();
        2:  353-block  0
        2:  353-block  1
       1*:  354:    ASSERT_ANY_THROW(EPSFs.getRelativeCommandVar());
        1:  354-block  0
        1:  354-block  1
        1:  354-block  2
        1:  354-block  3
        1:  354-block  4
    %%%%%:  354-block  5
        1:  354-block  6
    %%%%%:  354-block  7
    %%%%%:  354-block  8
    %%%%%:  354-block  9
    %%%%%:  354-block 10
    %%%%%:  354-block 11
        1:  354-block 12
        1:  354-block 13
    $$$$$:  354-block 14
    $$$$$:  354-block 15
    $$$$$:  354-block 16
    $$$$$:  354-block 17
        1:  355:}
        1:  355-block  0
        1:  355-block  1
        1:  355-block  2
        1:  355-block  3
    $$$$$:  355-block  4
    $$$$$:  355-block  5
------------------
        -:  356:
        4:  357:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarWhenFileIsEnd) {
        -:  358:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  359:                       "%%BoundingBox: 0 0 302 302\n"
        -:  360:                       "%%EndComments\n"
        -:  361:                       "234.12 374.92 1.00 1.00 r p2\n"
        1:  362:                       "67.47 72.08 m\n";
        -:  363:
        1:  364:    std::istringstream iss(data);
        1:  365:    EPSInFile EPSFs(iss);
        1:  366:    EPSFs.getHeader();
        3:  367:    for (int i = 1; i < 3; i++)
        2:  368:        EPSFs.getAbsoluteCommandVar();
       1*:  369:    ASSERT_ANY_THROW(EPSFs.getAbsoluteCommandVar());
        1:  370:}
------------------
_ZN60EPSFileToolsTest_TestGetAbsoluteCommandVarWhenFileIsEnd_TestC2Ev:
        1:  357:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarWhenFileIsEnd) {
        1:  357-block  0
------------------
_ZN60EPSFileToolsTest_TestGetAbsoluteCommandVarWhenFileIsEnd_TestD0Ev:
        1:  357:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarWhenFileIsEnd) {
        1:  357-block  0
------------------
_ZN60EPSFileToolsTest_TestGetAbsoluteCommandVarWhenFileIsEnd_TestD2Ev:
        1:  357:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarWhenFileIsEnd) {
        1:  357-block  0
------------------
_ZN60EPSFileToolsTest_TestGetAbsoluteCommandVarWhenFileIsEnd_Test8TestBodyEv:
        1:  357:TEST(EPSFileToolsTest, TestGetAbsoluteCommandVarWhenFileIsEnd) {
        -:  358:    std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  359:                       "%%BoundingBox: 0 0 302 302\n"
        -:  360:                       "%%EndComments\n"
        -:  361:                       "234.12 374.92 1.00 1.00 r p2\n"
        1:  362:                       "67.47 72.08 m\n";
        1:  362-block  0
    $$$$$:  362-block  1
        -:  363:
        1:  364:    std::istringstream iss(data);
        1:  365:    EPSInFile EPSFs(iss);
        1:  365-block  0
        1:  366:    EPSFs.getHeader();
        1:  366-block  0
        3:  367:    for (int i = 1; i < 3; i++)
        3:  367-block  0
        2:  368:        EPSFs.getAbsoluteCommandVar();
        2:  368-block  0
        2:  368-block  1
       1*:  369:    ASSERT_ANY_THROW(EPSFs.getAbsoluteCommandVar());
        1:  369-block  0
        1:  369-block  1
        1:  369-block  2
        1:  369-block  3
        1:  369-block  4
    %%%%%:  369-block  5
        1:  369-block  6
    %%%%%:  369-block  7
    %%%%%:  369-block  8
    %%%%%:  369-block  9
    %%%%%:  369-block 10
    %%%%%:  369-block 11
        1:  369-block 12
        1:  369-block 13
    $$$$$:  369-block 14
    $$$$$:  369-block 15
    $$$$$:  369-block 16
    $$$$$:  369-block 17
        1:  370:}
        1:  370-block  0
        1:  370-block  1
        1:  370-block  2
        1:  370-block  3
    $$$$$:  370-block  4
    $$$$$:  370-block  5
------------------
        -:  371:
        4:  372:TEST(EPSFileToolsTest, TestGetNonProcessableCommandWhenFileIsEnd) {
        -:  373:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  374:                     "%%BoundingBox: 0 0 302 302\n"
        -:  375:                     "%%EndComments\n"
        -:  376:                     "/m   { moveto } bind def\n"
        1:  377:                     "/l  { rlineto } bind def\n";
        -:  378:
        1:  379:  std::istringstream iss(data);
        1:  380:  EPSInFile EPSFs(iss);
        1:  381:  EPSFs.getHeader();
        3:  382:  for (int i = 1; i < 3; i++)
        2:  383:    EPSFs.getNonProcessableCommand();
       1*:  384:  ASSERT_ANY_THROW(EPSFs.getNonProcessableCommand());
        1:  385:}
------------------
_ZN63EPSFileToolsTest_TestGetNonProcessableCommandWhenFileIsEnd_TestC2Ev:
        1:  372:TEST(EPSFileToolsTest, TestGetNonProcessableCommandWhenFileIsEnd) {
        1:  372-block  0
------------------
_ZN63EPSFileToolsTest_TestGetNonProcessableCommandWhenFileIsEnd_TestD0Ev:
        1:  372:TEST(EPSFileToolsTest, TestGetNonProcessableCommandWhenFileIsEnd) {
        1:  372-block  0
------------------
_ZN63EPSFileToolsTest_TestGetNonProcessableCommandWhenFileIsEnd_TestD2Ev:
        1:  372:TEST(EPSFileToolsTest, TestGetNonProcessableCommandWhenFileIsEnd) {
        1:  372-block  0
------------------
_ZN63EPSFileToolsTest_TestGetNonProcessableCommandWhenFileIsEnd_Test8TestBodyEv:
        1:  372:TEST(EPSFileToolsTest, TestGetNonProcessableCommandWhenFileIsEnd) {
        -:  373:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  374:                     "%%BoundingBox: 0 0 302 302\n"
        -:  375:                     "%%EndComments\n"
        -:  376:                     "/m   { moveto } bind def\n"
        1:  377:                     "/l  { rlineto } bind def\n";
        1:  377-block  0
    $$$$$:  377-block  1
        -:  378:
        1:  379:  std::istringstream iss(data);
        1:  380:  EPSInFile EPSFs(iss);
        1:  380-block  0
        1:  381:  EPSFs.getHeader();
        1:  381-block  0
        3:  382:  for (int i = 1; i < 3; i++)
        3:  382-block  0
        2:  383:    EPSFs.getNonProcessableCommand();
        2:  383-block  0
        2:  383-block  1
       1*:  384:  ASSERT_ANY_THROW(EPSFs.getNonProcessableCommand());
        1:  384-block  0
        1:  384-block  1
        1:  384-block  2
        1:  384-block  3
        1:  384-block  4
    %%%%%:  384-block  5
        1:  384-block  6
    %%%%%:  384-block  7
    %%%%%:  384-block  8
    %%%%%:  384-block  9
    %%%%%:  384-block 10
    %%%%%:  384-block 11
        1:  384-block 12
        1:  384-block 13
    $$$$$:  384-block 14
    $$$$$:  384-block 15
    $$$$$:  384-block 16
    $$$$$:  384-block 17
        1:  385:}
        1:  385-block  0
        1:  385-block  1
        1:  385-block  2
        1:  385-block  3
    $$$$$:  385-block  4
    $$$$$:  385-block  5
------------------
        -:  386:
        4:  387:TEST(EPSFileToolsTest, ThrowExceptionCommandReadWithoutHeaderRead) {
        -:  388:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  389:                     "%%DocumentNeededResources: font Courier\n"
        -:  390:                     "%%Title: R Graphics Output\n"
        -:  391:                     "%%Creator: R Software\n"
        -:  392:                     "%%Pages: (atend)\n"
        -:  393:                     "%%BoundingBox: 0 0 302 302\n"
        -:  394:                     "%%EndComments\n"
        -:  395:                     "67.47 72.08 m\n"
        1:  396:                     "2.36 0.66 l\n";
        -:  397:
        1:  398:  std::istringstream iss(data);
        1:  399:  EPSInFile EPSFs(iss);
       1*:  400:  ASSERT_ANY_THROW(EPSFs.getAbsoluteCommandVar());
        1:  401:}
------------------
_ZN64EPSFileToolsTest_ThrowExceptionCommandReadWithoutHeaderRead_TestC2Ev:
        1:  387:TEST(EPSFileToolsTest, ThrowExceptionCommandReadWithoutHeaderRead) {
        1:  387-block  0
------------------
_ZN64EPSFileToolsTest_ThrowExceptionCommandReadWithoutHeaderRead_TestD0Ev:
        1:  387:TEST(EPSFileToolsTest, ThrowExceptionCommandReadWithoutHeaderRead) {
        1:  387-block  0
------------------
_ZN64EPSFileToolsTest_ThrowExceptionCommandReadWithoutHeaderRead_TestD2Ev:
        1:  387:TEST(EPSFileToolsTest, ThrowExceptionCommandReadWithoutHeaderRead) {
        1:  387-block  0
------------------
_ZN64EPSFileToolsTest_ThrowExceptionCommandReadWithoutHeaderRead_Test8TestBodyEv:
        1:  387:TEST(EPSFileToolsTest, ThrowExceptionCommandReadWithoutHeaderRead) {
        -:  388:  std::string data = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  389:                     "%%DocumentNeededResources: font Courier\n"
        -:  390:                     "%%Title: R Graphics Output\n"
        -:  391:                     "%%Creator: R Software\n"
        -:  392:                     "%%Pages: (atend)\n"
        -:  393:                     "%%BoundingBox: 0 0 302 302\n"
        -:  394:                     "%%EndComments\n"
        -:  395:                     "67.47 72.08 m\n"
        1:  396:                     "2.36 0.66 l\n";
        1:  396-block  0
    $$$$$:  396-block  1
        -:  397:
        1:  398:  std::istringstream iss(data);
        1:  399:  EPSInFile EPSFs(iss);
        1:  399-block  0
       1*:  400:  ASSERT_ANY_THROW(EPSFs.getAbsoluteCommandVar());
        1:  400-block  0
        1:  400-block  1
        1:  400-block  2
        1:  400-block  3
    %%%%%:  400-block  4
        1:  400-block  5
    %%%%%:  400-block  6
    %%%%%:  400-block  7
    %%%%%:  400-block  8
    %%%%%:  400-block  9
    %%%%%:  400-block 10
        1:  400-block 11
        1:  400-block 12
    $$$$$:  400-block 13
    $$$$$:  400-block 14
    $$$$$:  400-block 15
    $$$$$:  400-block 16
        1:  401:}
        1:  401-block  0
        1:  401-block  1
        1:  401-block  2
        1:  401-block  3
    $$$$$:  401-block  4
    $$$$$:  401-block  5
------------------
        -:  402:
        4:  403:TEST(EPSFileToolsTest, EPSOutFileExceptionHeaderDoubleWrite) {
        -:  404:  std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  405:                          "%%BoundingBox: 0 0 302 302\n"
        1:  406:                          "%%EndComments\n";
        1:  407:  Header header(headerStr);
        2:  408:  std::ostringstream oss("");
        1:  409:  EPSOutFile EPSFs(oss);
        1:  410:  EPSFs.putHeader(header);
       1*:  411:  ASSERT_ANY_THROW(EPSFs.putHeader(header));
        1:  412:}
------------------
_ZN58EPSFileToolsTest_EPSOutFileExceptionHeaderDoubleWrite_TestC2Ev:
        1:  403:TEST(EPSFileToolsTest, EPSOutFileExceptionHeaderDoubleWrite) {
        1:  403-block  0
------------------
_ZN58EPSFileToolsTest_EPSOutFileExceptionHeaderDoubleWrite_TestD0Ev:
        1:  403:TEST(EPSFileToolsTest, EPSOutFileExceptionHeaderDoubleWrite) {
        1:  403-block  0
------------------
_ZN58EPSFileToolsTest_EPSOutFileExceptionHeaderDoubleWrite_TestD2Ev:
        1:  403:TEST(EPSFileToolsTest, EPSOutFileExceptionHeaderDoubleWrite) {
        1:  403-block  0
------------------
_ZN58EPSFileToolsTest_EPSOutFileExceptionHeaderDoubleWrite_Test8TestBodyEv:
        1:  403:TEST(EPSFileToolsTest, EPSOutFileExceptionHeaderDoubleWrite) {
        -:  404:  std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  405:                          "%%BoundingBox: 0 0 302 302\n"
        1:  406:                          "%%EndComments\n";
        1:  406-block  0
    $$$$$:  406-block  1
        1:  407:  Header header(headerStr);
        2:  408:  std::ostringstream oss("");
        1:  408-block  0
        1:  408-block  1
    $$$$$:  408-block  2
    $$$$$:  408-block  3
        1:  409:  EPSOutFile EPSFs(oss);
        1:  410:  EPSFs.putHeader(header);
       1*:  411:  ASSERT_ANY_THROW(EPSFs.putHeader(header));
        1:  411-block  0
        1:  411-block  1
        1:  411-block  2
        1:  411-block  3
        1:  411-block  4
        1:  411-block  5
    %%%%%:  411-block  6
    %%%%%:  411-block  7
    %%%%%:  411-block  8
    %%%%%:  411-block  9
    %%%%%:  411-block 10
        1:  411-block 11
        1:  411-block 12
    $$$$$:  411-block 13
    $$$$$:  411-block 14
    $$$$$:  411-block 15
    $$$$$:  411-block 16
        1:  412:}
        1:  412-block  0
        1:  412-block  1
        1:  412-block  2
        1:  412-block  3
        1:  412-block  4
        1:  412-block  5
    $$$$$:  412-block  6
    $$$$$:  412-block  7
    $$$$$:  412-block  8
------------------
        -:  413:
        4:  414:TEST(EPSFileToolsTest, EPSOutFileExceptionWriteWithoutHeader) {
        2:  415:  std::ostringstream oss("");
        1:  416:  EPSOutFile EPSFs(oss);
        2:  417:  NonProcessableCommand c("testCommand");
       1*:  418:  ASSERT_ANY_THROW(EPSFs.putCommand(c));
        1:  419:}
------------------
_ZN59EPSFileToolsTest_EPSOutFileExceptionWriteWithoutHeader_TestC2Ev:
        1:  414:TEST(EPSFileToolsTest, EPSOutFileExceptionWriteWithoutHeader) {
        1:  414-block  0
------------------
_ZN59EPSFileToolsTest_EPSOutFileExceptionWriteWithoutHeader_TestD0Ev:
        1:  414:TEST(EPSFileToolsTest, EPSOutFileExceptionWriteWithoutHeader) {
        1:  414-block  0
------------------
_ZN59EPSFileToolsTest_EPSOutFileExceptionWriteWithoutHeader_TestD2Ev:
        1:  414:TEST(EPSFileToolsTest, EPSOutFileExceptionWriteWithoutHeader) {
        1:  414-block  0
------------------
_ZN59EPSFileToolsTest_EPSOutFileExceptionWriteWithoutHeader_Test8TestBodyEv:
        1:  414:TEST(EPSFileToolsTest, EPSOutFileExceptionWriteWithoutHeader) {
        2:  415:  std::ostringstream oss("");
        1:  415-block  0
        1:  415-block  1
    $$$$$:  415-block  2
    $$$$$:  415-block  3
        1:  416:  EPSOutFile EPSFs(oss);
        2:  417:  NonProcessableCommand c("testCommand");
        1:  417-block  0
    $$$$$:  417-block  1
    $$$$$:  417-block  2
       1*:  418:  ASSERT_ANY_THROW(EPSFs.putCommand(c));
        1:  418-block  0
        1:  418-block  1
        1:  418-block  2
        1:  418-block  3
        1:  418-block  4
    %%%%%:  418-block  5
    %%%%%:  418-block  6
    %%%%%:  418-block  7
    %%%%%:  418-block  8
    %%%%%:  418-block  9
        1:  418-block 10
        1:  418-block 11
    $$$$$:  418-block 12
    $$$$$:  418-block 13
    $$$$$:  418-block 14
    $$$$$:  418-block 15
        1:  419:}
        1:  419-block  0
        1:  419-block  1
        1:  419-block  2
        1:  419-block  3
    $$$$$:  419-block  4
    $$$$$:  419-block  5
------------------
        -:  420:
        4:  421:TEST(EPSFileToolsTest, EPSOutFileWriteHeader) {
        -:  422:  std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  423:                          "%%BoundingBox: 0 0 302 302\n"
        1:  424:                          "%%EndComments\n";
        -:  425:
        1:  426:  Header header(headerStr);
        2:  427:  std::ostringstream oss("");
        1:  428:  EPSOutFile EPSFs(oss);
        1:  429:  EPSFs.putHeader(header);
       2*:  430:  ASSERT_EQ(oss.str(), headerStr);
        1:  431:}
------------------
_ZN43EPSFileToolsTest_EPSOutFileWriteHeader_TestC2Ev:
        1:  421:TEST(EPSFileToolsTest, EPSOutFileWriteHeader) {
        1:  421-block  0
------------------
_ZN43EPSFileToolsTest_EPSOutFileWriteHeader_TestD0Ev:
        1:  421:TEST(EPSFileToolsTest, EPSOutFileWriteHeader) {
        1:  421-block  0
------------------
_ZN43EPSFileToolsTest_EPSOutFileWriteHeader_TestD2Ev:
        1:  421:TEST(EPSFileToolsTest, EPSOutFileWriteHeader) {
        1:  421-block  0
------------------
_ZN43EPSFileToolsTest_EPSOutFileWriteHeader_Test8TestBodyEv:
        1:  421:TEST(EPSFileToolsTest, EPSOutFileWriteHeader) {
        -:  422:  std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  423:                          "%%BoundingBox: 0 0 302 302\n"
        1:  424:                          "%%EndComments\n";
        1:  424-block  0
    $$$$$:  424-block  1
        -:  425:
        1:  426:  Header header(headerStr);
        2:  427:  std::ostringstream oss("");
        1:  427-block  0
        1:  427-block  1
    $$$$$:  427-block  2
    $$$$$:  427-block  3
        1:  428:  EPSOutFile EPSFs(oss);
        1:  429:  EPSFs.putHeader(header);
       2*:  430:  ASSERT_EQ(oss.str(), headerStr);
        1:  430-block  0
        1:  430-block  1
    %%%%%:  430-block  2
    %%%%%:  430-block  3
    %%%%%:  430-block  4
    %%%%%:  430-block  5
        1:  430-block  6
        1:  430-block  7
    $$$$$:  430-block  8
    $$$$$:  430-block  9
    $$$$$:  430-block 10
    $$$$$:  430-block 11
    $$$$$:  430-block 12
    $$$$$:  430-block 13
        1:  431:}
        1:  431-block  0
        1:  431-block  1
        1:  431-block  2
        1:  431-block  3
        1:  431-block  4
        1:  431-block  5
    $$$$$:  431-block  6
    $$$$$:  431-block  7
    $$$$$:  431-block  8
------------------
        -:  432:
        4:  433:TEST(EPSFileToolsTest, EPSOutFileWriteHeaderAndCommands) {
        -:  434:  std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  435:                          "%%BoundingBox: 0 0 302 302\n"
        1:  436:                          "%%EndComments\n";
        -:  437:
        -:  438:  std::string outputStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  439:                          "%%BoundingBox: 0 0 302 302\n"
        -:  440:                          "%%EndComments\n"
        -:  441:                          "4.2 6.7 lineto\n"
        -:  442:                          "5.2 7.7 l\n"
        1:  443:                          "9.5 7.5 1 1 r p2\n";
        -:  444:
        1:  445:  Header header(headerStr);
        2:  446:  NonProcessableCommand npc("test");
        1:  447:  LeftLineCommand lolc(CoordinateValue(4.2, 6.7));
        1:  448:  RightLineCommand rolc(CoordinateValue(5.2, 7.7));
        1:  449:  PointCommand pc(CoordinateValue(9.5, 7.5));
        2:  450:  std::ostringstream oss("");
        1:  451:  EPSOutFile EPSFs(oss);
        1:  452:  EPSFs.putHeader(header);
        1:  453:  EPSFs.putCommand(lolc);
        1:  454:  EPSFs.putCommand(rolc);
        1:  455:  EPSFs.putCommand(pc);
       2*:  456:  ASSERT_EQ(oss.str(), outputStr);
        1:  457:}
------------------
_ZN54EPSFileToolsTest_EPSOutFileWriteHeaderAndCommands_TestC2Ev:
        1:  433:TEST(EPSFileToolsTest, EPSOutFileWriteHeaderAndCommands) {
        1:  433-block  0
------------------
_ZN54EPSFileToolsTest_EPSOutFileWriteHeaderAndCommands_TestD0Ev:
        1:  433:TEST(EPSFileToolsTest, EPSOutFileWriteHeaderAndCommands) {
        1:  433-block  0
------------------
_ZN54EPSFileToolsTest_EPSOutFileWriteHeaderAndCommands_TestD2Ev:
        1:  433:TEST(EPSFileToolsTest, EPSOutFileWriteHeaderAndCommands) {
        1:  433-block  0
------------------
_ZN54EPSFileToolsTest_EPSOutFileWriteHeaderAndCommands_Test8TestBodyEv:
        1:  433:TEST(EPSFileToolsTest, EPSOutFileWriteHeaderAndCommands) {
        -:  434:  std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  435:                          "%%BoundingBox: 0 0 302 302\n"
        1:  436:                          "%%EndComments\n";
        1:  436-block  0
    $$$$$:  436-block  1
        -:  437:
        -:  438:  std::string outputStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  439:                          "%%BoundingBox: 0 0 302 302\n"
        -:  440:                          "%%EndComments\n"
        -:  441:                          "4.2 6.7 lineto\n"
        -:  442:                          "5.2 7.7 l\n"
        1:  443:                          "9.5 7.5 1 1 r p2\n";
    $$$$$:  443-block  0
        -:  444:
        1:  445:  Header header(headerStr);
        2:  446:  NonProcessableCommand npc("test");
        1:  446-block  0
        1:  446-block  1
    $$$$$:  446-block  2
    $$$$$:  446-block  3
        1:  447:  LeftLineCommand lolc(CoordinateValue(4.2, 6.7));
        1:  448:  RightLineCommand rolc(CoordinateValue(5.2, 7.7));
        1:  449:  PointCommand pc(CoordinateValue(9.5, 7.5));
        2:  450:  std::ostringstream oss("");
        1:  450-block  0
    $$$$$:  450-block  1
    $$$$$:  450-block  2
        1:  451:  EPSOutFile EPSFs(oss);
        1:  452:  EPSFs.putHeader(header);
        1:  453:  EPSFs.putCommand(lolc);
        1:  453-block  0
        1:  454:  EPSFs.putCommand(rolc);
        1:  454-block  0
        1:  455:  EPSFs.putCommand(pc);
        1:  455-block  0
       2*:  456:  ASSERT_EQ(oss.str(), outputStr);
        1:  456-block  0
        1:  456-block  1
    %%%%%:  456-block  2
    %%%%%:  456-block  3
    %%%%%:  456-block  4
    %%%%%:  456-block  5
        1:  456-block  6
        1:  456-block  7
    $$$$$:  456-block  8
    $$$$$:  456-block  9
    $$$$$:  456-block 10
    $$$$$:  456-block 11
    $$$$$:  456-block 12
    $$$$$:  456-block 13
        1:  457:}
        1:  457-block  0
        1:  457-block  1
        1:  457-block  2
        1:  457-block  3
        1:  457-block  4
        1:  457-block  5
        1:  457-block  6
        1:  457-block  7
        1:  457-block  8
        1:  457-block  9
        1:  457-block 10
        1:  457-block 11
        1:  457-block 12
        1:  457-block 13
        1:  457-block 14
        1:  457-block 15
    $$$$$:  457-block 16
    $$$$$:  457-block 17
    $$$$$:  457-block 18
    $$$$$:  457-block 19
    $$$$$:  457-block 20
    $$$$$:  457-block 21
    $$$$$:  457-block 22
    $$$$$:  457-block 23
------------------
        4:  458:TEST(EPSFileToolsTest, EPSOutFilePutAbsoluteBatch){
        -:  459:    std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  460:                            "%%BoundingBox: 0 0 302 302\n"
        1:  461:                            "%%EndComments\n";
        -:  462:
        -:  463:    std::string outputStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  464:                            "%%BoundingBox: 0 0 302 302\n"
        -:  465:                            "%%EndComments\n"
        -:  466:                            "2 2 1 1 r p2\n"
        1:  467:                            "3 3 m\n";
        -:  468:
        1:  469:    Header header(headerStr);
        1:  470:    AbsoluteBatch batch;
        1:  471:    batch.emplace_back(PointCommand({2,2}));
        1:  472:    batch.emplace_back(MoveCommand({3,3}));
        2:  473:    std::ostringstream oss("");
        1:  474:    EPSOutFile EPSFs(oss);
        1:  475:    EPSFs.putHeader(header);
        1:  476:    EPSFs.putBatch(batch);
       2*:  477:    ASSERT_EQ(oss.str(), outputStr);
        1:  478:}
------------------
_ZN48EPSFileToolsTest_EPSOutFilePutAbsoluteBatch_TestC2Ev:
        1:  458:TEST(EPSFileToolsTest, EPSOutFilePutAbsoluteBatch){
        1:  458-block  0
------------------
_ZN48EPSFileToolsTest_EPSOutFilePutAbsoluteBatch_TestD0Ev:
        1:  458:TEST(EPSFileToolsTest, EPSOutFilePutAbsoluteBatch){
        1:  458-block  0
------------------
_ZN48EPSFileToolsTest_EPSOutFilePutAbsoluteBatch_TestD2Ev:
        1:  458:TEST(EPSFileToolsTest, EPSOutFilePutAbsoluteBatch){
        1:  458-block  0
------------------
_ZN48EPSFileToolsTest_EPSOutFilePutAbsoluteBatch_Test8TestBodyEv:
        1:  458:TEST(EPSFileToolsTest, EPSOutFilePutAbsoluteBatch){
        -:  459:    std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  460:                            "%%BoundingBox: 0 0 302 302\n"
        1:  461:                            "%%EndComments\n";
        1:  461-block  0
    $$$$$:  461-block  1
        -:  462:
        -:  463:    std::string outputStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  464:                            "%%BoundingBox: 0 0 302 302\n"
        -:  465:                            "%%EndComments\n"
        -:  466:                            "2 2 1 1 r p2\n"
        1:  467:                            "3 3 m\n";
    $$$$$:  467-block  0
        -:  468:
        1:  469:    Header header(headerStr);
        1:  470:    AbsoluteBatch batch;
        1:  470-block  0
        1:  471:    batch.emplace_back(PointCommand({2,2}));
        1:  471-block  0
    $$$$$:  471-block  1
    $$$$$:  471-block  2
    $$$$$:  471-block  3
        1:  472:    batch.emplace_back(MoveCommand({3,3}));
        1:  472-block  0
    $$$$$:  472-block  1
    $$$$$:  472-block  2
    $$$$$:  472-block  3
        2:  473:    std::ostringstream oss("");
        1:  473-block  0
    $$$$$:  473-block  1
    $$$$$:  473-block  2
        1:  474:    EPSOutFile EPSFs(oss);
        1:  475:    EPSFs.putHeader(header);
        1:  476:    EPSFs.putBatch(batch);
        1:  476-block  0
       2*:  477:    ASSERT_EQ(oss.str(), outputStr);
        1:  477-block  0
        1:  477-block  1
    %%%%%:  477-block  2
    %%%%%:  477-block  3
    %%%%%:  477-block  4
    %%%%%:  477-block  5
        1:  477-block  6
        1:  477-block  7
    $$$$$:  477-block  8
    $$$$$:  477-block  9
    $$$$$:  477-block 10
    $$$$$:  477-block 11
    $$$$$:  477-block 12
    $$$$$:  477-block 13
        1:  478:}
        1:  478-block  0
        1:  478-block  1
        1:  478-block  2
        1:  478-block  3
        1:  478-block  4
        1:  478-block  5
        1:  478-block  6
        1:  478-block  7
        1:  478-block  8
        1:  478-block  9
    $$$$$:  478-block 10
    $$$$$:  478-block 11
    $$$$$:  478-block 12
    $$$$$:  478-block 13
    $$$$$:  478-block 14
------------------
        -:  479:
        4:  480:TEST(EPSFileToolsTest, EPSOutFilePutRelativeBatch){
        -:  481:    std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  482:                            "%%BoundingBox: 0 0 302 302\n"
        1:  483:                            "%%EndComments\n";
        -:  484:
        -:  485:    std::string outputStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  486:                            "%%BoundingBox: 0 0 302 302\n"
        -:  487:                            "%%EndComments\n"
        -:  488:                            "2 2 l\n"
        1:  489:                            "3 3 lineto\n";
        -:  490:
        1:  491:    Header header(headerStr);
        1:  492:    RelativeBatch batch;
        1:  493:    batch.emplace_back(RightLineCommand({2,2}));
        1:  494:    batch.emplace_back(LeftLineCommand({3,3}));
        2:  495:    std::ostringstream oss("");
        1:  496:    EPSOutFile EPSFs(oss);
        1:  497:    EPSFs.putHeader(header);
        1:  498:    EPSFs.putBatch(batch);
       2*:  499:    ASSERT_EQ(oss.str(), outputStr);
        1:  500:}
------------------
_ZN48EPSFileToolsTest_EPSOutFilePutRelativeBatch_TestC2Ev:
        1:  480:TEST(EPSFileToolsTest, EPSOutFilePutRelativeBatch){
        1:  480-block  0
------------------
_ZN48EPSFileToolsTest_EPSOutFilePutRelativeBatch_TestD0Ev:
        1:  480:TEST(EPSFileToolsTest, EPSOutFilePutRelativeBatch){
        1:  480-block  0
------------------
_ZN48EPSFileToolsTest_EPSOutFilePutRelativeBatch_TestD2Ev:
        1:  480:TEST(EPSFileToolsTest, EPSOutFilePutRelativeBatch){
        1:  480-block  0
------------------
_ZN48EPSFileToolsTest_EPSOutFilePutRelativeBatch_Test8TestBodyEv:
        1:  480:TEST(EPSFileToolsTest, EPSOutFilePutRelativeBatch){
        -:  481:    std::string headerStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  482:                            "%%BoundingBox: 0 0 302 302\n"
        1:  483:                            "%%EndComments\n";
        1:  483-block  0
    $$$$$:  483-block  1
        -:  484:
        -:  485:    std::string outputStr = "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  486:                            "%%BoundingBox: 0 0 302 302\n"
        -:  487:                            "%%EndComments\n"
        -:  488:                            "2 2 l\n"
        1:  489:                            "3 3 lineto\n";
    $$$$$:  489-block  0
        -:  490:
        1:  491:    Header header(headerStr);
        1:  492:    RelativeBatch batch;
        1:  492-block  0
        1:  493:    batch.emplace_back(RightLineCommand({2,2}));
        1:  493-block  0
    $$$$$:  493-block  1
    $$$$$:  493-block  2
    $$$$$:  493-block  3
        1:  494:    batch.emplace_back(LeftLineCommand({3,3}));
        1:  494-block  0
    $$$$$:  494-block  1
    $$$$$:  494-block  2
    $$$$$:  494-block  3
        2:  495:    std::ostringstream oss("");
        1:  495-block  0
    $$$$$:  495-block  1
    $$$$$:  495-block  2
        1:  496:    EPSOutFile EPSFs(oss);
        1:  497:    EPSFs.putHeader(header);
        1:  498:    EPSFs.putBatch(batch);
        1:  498-block  0
       2*:  499:    ASSERT_EQ(oss.str(), outputStr);
        1:  499-block  0
        1:  499-block  1
    %%%%%:  499-block  2
    %%%%%:  499-block  3
    %%%%%:  499-block  4
    %%%%%:  499-block  5
        1:  499-block  6
        1:  499-block  7
    $$$$$:  499-block  8
    $$$$$:  499-block  9
    $$$$$:  499-block 10
    $$$$$:  499-block 11
    $$$$$:  499-block 12
    $$$$$:  499-block 13
        1:  500:}
        1:  500-block  0
        1:  500-block  1
        1:  500-block  2
        1:  500-block  3
        1:  500-block  4
        1:  500-block  5
        1:  500-block  6
        1:  500-block  7
        1:  500-block  8
        1:  500-block  9
    $$$$$:  500-block 10
    $$$$$:  500-block 11
    $$$$$:  500-block 12
    $$$$$:  500-block 13
    $$$$$:  500-block 14
------------------
        -:  501:
        4:  502:TEST(EPSFileToolsTest, TestEpsPutStringCommandWithoutHeader){
        -:  503:
        1:  504:    RelativeBatch batch;
        1:  505:    batch.emplace_back(RightLineCommand({2,2}));
        1:  506:    batch.emplace_back(LeftLineCommand({3,3}));
        2:  507:    std::ostringstream oss("");
        1:  508:    EPSOutFile EPSFs(oss);
       1*:  509:    ASSERT_THROW(EPSFs.putBatch(batch), std::runtime_error);
        1:  510:}
------------------
_ZN58EPSFileToolsTest_TestEpsPutStringCommandWithoutHeader_TestC2Ev:
        1:  502:TEST(EPSFileToolsTest, TestEpsPutStringCommandWithoutHeader){
        1:  502-block  0
------------------
_ZN58EPSFileToolsTest_TestEpsPutStringCommandWithoutHeader_TestD0Ev:
        1:  502:TEST(EPSFileToolsTest, TestEpsPutStringCommandWithoutHeader){
        1:  502-block  0
------------------
_ZN58EPSFileToolsTest_TestEpsPutStringCommandWithoutHeader_TestD2Ev:
        1:  502:TEST(EPSFileToolsTest, TestEpsPutStringCommandWithoutHeader){
        1:  502-block  0
------------------
_ZN58EPSFileToolsTest_TestEpsPutStringCommandWithoutHeader_Test8TestBodyEv:
        1:  502:TEST(EPSFileToolsTest, TestEpsPutStringCommandWithoutHeader){
        -:  503:
        1:  504:    RelativeBatch batch;
        1:  504-block  0
        1:  505:    batch.emplace_back(RightLineCommand({2,2}));
        1:  505-block  0
    $$$$$:  505-block  1
    $$$$$:  505-block  2
    $$$$$:  505-block  3
        1:  506:    batch.emplace_back(LeftLineCommand({3,3}));
        1:  506-block  0
    $$$$$:  506-block  1
    $$$$$:  506-block  2
    $$$$$:  506-block  3
        2:  507:    std::ostringstream oss("");
        1:  507-block  0
    $$$$$:  507-block  1
    $$$$$:  507-block  2
        1:  508:    EPSOutFile EPSFs(oss);
       1*:  509:    ASSERT_THROW(EPSFs.putBatch(batch), std::runtime_error);
        1:  509-block  0
        1:  509-block  1
        1:  509-block  2
        1:  509-block  3
    %%%%%:  509-block  4
    %%%%%:  509-block  5
    %%%%%:  509-block  6
    %%%%%:  509-block  7
    %%%%%:  509-block  8
    %%%%%:  509-block  9
        1:  509-block 10
        1:  509-block 11
        1:  509-block 12
        1:  509-block 13
    $$$$$:  509-block 14
    $$$$$:  509-block 15
    $$$$$:  509-block 16
    $$$$$:  509-block 17
    $$$$$:  509-block 18
    $$$$$:  509-block 19
    $$$$$:  509-block 20
    $$$$$:  509-block 21
    $$$$$:  509-block 22
    $$$$$:  509-block 23
    $$$$$:  509-block 24
    $$$$$:  509-block 25
    $$$$$:  509-block 26
    $$$$$:  509-block 27
    $$$$$:  509-block 28
    $$$$$:  509-block 29
    $$$$$:  509-block 30
    $$$$$:  509-block 31
        1:  510:}
        1:  510-block  0
        1:  510-block  1
        1:  510-block  2
        1:  510-block  3
    $$$$$:  510-block  4
    $$$$$:  510-block  5
------------------
        -:  511:
        4:  512:TEST(EPSFileToolsTest, TestStripCommandSignatureOnlySignature){
        -:  513:    std::istringstream iss ( "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  514:                            "%%BoundingBox: 0 0 302 302\n"
        -:  515:                            "%%EndComments\n"
        2:  516:                            "l");
        -:  517:
        1:  518:    EPSInFile eps(iss);
        1:  519:    eps.getHeader();
       1*:  520:    ASSERT_TRUE(eps.isNextRelative());
        -:  521:
        -:  522:
        1:  523:}
------------------
_ZN60EPSFileToolsTest_TestStripCommandSignatureOnlySignature_TestC2Ev:
        1:  512:TEST(EPSFileToolsTest, TestStripCommandSignatureOnlySignature){
        1:  512-block  0
------------------
_ZN60EPSFileToolsTest_TestStripCommandSignatureOnlySignature_TestD0Ev:
        1:  512:TEST(EPSFileToolsTest, TestStripCommandSignatureOnlySignature){
        1:  512-block  0
------------------
_ZN60EPSFileToolsTest_TestStripCommandSignatureOnlySignature_TestD2Ev:
        1:  512:TEST(EPSFileToolsTest, TestStripCommandSignatureOnlySignature){
        1:  512-block  0
------------------
_ZN60EPSFileToolsTest_TestStripCommandSignatureOnlySignature_Test8TestBodyEv:
        1:  512:TEST(EPSFileToolsTest, TestStripCommandSignatureOnlySignature){
        -:  513:    std::istringstream iss ( "%!PS-Adobe-3.0 EPSF-3.0\n"
        -:  514:                            "%%BoundingBox: 0 0 302 302\n"
        -:  515:                            "%%EndComments\n"
        2:  516:                            "l");
        1:  516-block  0
        1:  516-block  1
    $$$$$:  516-block  2
    $$$$$:  516-block  3
        -:  517:
        1:  518:    EPSInFile eps(iss);
        1:  519:    eps.getHeader();
        1:  519-block  0
       1*:  520:    ASSERT_TRUE(eps.isNextRelative());
        1:  520-block  0
    %%%%%:  520-block  1
    %%%%%:  520-block  2
    %%%%%:  520-block  3
    %%%%%:  520-block  4
    %%%%%:  520-block  5
        1:  520-block  6
        1:  520-block  7
    $$$$$:  520-block  8
    $$$$$:  520-block  9
    $$$$$:  520-block 10
    $$$$$:  520-block 11
    $$$$$:  520-block 12
    $$$$$:  520-block 13
    $$$$$:  520-block 14
        -:  521:
        -:  522:
        1:  523:}
        1:  523-block  0
        1:  523-block  1
    $$$$$:  523-block  2
------------------
        1:  524:int main(int argc, char **argv) {
        1:  525:  ::testing::InitGoogleTest(&argc, argv);
        1:  525-block  0
        1:  526:  return RUN_ALL_TESTS();
        -:  527:}

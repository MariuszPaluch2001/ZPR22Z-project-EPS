        -:    0:Source:/usr/include/c++/11/variant
        -:    0:Graph:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/EPSFileToolsTest.dir/EPSFileToolsTest.cc.gcno
        -:    0:Data:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/EPSFileToolsTest.dir/EPSFileToolsTest.cc.gcda
        -:    0:Runs:1
        -:    1:// <variant> -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2016-2021 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file variant
        -:   26: *  This is the `<variant>` C++ Library header.
        -:   27: */
        -:   28:
        -:   29:#ifndef _GLIBCXX_VARIANT
        -:   30:#define _GLIBCXX_VARIANT 1
        -:   31:
        -:   32:#pragma GCC system_header
        -:   33:
        -:   34:#if __cplusplus >= 201703L
        -:   35:
        -:   36:#include <type_traits>
        -:   37:#include <utility>
        -:   38:#include <bits/enable_special_members.h>
        -:   39:#include <bits/functexcept.h>
        -:   40:#include <bits/move.h>
        -:   41:#include <bits/functional_hash.h>
        -:   42:#include <bits/invoke.h>
        -:   43:#include <ext/aligned_buffer.h>
        -:   44:#include <bits/parse_numbers.h>
        -:   45:#include <bits/stl_iterator_base_types.h>
        -:   46:#include <bits/stl_iterator_base_funcs.h>
        -:   47:#include <bits/stl_construct.h>
        -:   48:#if __cplusplus > 201703L
        -:   49:# include <compare>
        -:   50:#endif
        -:   51:
        -:   52:namespace std _GLIBCXX_VISIBILITY(default)
        -:   53:{
        -:   54:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   55:
        -:   56:namespace __detail
        -:   57:{
        -:   58:namespace __variant
        -:   59:{
        -:   60:  template<size_t _Np, typename... _Types>
        -:   61:    struct _Nth_type;
        -:   62:
        -:   63:  template<size_t _Np, typename _First, typename... _Rest>
        -:   64:    struct _Nth_type<_Np, _First, _Rest...>
        -:   65:    : _Nth_type<_Np-1, _Rest...> { };
        -:   66:
        -:   67:  template<typename _First, typename... _Rest>
        -:   68:    struct _Nth_type<0, _First, _Rest...>
        -:   69:    { using type = _First; };
        -:   70:
        -:   71:} // namespace __variant
        -:   72:} // namespace __detail
        -:   73:
        -:   74:#define __cpp_lib_variant 202102L
        -:   75:
        -:   76:  template<typename... _Types> class tuple;
        -:   77:  template<typename... _Types> class variant;
        -:   78:  template <typename> struct hash;
        -:   79:
        -:   80:  template<typename _Variant>
        -:   81:    struct variant_size;
        -:   82:
        -:   83:  template<typename _Variant>
        -:   84:    struct variant_size<const _Variant> : variant_size<_Variant> {};
        -:   85:
        -:   86:  template<typename _Variant>
        -:   87:    struct variant_size<volatile _Variant> : variant_size<_Variant> {};
        -:   88:
        -:   89:  template<typename _Variant>
        -:   90:    struct variant_size<const volatile _Variant> : variant_size<_Variant> {};
        -:   91:
        -:   92:  template<typename... _Types>
        -:   93:    struct variant_size<variant<_Types...>>
        -:   94:    : std::integral_constant<size_t, sizeof...(_Types)> {};
        -:   95:
        -:   96:  template<typename _Variant>
        -:   97:    inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
        -:   98:
        -:   99:  template<size_t _Np, typename _Variant>
        -:  100:    struct variant_alternative;
        -:  101:
        -:  102:  template<size_t _Np, typename _First, typename... _Rest>
        -:  103:    struct variant_alternative<_Np, variant<_First, _Rest...>>
        -:  104:    : variant_alternative<_Np-1, variant<_Rest...>> {};
        -:  105:
        -:  106:  template<typename _First, typename... _Rest>
        -:  107:    struct variant_alternative<0, variant<_First, _Rest...>>
        -:  108:    { using type = _First; };
        -:  109:
        -:  110:  template<size_t _Np, typename _Variant>
        -:  111:    using variant_alternative_t =
        -:  112:      typename variant_alternative<_Np, _Variant>::type;
        -:  113:
        -:  114:  template<size_t _Np, typename _Variant>
        -:  115:    struct variant_alternative<_Np, const _Variant>
        -:  116:    { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };
        -:  117:
        -:  118:  template<size_t _Np, typename _Variant>
        -:  119:    struct variant_alternative<_Np, volatile _Variant>
        -:  120:    { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };
        -:  121:
        -:  122:  template<size_t _Np, typename _Variant>
        -:  123:    struct variant_alternative<_Np, const volatile _Variant>
        -:  124:    { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };
        -:  125:
        -:  126:  inline constexpr size_t variant_npos = -1;
        -:  127:
        -:  128:  template<size_t _Np, typename... _Types>
        -:  129:    constexpr variant_alternative_t<_Np, variant<_Types...>>&
        -:  130:    get(variant<_Types...>&);
        -:  131:
        -:  132:  template<size_t _Np, typename... _Types>
        -:  133:    constexpr variant_alternative_t<_Np, variant<_Types...>>&&
        -:  134:    get(variant<_Types...>&&);
        -:  135:
        -:  136:  template<size_t _Np, typename... _Types>
        -:  137:    constexpr variant_alternative_t<_Np, variant<_Types...>> const&
        -:  138:    get(const variant<_Types...>&);
        -:  139:
        -:  140:  template<size_t _Np, typename... _Types>
        -:  141:    constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
        -:  142:    get(const variant<_Types...>&&);
        -:  143:
        -:  144:  template<typename _Result_type, typename _Visitor, typename... _Variants>
        -:  145:    constexpr decltype(auto)
        -:  146:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants);
        -:  147:
        -:  148:  template <typename... _Types, typename _Tp>
        -:  149:    decltype(auto)
       36:  150:    __variant_cast(_Tp&& __rhs)
        -:  151:    {
        -:  152:      if constexpr (is_lvalue_reference_v<_Tp>)
        -:  153:	{
        -:  154:	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
        5:  155:	    return static_cast<const variant<_Types...>&>(__rhs);
        -:  156:	  else
       28:  157:	    return static_cast<variant<_Types...>&>(__rhs);
        -:  158:	}
        -:  159:      else
        3:  160:        return static_cast<variant<_Types...>&&>(__rhs);
        -:  161:    }
------------------
_ZSt14__variant_castIJ15LeftLineCommand16RightLineCommandENSt8__detail9__variant15_Move_ctor_baseILb0EJS0_S1_EEEEDcOT0_:
        2:  150:    __variant_cast(_Tp&& __rhs)
        -:  151:    {
        -:  152:      if constexpr (is_lvalue_reference_v<_Tp>)
        -:  153:	{
        -:  154:	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
        -:  155:	    return static_cast<const variant<_Types...>&>(__rhs);
        -:  156:	  else
        -:  157:	    return static_cast<variant<_Types...>&>(__rhs);
        -:  158:	}
        -:  159:      else
        2:  160:        return static_cast<variant<_Types...>&&>(__rhs);
        2:  160-block  0
        -:  161:    }
------------------
_ZSt14__variant_castIJ12PointCommand11MoveCommandENSt8__detail9__variant15_Move_ctor_baseILb0EJS0_S1_EEEEDcOT0_:
        1:  150:    __variant_cast(_Tp&& __rhs)
        -:  151:    {
        -:  152:      if constexpr (is_lvalue_reference_v<_Tp>)
        -:  153:	{
        -:  154:	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
        -:  155:	    return static_cast<const variant<_Types...>&>(__rhs);
        -:  156:	  else
        -:  157:	    return static_cast<variant<_Types...>&>(__rhs);
        -:  158:	}
        -:  159:      else
        1:  160:        return static_cast<variant<_Types...>&&>(__rhs);
        1:  160-block  0
        -:  161:    }
------------------
_ZSt14__variant_castIJ15LeftLineCommand16RightLineCommandERKNSt8__detail9__variant15_Copy_ctor_baseILb0EJS0_S1_EEEEDcOT0_:
        3:  150:    __variant_cast(_Tp&& __rhs)
        -:  151:    {
        -:  152:      if constexpr (is_lvalue_reference_v<_Tp>)
        -:  153:	{
        -:  154:	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
        3:  155:	    return static_cast<const variant<_Types...>&>(__rhs);
        3:  155-block  0
        -:  156:	  else
        -:  157:	    return static_cast<variant<_Types...>&>(__rhs);
        -:  158:	}
        -:  159:      else
        -:  160:        return static_cast<variant<_Types...>&&>(__rhs);
        -:  161:    }
------------------
_ZSt14__variant_castIJ12PointCommand11MoveCommandERKNSt8__detail9__variant15_Copy_ctor_baseILb0EJS0_S1_EEEEDcOT0_:
        2:  150:    __variant_cast(_Tp&& __rhs)
        -:  151:    {
        -:  152:      if constexpr (is_lvalue_reference_v<_Tp>)
        -:  153:	{
        -:  154:	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
        2:  155:	    return static_cast<const variant<_Types...>&>(__rhs);
        2:  155-block  0
        -:  156:	  else
        -:  157:	    return static_cast<variant<_Types...>&>(__rhs);
        -:  158:	}
        -:  159:      else
        -:  160:        return static_cast<variant<_Types...>&&>(__rhs);
        -:  161:    }
------------------
_ZSt14__variant_castIJ12PointCommand11MoveCommandERNSt8__detail9__variant16_Variant_storageILb0EJS0_S1_EEEEDcOT0_:
       10:  150:    __variant_cast(_Tp&& __rhs)
        -:  151:    {
        -:  152:      if constexpr (is_lvalue_reference_v<_Tp>)
        -:  153:	{
        -:  154:	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
        -:  155:	    return static_cast<const variant<_Types...>&>(__rhs);
        -:  156:	  else
       10:  157:	    return static_cast<variant<_Types...>&>(__rhs);
       10:  157-block  0
        -:  158:	}
        -:  159:      else
        -:  160:        return static_cast<variant<_Types...>&&>(__rhs);
        -:  161:    }
------------------
_ZSt14__variant_castIJ15LeftLineCommand16RightLineCommandERNSt8__detail9__variant16_Variant_storageILb0EJS0_S1_EEEEDcOT0_:
       16:  150:    __variant_cast(_Tp&& __rhs)
        -:  151:    {
        -:  152:      if constexpr (is_lvalue_reference_v<_Tp>)
        -:  153:	{
        -:  154:	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
        -:  155:	    return static_cast<const variant<_Types...>&>(__rhs);
        -:  156:	  else
       16:  157:	    return static_cast<variant<_Types...>&>(__rhs);
       16:  157-block  0
        -:  158:	}
        -:  159:      else
        -:  160:        return static_cast<variant<_Types...>&&>(__rhs);
        -:  161:    }
------------------
_ZSt14__variant_castIJ15LeftLineCommand16RightLineCommandERNSt8__detail9__variant17_Move_assign_baseILb0EJS0_S1_EEEEDcOT0_:
        2:  150:    __variant_cast(_Tp&& __rhs)
        -:  151:    {
        -:  152:      if constexpr (is_lvalue_reference_v<_Tp>)
        -:  153:	{
        -:  154:	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
        -:  155:	    return static_cast<const variant<_Types...>&>(__rhs);
        -:  156:	  else
        2:  157:	    return static_cast<variant<_Types...>&>(__rhs);
        2:  157-block  0
        -:  158:	}
        -:  159:      else
        -:  160:        return static_cast<variant<_Types...>&&>(__rhs);
        -:  161:    }
------------------
        -:  162:
        -:  163:namespace __detail
        -:  164:{
        -:  165:namespace __variant
        -:  166:{
        -:  167:  // Returns the first appearance of _Tp in _Types.
        -:  168:  // Returns sizeof...(_Types) if _Tp is not in _Types.
        -:  169:  template<typename _Tp, typename... _Types>
        -:  170:    struct __index_of : std::integral_constant<size_t, 0> {};
        -:  171:
        -:  172:  template<typename _Tp, typename... _Types>
        -:  173:    inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
        -:  174:
        -:  175:  template<typename _Tp, typename _First, typename... _Rest>
        -:  176:    struct __index_of<_Tp, _First, _Rest...> :
        -:  177:      std::integral_constant<size_t, is_same_v<_Tp, _First>
        -:  178:	? 0 : __index_of_v<_Tp, _Rest...> + 1> {};
        -:  179:
        -:  180:  // used for raw visitation
        -:  181:  struct __variant_cookie {};
        -:  182:  // used for raw visitation with indices passed in
        -:  183:  struct __variant_idx_cookie { using type = __variant_idx_cookie; };
        -:  184:  // Used to enable deduction (and same-type checking) for std::visit:
        -:  185:  template<typename _Tp> struct __deduce_visit_result { using type = _Tp; };
        -:  186:
        -:  187:  // Visit variants that might be valueless.
        -:  188:  template<typename _Visitor, typename... _Variants>
        -:  189:    constexpr void
        8:  190:    __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -:  191:    {
        8:  192:      std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
        -:  193:				        std::forward<_Variants>(__variants)...);
        8:  194:    }
------------------
_ZNSt8__detail9__variant11__raw_visitIZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS3_S4_EEES6_EEvOT0_OT1_EUlOT_E_JSt7variantIJS3_S4_EEEEEvSD_DpOT0_:
        2:  190:    __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -:  191:    {
        2:  192:      std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
        2:  192-block  0
        -:  193:				        std::forward<_Variants>(__variants)...);
        2:  194:    }
------------------
_ZNSt8__detail9__variant11__raw_visitIZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS3_S4_EEES6_EEvOT0_OT1_EUlOT_E_JSt7variantIJS3_S4_EEEEEvSD_DpOT0_:
        1:  190:    __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -:  191:    {
        1:  192:      std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
        1:  192-block  0
        -:  193:				        std::forward<_Variants>(__variants)...);
        1:  194:    }
------------------
_ZNSt8__detail9__variant11__raw_visitIZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS3_S4_EEERKS6_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS3_S4_EEEEEvSF_DpOT0_:
        3:  190:    __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -:  191:    {
        3:  192:      std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
        3:  192-block  0
        -:  193:				        std::forward<_Variants>(__variants)...);
        3:  194:    }
------------------
_ZNSt8__detail9__variant11__raw_visitIZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS3_S4_EEERKS6_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS3_S4_EEEEEvSF_DpOT0_:
        2:  190:    __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -:  191:    {
        2:  192:      std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
        2:  192-block  0
        -:  193:				        std::forward<_Variants>(__variants)...);
        2:  194:    }
------------------
        -:  195:
        -:  196:  // Visit variants that might be valueless, passing indices to the visitor.
        -:  197:  template<typename _Visitor, typename... _Variants>
        -:  198:    constexpr void
        1:  199:    __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -:  200:    {
        1:  201:      std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
        1:  201-block  0
        -:  202:	  std::forward<_Variants>(__variants)...);
        1:  203:    }
        -:  204:
        -:  205:  // The __as function templates implement the exposition-only "as-variant"
        -:  206:
        -:  207:  template<typename... _Types>
        -:  208:    constexpr std::variant<_Types...>&
        5:  209:    __as(std::variant<_Types...>& __v) noexcept
        5:  210:    { return __v; }
------------------
_ZNSt8__detail9__variant4__asIJ15LeftLineCommand16RightLineCommandEEERSt7variantIJDpT_EES8_:
        3:  209:    __as(std::variant<_Types...>& __v) noexcept
        3:  210:    { return __v; }
        3:  210-block  0
------------------
_ZNSt8__detail9__variant4__asIJ12PointCommand11MoveCommandEEERSt7variantIJDpT_EES8_:
        2:  209:    __as(std::variant<_Types...>& __v) noexcept
        2:  210:    { return __v; }
        2:  210-block  0
------------------
        -:  211:
        -:  212:  template<typename... _Types>
        -:  213:    constexpr const std::variant<_Types...>&
        -:  214:    __as(const std::variant<_Types...>& __v) noexcept
        -:  215:    { return __v; }
        -:  216:
        -:  217:  template<typename... _Types>
        -:  218:    constexpr std::variant<_Types...>&&
        -:  219:    __as(std::variant<_Types...>&& __v) noexcept
        -:  220:    { return std::move(__v); }
        -:  221:
        -:  222:  template<typename... _Types>
        -:  223:    constexpr const std::variant<_Types...>&&
        -:  224:    __as(const std::variant<_Types...>&& __v) noexcept
        -:  225:    { return std::move(__v); }
        -:  226:
        -:  227:  // _Uninitialized<T> is guaranteed to be a trivially destructible type,
        -:  228:  // even if T is not.
        -:  229:  template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
        -:  230:    struct _Uninitialized;
        -:  231:
        -:  232:  template<typename _Type>
        -:  233:    struct _Uninitialized<_Type, true>
        -:  234:    {
        -:  235:      template<typename... _Args>
        -:  236:	constexpr
        -:  237:	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
        -:  238:	: _M_storage(std::forward<_Args>(__args)...)
        -:  239:	{ }
        -:  240:
        -:  241:      constexpr const _Type& _M_get() const & noexcept
        -:  242:      { return _M_storage; }
        -:  243:
        -:  244:      constexpr _Type& _M_get() & noexcept
        -:  245:      { return _M_storage; }
        -:  246:
        -:  247:      constexpr const _Type&& _M_get() const && noexcept
        -:  248:      { return std::move(_M_storage); }
        -:  249:
        -:  250:      constexpr _Type&& _M_get() && noexcept
        -:  251:      { return std::move(_M_storage); }
        -:  252:
        -:  253:      _Type _M_storage;
        -:  254:    };
        -:  255:
        -:  256:  template<typename _Type>
        -:  257:    struct _Uninitialized<_Type, false>
        -:  258:    {
        -:  259:      template<typename... _Args>
        -:  260:	constexpr
       17:  261:	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
        -:  262:	{
       17:  263:	  ::new ((void*)std::addressof(_M_storage))
       17:  264:	    _Type(std::forward<_Args>(__args)...);
       17:  265:	}
------------------
_ZNSt8__detail9__variant14_UninitializedI15LeftLineCommandLb0EEC2IJS2_EEESt16in_place_index_tILm0EEDpOT_:
        5:  261:	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
        -:  262:	{
        5:  263:	  ::new ((void*)std::addressof(_M_storage))
        5:  264:	    _Type(std::forward<_Args>(__args)...);
        5:  264-block  0
        5:  265:	}
------------------
_ZNSt8__detail9__variant14_UninitializedI16RightLineCommandLb0EEC2IJS2_EEESt16in_place_index_tILm0EEDpOT_:
        5:  261:	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
        -:  262:	{
        5:  263:	  ::new ((void*)std::addressof(_M_storage))
        5:  264:	    _Type(std::forward<_Args>(__args)...);
        5:  264-block  0
        5:  265:	}
------------------
_ZNSt8__detail9__variant14_UninitializedI11MoveCommandLb0EEC2IJS2_EEESt16in_place_index_tILm0EEDpOT_:
        3:  261:	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
        -:  262:	{
        3:  263:	  ::new ((void*)std::addressof(_M_storage))
        3:  264:	    _Type(std::forward<_Args>(__args)...);
        3:  264-block  0
        3:  265:	}
------------------
_ZNSt8__detail9__variant14_UninitializedI12PointCommandLb0EEC2IJS2_EEESt16in_place_index_tILm0EEDpOT_:
        4:  261:	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
        -:  262:	{
        4:  263:	  ::new ((void*)std::addressof(_M_storage))
        4:  264:	    _Type(std::forward<_Args>(__args)...);
        4:  264-block  0
        4:  265:	}
------------------
        -:  266:
        5:  267:      const _Type& _M_get() const & noexcept
        5:  268:      { return *_M_storage._M_ptr(); }
------------------
_ZNKRSt8__detail9__variant14_UninitializedI16RightLineCommandLb0EE6_M_getEv:
        2:  267:      const _Type& _M_get() const & noexcept
        2:  268:      { return *_M_storage._M_ptr(); }
        2:  268-block  0
------------------
_ZNKRSt8__detail9__variant14_UninitializedI15LeftLineCommandLb0EE6_M_getEv:
        1:  267:      const _Type& _M_get() const & noexcept
        1:  268:      { return *_M_storage._M_ptr(); }
        1:  268-block  0
------------------
_ZNKRSt8__detail9__variant14_UninitializedI11MoveCommandLb0EE6_M_getEv:
        1:  267:      const _Type& _M_get() const & noexcept
        1:  268:      { return *_M_storage._M_ptr(); }
        1:  268-block  0
------------------
_ZNKRSt8__detail9__variant14_UninitializedI12PointCommandLb0EE6_M_getEv:
        1:  267:      const _Type& _M_get() const & noexcept
        1:  268:      { return *_M_storage._M_ptr(); }
        1:  268-block  0
------------------
        -:  269:
       41:  270:      _Type& _M_get() & noexcept
       41:  271:      { return *_M_storage._M_ptr(); }
------------------
_ZNRSt8__detail9__variant14_UninitializedI11MoveCommandLb0EE6_M_getEv:
        6:  270:      _Type& _M_get() & noexcept
        6:  271:      { return *_M_storage._M_ptr(); }
        6:  271-block  0
------------------
_ZNRSt8__detail9__variant14_UninitializedI12PointCommandLb0EE6_M_getEv:
        9:  270:      _Type& _M_get() & noexcept
        9:  271:      { return *_M_storage._M_ptr(); }
        9:  271-block  0
------------------
_ZNRSt8__detail9__variant14_UninitializedI15LeftLineCommandLb0EE6_M_getEv:
       13:  270:      _Type& _M_get() & noexcept
       13:  271:      { return *_M_storage._M_ptr(); }
       13:  271-block  0
------------------
_ZNRSt8__detail9__variant14_UninitializedI16RightLineCommandLb0EE6_M_getEv:
       13:  270:      _Type& _M_get() & noexcept
       13:  271:      { return *_M_storage._M_ptr(); }
       13:  271-block  0
------------------
        -:  272:
        -:  273:      const _Type&& _M_get() const && noexcept
        -:  274:      { return std::move(*_M_storage._M_ptr()); }
        -:  275:
       3*:  276:      _Type&& _M_get() && noexcept
       3*:  277:      { return std::move(*_M_storage._M_ptr()); }
------------------
_ZNOSt8__detail9__variant14_UninitializedI16RightLineCommandLb0EE6_M_getEv:
        2:  276:      _Type&& _M_get() && noexcept
        2:  277:      { return std::move(*_M_storage._M_ptr()); }
        2:  277-block  0
------------------
_ZNOSt8__detail9__variant14_UninitializedI15LeftLineCommandLb0EE6_M_getEv:
    #####:  276:      _Type&& _M_get() && noexcept
    #####:  277:      { return std::move(*_M_storage._M_ptr()); }
    %%%%%:  277-block  0
------------------
_ZNOSt8__detail9__variant14_UninitializedI11MoveCommandLb0EE6_M_getEv:
    #####:  276:      _Type&& _M_get() && noexcept
    #####:  277:      { return std::move(*_M_storage._M_ptr()); }
    %%%%%:  277-block  0
------------------
_ZNOSt8__detail9__variant14_UninitializedI12PointCommandLb0EE6_M_getEv:
        1:  276:      _Type&& _M_get() && noexcept
        1:  277:      { return std::move(*_M_storage._M_ptr()); }
        1:  277-block  0
------------------
        -:  278:
        -:  279:      __gnu_cxx::__aligned_membuf<_Type> _M_storage;
        -:  280:    };
        -:  281:
        -:  282:  template<typename _Union>
        -:  283:    constexpr decltype(auto)
      49*:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
      49*:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
------------------
_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJ16RightLineCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
        2:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
        2:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
        2:  285-block  0
------------------
_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
    #####:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
    #####:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
    %%%%%:  285-block  0
------------------
_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJ11MoveCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
    #####:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
    #####:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
    %%%%%:  285-block  0
------------------
_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJ12PointCommand11MoveCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
        1:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
        1:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
        1:  285-block  0
------------------
_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJ16RightLineCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
        2:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
        2:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
        2:  285-block  0
------------------
_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
        1:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
        1:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
        1:  285-block  0
------------------
_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJ11MoveCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
        1:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
        1:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
        1:  285-block  0
------------------
_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJ12PointCommand11MoveCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
        1:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
        1:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
        1:  285-block  0
------------------
_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ11MoveCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
        6:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
        6:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
        6:  285-block  0
------------------
_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ12PointCommand11MoveCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
        9:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
        9:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
        9:  285-block  0
------------------
_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
       13:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
       13:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
       13:  285-block  0
------------------
_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ16RightLineCommandEEEEEDcSt16in_place_index_tILm0EEOT_:
       13:  284:    __get(in_place_index_t<0>, _Union&& __u) noexcept
       13:  285:    { return std::forward<_Union>(__u)._M_first._M_get(); }
       13:  285-block  0
------------------
        -:  286:
        -:  287:  template<size_t _Np, typename _Union>
        -:  288:    constexpr decltype(auto)
      24*:  289:    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
        -:  290:    {
      24*:  291:      return __variant::__get(in_place_index<_Np-1>,
      24*:  292:			      std::forward<_Union>(__u)._M_rest);
        -:  293:    }
------------------
_ZNSt8__detail9__variant5__getILm1ENS0_15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEEDcSt16in_place_index_tIXT_EEOT0_:
        2:  289:    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
        -:  290:    {
        2:  291:      return __variant::__get(in_place_index<_Np-1>,
        2:  292:			      std::forward<_Union>(__u)._M_rest);
        2:  292-block  0
        -:  293:    }
------------------
_ZNSt8__detail9__variant5__getILm1ENS0_15_Variadic_unionIJ12PointCommand11MoveCommandEEEEEDcSt16in_place_index_tIXT_EEOT0_:
    #####:  289:    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
        -:  290:    {
    #####:  291:      return __variant::__get(in_place_index<_Np-1>,
    #####:  292:			      std::forward<_Union>(__u)._M_rest);
    %%%%%:  292-block  0
        -:  293:    }
------------------
_ZNSt8__detail9__variant5__getILm1ERKNS0_15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEEDcSt16in_place_index_tIXT_EEOT0_:
        2:  289:    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
        -:  290:    {
        2:  291:      return __variant::__get(in_place_index<_Np-1>,
        2:  292:			      std::forward<_Union>(__u)._M_rest);
        2:  292-block  0
        -:  293:    }
------------------
_ZNSt8__detail9__variant5__getILm1ERKNS0_15_Variadic_unionIJ12PointCommand11MoveCommandEEEEEDcSt16in_place_index_tIXT_EEOT0_:
        1:  289:    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
        -:  290:    {
        1:  291:      return __variant::__get(in_place_index<_Np-1>,
        1:  292:			      std::forward<_Union>(__u)._M_rest);
        1:  292-block  0
        -:  293:    }
------------------
_ZNSt8__detail9__variant5__getILm1ERNS0_15_Variadic_unionIJ12PointCommand11MoveCommandEEEEEDcSt16in_place_index_tIXT_EEOT0_:
        6:  289:    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
        -:  290:    {
        6:  291:      return __variant::__get(in_place_index<_Np-1>,
        6:  292:			      std::forward<_Union>(__u)._M_rest);
        6:  292-block  0
        -:  293:    }
------------------
_ZNSt8__detail9__variant5__getILm1ERNS0_15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEEEEDcSt16in_place_index_tIXT_EEOT0_:
       13:  289:    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
        -:  290:    {
       13:  291:      return __variant::__get(in_place_index<_Np-1>,
       13:  292:			      std::forward<_Union>(__u)._M_rest);
       13:  292-block  0
        -:  293:    }
------------------
        -:  294:
        -:  295:  // Returns the typed storage for __v.
        -:  296:  template<size_t _Np, typename _Variant>
        -:  297:    constexpr decltype(auto)
      49*:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
      49*:  300:      return __variant::__get(std::in_place_index<_Np>,
      49*:  301:			      std::forward<_Variant>(__v)._M_u);
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm1ESt7variantIJ15LeftLineCommand16RightLineCommandEEEEDcOT0_:
        2:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
        2:  300:      return __variant::__get(std::in_place_index<_Np>,
        2:  301:			      std::forward<_Variant>(__v)._M_u);
        2:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm0ESt7variantIJ15LeftLineCommand16RightLineCommandEEEEDcOT0_:
    #####:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
    #####:  300:      return __variant::__get(std::in_place_index<_Np>,
    #####:  301:			      std::forward<_Variant>(__v)._M_u);
    %%%%%:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm1ESt7variantIJ12PointCommand11MoveCommandEEEEDcOT0_:
    #####:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
    #####:  300:      return __variant::__get(std::in_place_index<_Np>,
    #####:  301:			      std::forward<_Variant>(__v)._M_u);
    %%%%%:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm0ESt7variantIJ12PointCommand11MoveCommandEEEEDcOT0_:
        1:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
        1:  300:      return __variant::__get(std::in_place_index<_Np>,
        1:  301:			      std::forward<_Variant>(__v)._M_u);
        1:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm1ERKSt7variantIJ15LeftLineCommand16RightLineCommandEEEEDcOT0_:
        2:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
        2:  300:      return __variant::__get(std::in_place_index<_Np>,
        2:  301:			      std::forward<_Variant>(__v)._M_u);
        2:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm0ERKSt7variantIJ15LeftLineCommand16RightLineCommandEEEEDcOT0_:
        1:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
        1:  300:      return __variant::__get(std::in_place_index<_Np>,
        1:  301:			      std::forward<_Variant>(__v)._M_u);
        1:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm1ERKSt7variantIJ12PointCommand11MoveCommandEEEEDcOT0_:
        1:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
        1:  300:      return __variant::__get(std::in_place_index<_Np>,
        1:  301:			      std::forward<_Variant>(__v)._M_u);
        1:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm0ERKSt7variantIJ12PointCommand11MoveCommandEEEEDcOT0_:
        1:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
        1:  300:      return __variant::__get(std::in_place_index<_Np>,
        1:  301:			      std::forward<_Variant>(__v)._M_u);
        1:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm1ERNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEEEEDcOT0_:
    #####:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
    #####:  300:      return __variant::__get(std::in_place_index<_Np>,
    #####:  301:			      std::forward<_Variant>(__v)._M_u);
    %%%%%:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm0ERNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEEEEDcOT0_:
    #####:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
    #####:  300:      return __variant::__get(std::in_place_index<_Np>,
    #####:  301:			      std::forward<_Variant>(__v)._M_u);
    %%%%%:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm1ERSt7variantIJ12PointCommand11MoveCommandEEEEDcOT0_:
        6:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
        6:  300:      return __variant::__get(std::in_place_index<_Np>,
        6:  301:			      std::forward<_Variant>(__v)._M_u);
        6:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm0ERSt7variantIJ12PointCommand11MoveCommandEEEEDcOT0_:
        9:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
        9:  300:      return __variant::__get(std::in_place_index<_Np>,
        9:  301:			      std::forward<_Variant>(__v)._M_u);
        9:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm0ERSt7variantIJ15LeftLineCommand16RightLineCommandEEEEDcOT0_:
       13:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
       13:  300:      return __variant::__get(std::in_place_index<_Np>,
       13:  301:			      std::forward<_Variant>(__v)._M_u);
       13:  301-block  0
        -:  302:    }
------------------
_ZNSt8__detail9__variant5__getILm1ERSt7variantIJ15LeftLineCommand16RightLineCommandEEEEDcOT0_:
       13:  298:    __get(_Variant&& __v) noexcept
        -:  299:    {
       13:  300:      return __variant::__get(std::in_place_index<_Np>,
       13:  301:			      std::forward<_Variant>(__v)._M_u);
       13:  301-block  0
        -:  302:    }
------------------
        -:  303:
        -:  304:  template<typename... _Types>
        -:  305:    struct _Traits
        -:  306:    {
        -:  307:      static constexpr bool _S_default_ctor =
        -:  308:	  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
        -:  309:      static constexpr bool _S_copy_ctor =
        -:  310:	  (is_copy_constructible_v<_Types> && ...);
        -:  311:      static constexpr bool _S_move_ctor =
        -:  312:	  (is_move_constructible_v<_Types> && ...);
        -:  313:      static constexpr bool _S_copy_assign =
        -:  314:	  _S_copy_ctor
        -:  315:	  && (is_copy_assignable_v<_Types> && ...);
        -:  316:      static constexpr bool _S_move_assign =
        -:  317:	  _S_move_ctor
        -:  318:	  && (is_move_assignable_v<_Types> && ...);
        -:  319:
        -:  320:      static constexpr bool _S_trivial_dtor =
        -:  321:	  (is_trivially_destructible_v<_Types> && ...);
        -:  322:      static constexpr bool _S_trivial_copy_ctor =
        -:  323:	  (is_trivially_copy_constructible_v<_Types> && ...);
        -:  324:      static constexpr bool _S_trivial_move_ctor =
        -:  325:	  (is_trivially_move_constructible_v<_Types> && ...);
        -:  326:      static constexpr bool _S_trivial_copy_assign =
        -:  327:	  _S_trivial_dtor && _S_trivial_copy_ctor
        -:  328:	  && (is_trivially_copy_assignable_v<_Types> && ...);
        -:  329:      static constexpr bool _S_trivial_move_assign =
        -:  330:	  _S_trivial_dtor && _S_trivial_move_ctor
        -:  331:	  && (is_trivially_move_assignable_v<_Types> && ...);
        -:  332:
        -:  333:      // The following nothrow traits are for non-trivial SMFs. Trivial SMFs
        -:  334:      // are always nothrow.
        -:  335:      static constexpr bool _S_nothrow_default_ctor =
        -:  336:	  is_nothrow_default_constructible_v<
        -:  337:	      typename _Nth_type<0, _Types...>::type>;
        -:  338:      static constexpr bool _S_nothrow_copy_ctor = false;
        -:  339:      static constexpr bool _S_nothrow_move_ctor =
        -:  340:	  (is_nothrow_move_constructible_v<_Types> && ...);
        -:  341:      static constexpr bool _S_nothrow_copy_assign = false;
        -:  342:      static constexpr bool _S_nothrow_move_assign =
        -:  343:	  _S_nothrow_move_ctor
        -:  344:	  && (is_nothrow_move_assignable_v<_Types> && ...);
        -:  345:    };
        -:  346:
        -:  347:  // Defines members and ctors.
        -:  348:  template<typename... _Types>
        -:  349:    union _Variadic_union { };
        -:  350:
        -:  351:  template<typename _First, typename... _Rest>
        -:  352:    union _Variadic_union<_First, _Rest...>
        -:  353:    {
       16:  354:      constexpr _Variadic_union() : _M_rest() { }
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ16RightLineCommandEEC2Ev:
        5:  354:      constexpr _Variadic_union() : _M_rest() { }
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ11MoveCommandEEC2Ev:
        3:  354:      constexpr _Variadic_union() : _M_rest() { }
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEC2Ev:
        5:  354:      constexpr _Variadic_union() : _M_rest() { }
        5:  354-block  0
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ12PointCommand11MoveCommandEEC2Ev:
        3:  354:      constexpr _Variadic_union() : _M_rest() { }
        3:  354-block  0
------------------
        -:  355:
        -:  356:      template<typename... _Args>
       17:  357:	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
       17:  358:	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
       17:  359:	{ }
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEC2IJS2_EEESt16in_place_index_tILm0EEDpOT_:
        5:  357:	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
        5:  358:	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
        5:  358-block  0
        5:  359:	{ }
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ16RightLineCommandEEC2IJS2_EEESt16in_place_index_tILm0EEDpOT_:
        5:  357:	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
        5:  358:	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
        5:  358-block  0
        5:  359:	{ }
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ11MoveCommandEEC2IJS2_EEESt16in_place_index_tILm0EEDpOT_:
        3:  357:	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
        3:  358:	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
        3:  358-block  0
        3:  359:	{ }
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ12PointCommand11MoveCommandEEC2IJS2_EEESt16in_place_index_tILm0EEDpOT_:
        4:  357:	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
        4:  358:	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
        4:  358-block  0
        4:  359:	{ }
------------------
        -:  360:
        -:  361:      template<size_t _Np, typename... _Args>
        8:  362:	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
        8:  363:	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
        8:  364:	{ }
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ15LeftLineCommand16RightLineCommandEEC2ILm1EJS3_EEESt16in_place_index_tIXT_EEDpOT0_:
        5:  362:	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
        5:  363:	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
        5:  363-block  0
        5:  364:	{ }
------------------
_ZNSt8__detail9__variant15_Variadic_unionIJ12PointCommand11MoveCommandEEC2ILm1EJS3_EEESt16in_place_index_tIXT_EEDpOT0_:
        3:  362:	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
        3:  363:	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
        3:  363-block  0
        3:  364:	{ }
------------------
        -:  365:
        -:  366:      _Uninitialized<_First> _M_first;
        -:  367:      _Variadic_union<_Rest...> _M_rest;
        -:  368:    };
        -:  369:
        -:  370:  // _Never_valueless_alt is true for variant alternatives that can
        -:  371:  // always be placed in a variant without it becoming valueless.
        -:  372:
        -:  373:  // For suitably-small, trivially copyable types we can create temporaries
        -:  374:  // on the stack and then memcpy them into place.
        -:  375:  template<typename _Tp>
        -:  376:    struct _Never_valueless_alt
        -:  377:    : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
        -:  378:    { };
        -:  379:
        -:  380:  // Specialize _Never_valueless_alt for other types which have a
        -:  381:  // non-throwing and cheap move construction and move assignment operator,
        -:  382:  // so that emplacing the type will provide the strong exception-safety
        -:  383:  // guarantee, by creating and moving a temporary.
        -:  384:  // Whether _Never_valueless_alt<T> is true or not affects the ABI of a
        -:  385:  // variant using that alternative, so we can't change the value later!
        -:  386:
        -:  387:  // True if every alternative in _Types... can be emplaced in a variant
        -:  388:  // without it becoming valueless. If this is true, variant<_Types...>
        -:  389:  // can never be valueless, which enables some minor optimizations.
        -:  390:  template <typename... _Types>
        -:  391:    constexpr bool __never_valueless()
        -:  392:    {
        -:  393:      return _Traits<_Types...>::_S_move_assign
        -:  394:	&& (_Never_valueless_alt<_Types>::value && ...);
        -:  395:    }
        -:  396:
        -:  397:  // Defines index and the dtor, possibly trivial.
        -:  398:  template<bool __trivially_destructible, typename... _Types>
        -:  399:    struct _Variant_storage;
        -:  400:
        -:  401:  template <typename... _Types>
        -:  402:    using __select_index =
        -:  403:      typename __select_int::_Select_int_base<sizeof...(_Types),
        -:  404:					      unsigned char,
        -:  405:					      unsigned short>::type::value_type;
        -:  406:
        -:  407:  template<typename... _Types>
        -:  408:    struct _Variant_storage<false, _Types...>
        -:  409:    {
        -:  410:      constexpr
        8:  411:      _Variant_storage()
        8:  412:      : _M_index(static_cast<__index_type>(variant_npos))
        8:  413:      { }
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEEC2Ev:
        5:  411:      _Variant_storage()
        5:  412:      : _M_index(static_cast<__index_type>(variant_npos))
        5:  412-block  0
        5:  413:      { }
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ12PointCommand11MoveCommandEEC2Ev:
        3:  411:      _Variant_storage()
        3:  412:      : _M_index(static_cast<__index_type>(variant_npos))
        3:  412-block  0
        3:  413:      { }
------------------
        -:  414:
        -:  415:      template<size_t _Np, typename... _Args>
        -:  416:	constexpr
       17:  417:	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
       17:  418:	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
       17:  419:	_M_index{_Np}
       17:  420:	{ }
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEEC2ILm0EJS2_EEESt16in_place_index_tIXT_EEDpOT0_:
        5:  417:	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
        5:  418:	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
        5:  418-block  0
        5:  419:	_M_index{_Np}
        5:  420:	{ }
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEEC2ILm1EJS3_EEESt16in_place_index_tIXT_EEDpOT0_:
        5:  417:	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
        5:  418:	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
        5:  418-block  0
        5:  419:	_M_index{_Np}
        5:  420:	{ }
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ12PointCommand11MoveCommandEEC2ILm1EJS3_EEESt16in_place_index_tIXT_EEDpOT0_:
        3:  417:	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
        3:  418:	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
        3:  418-block  0
        3:  419:	_M_index{_Np}
        3:  420:	{ }
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ12PointCommand11MoveCommandEEC2ILm0EJS2_EEESt16in_place_index_tIXT_EEDpOT0_:
        4:  417:	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
        4:  418:	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
        4:  418-block  0
        4:  419:	_M_index{_Np}
        4:  420:	{ }
------------------
        -:  421:
       26:  422:      void _M_reset()
        -:  423:      {
      26*:  424:	if (!_M_valid()) [[unlikely]]
    #####:  425:	  return;
        -:  426:
       78:  427:	std::__do_visit<void>([](auto&& __this_mem) mutable
        -:  428:	  {
       26:  429:	    std::_Destroy(std::__addressof(__this_mem));
        4:  429-block  0
        6:  429-block  1
        9:  429-block  2
        7:  429-block  3
        -:  430:	  }, __variant_cast<_Types...>(*this));
        -:  431:
       26:  432:	_M_index = static_cast<__index_type>(variant_npos);
        -:  433:      }
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ12PointCommand11MoveCommandEE8_M_resetEv:
       10:  422:      void _M_reset()
        -:  423:      {
      10*:  424:	if (!_M_valid()) [[unlikely]]
       10:  424-block  0
    #####:  425:	  return;
    %%%%%:  425-block  0
        -:  426:
       10:  427:	std::__do_visit<void>([](auto&& __this_mem) mutable
       10:  427-block  0
        -:  428:	  {
        -:  429:	    std::_Destroy(std::__addressof(__this_mem));
        -:  430:	  }, __variant_cast<_Types...>(*this));
        -:  431:
       10:  432:	_M_index = static_cast<__index_type>(variant_npos);
       10:  432-block  0
        -:  433:      }
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEE8_M_resetEv:
       16:  422:      void _M_reset()
        -:  423:      {
      16*:  424:	if (!_M_valid()) [[unlikely]]
       16:  424-block  0
    #####:  425:	  return;
    %%%%%:  425-block  0
        -:  426:
       16:  427:	std::__do_visit<void>([](auto&& __this_mem) mutable
       16:  427-block  0
        -:  428:	  {
        -:  429:	    std::_Destroy(std::__addressof(__this_mem));
        -:  430:	  }, __variant_cast<_Types...>(*this));
        -:  431:
       16:  432:	_M_index = static_cast<__index_type>(variant_npos);
       16:  432-block  0
        -:  433:      }
------------------
        -:  434:
       25:  435:      ~_Variant_storage()
       25:  436:      { _M_reset(); }
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ12PointCommand11MoveCommandEED2Ev:
       10:  435:      ~_Variant_storage()
       10:  436:      { _M_reset(); }
       10:  436-block  0
------------------
_ZNSt8__detail9__variant16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEED2Ev:
       15:  435:      ~_Variant_storage()
       15:  436:      { _M_reset(); }
       15:  436-block  0
------------------
        -:  437:
        -:  438:      void*
        -:  439:      _M_storage() const noexcept
        -:  440:      {
        -:  441:	return const_cast<void*>(static_cast<const void*>(
        -:  442:	    std::addressof(_M_u)));
        -:  443:      }
        -:  444:
        -:  445:      constexpr bool
       31:  446:      _M_valid() const noexcept
        -:  447:      {
        -:  448:	if constexpr (__variant::__never_valueless<_Types...>())
        -:  449:	  return true;
       31:  450:	return this->_M_index != __index_type(variant_npos);
        -:  451:      }
------------------
_ZNKSt8__detail9__variant16_Variant_storageILb0EJ12PointCommand11MoveCommandEE8_M_validEv:
       12:  446:      _M_valid() const noexcept
        -:  447:      {
        -:  448:	if constexpr (__variant::__never_valueless<_Types...>())
        -:  449:	  return true;
       12:  450:	return this->_M_index != __index_type(variant_npos);
       12:  450-block  0
        -:  451:      }
------------------
_ZNKSt8__detail9__variant16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEE8_M_validEv:
       19:  446:      _M_valid() const noexcept
        -:  447:      {
        -:  448:	if constexpr (__variant::__never_valueless<_Types...>())
        -:  449:	  return true;
       19:  450:	return this->_M_index != __index_type(variant_npos);
       19:  450-block  0
        -:  451:      }
------------------
        -:  452:
        -:  453:      _Variadic_union<_Types...> _M_u;
        -:  454:      using __index_type = __select_index<_Types...>;
        -:  455:      __index_type _M_index;
        -:  456:    };
        -:  457:
        -:  458:  template<typename... _Types>
        -:  459:    struct _Variant_storage<true, _Types...>
        -:  460:    {
        -:  461:      constexpr
        -:  462:      _Variant_storage()
        -:  463:      : _M_index(static_cast<__index_type>(variant_npos))
        -:  464:      { }
        -:  465:
        -:  466:      template<size_t _Np, typename... _Args>
        -:  467:	constexpr
        -:  468:	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
        -:  469:	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
        -:  470:	_M_index{_Np}
        -:  471:	{ }
        -:  472:
        -:  473:      void _M_reset() noexcept
        -:  474:      { _M_index = static_cast<__index_type>(variant_npos); }
        -:  475:
        -:  476:      void*
        -:  477:      _M_storage() const noexcept
        -:  478:      {
        -:  479:	return const_cast<void*>(static_cast<const void*>(
        -:  480:	    std::addressof(_M_u)));
        -:  481:      }
        -:  482:
        -:  483:      constexpr bool
        -:  484:      _M_valid() const noexcept
        -:  485:      {
        -:  486:	if constexpr (__variant::__never_valueless<_Types...>())
        -:  487:	  return true;
        -:  488:	return this->_M_index != static_cast<__index_type>(variant_npos);
        -:  489:      }
        -:  490:
        -:  491:      _Variadic_union<_Types...> _M_u;
        -:  492:      using __index_type = __select_index<_Types...>;
        -:  493:      __index_type _M_index;
        -:  494:    };
        -:  495:
        -:  496:  template<typename... _Types>
        -:  497:    using _Variant_storage_alias =
        -:  498:	_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
        -:  499:
        -:  500:  template<typename _Tp, typename _Up>
       8*:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
       8*:  503:      void* __storage = std::addressof(__lhs._M_u);
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
       8*:  506:        ::new (__storage)
       8*:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
       8*:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEES4_EEvOT_OT0_:
        2:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
        2:  503:      void* __storage = std::addressof(__lhs._M_u);
        2:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        2:  506:        ::new (__storage)
        2:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
        2:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEENS0_16__variant_cookieEEEvOT_OT0_:
    #####:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
    #####:  503:      void* __storage = std::addressof(__lhs._M_u);
    %%%%%:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        -:  506:        ::new (__storage)
        -:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
    #####:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEES3_EEvOT_OT0_:
    #####:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
    #####:  503:      void* __storage = std::addressof(__lhs._M_u);
    %%%%%:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
    #####:  506:        ::new (__storage)
    #####:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
    #####:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJ12PointCommand11MoveCommandEEES4_EEvOT_OT0_:
    #####:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
    #####:  503:      void* __storage = std::addressof(__lhs._M_u);
    %%%%%:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
    #####:  506:        ::new (__storage)
    #####:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
    #####:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJ12PointCommand11MoveCommandEEENS0_16__variant_cookieEEEvOT_OT0_:
    #####:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
    #####:  503:      void* __storage = std::addressof(__lhs._M_u);
    %%%%%:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        -:  506:        ::new (__storage)
        -:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
    #####:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJ12PointCommand11MoveCommandEEES3_EEvOT_OT0_:
        1:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
        1:  503:      void* __storage = std::addressof(__lhs._M_u);
        1:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        1:  506:        ::new (__storage)
        1:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
        1:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEERKS4_EEvOT_OT0_:
        2:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
        2:  503:      void* __storage = std::addressof(__lhs._M_u);
        2:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        2:  506:        ::new (__storage)
        2:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
        2:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEENS0_16__variant_cookieEEEvOT_OT0_:
    #####:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
    #####:  503:      void* __storage = std::addressof(__lhs._M_u);
    %%%%%:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        -:  506:        ::new (__storage)
        -:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
    #####:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEERKS3_EEvOT_OT0_:
        1:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
        1:  503:      void* __storage = std::addressof(__lhs._M_u);
        1:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        1:  506:        ::new (__storage)
        1:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
        1:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJ12PointCommand11MoveCommandEEERKS4_EEvOT_OT0_:
        1:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
        1:  503:      void* __storage = std::addressof(__lhs._M_u);
        1:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        1:  506:        ::new (__storage)
        1:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
        1:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJ12PointCommand11MoveCommandEEENS0_16__variant_cookieEEEvOT_OT0_:
    #####:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
    #####:  503:      void* __storage = std::addressof(__lhs._M_u);
    %%%%%:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        -:  506:        ::new (__storage)
        -:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
    #####:  508:    }
------------------
_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJ12PointCommand11MoveCommandEEERKS3_EEvOT_OT0_:
        1:  501:    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
        -:  502:    {
        1:  503:      void* __storage = std::addressof(__lhs._M_u);
        1:  503-block  0
        -:  504:      using _Type = remove_reference_t<decltype(__rhs_mem)>;
        -:  505:      if constexpr (!is_same_v<_Type, __variant_cookie>)
        1:  506:        ::new (__storage)
        1:  507:	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
        1:  508:    }
------------------
        -:  509:
        -:  510:  template<typename... _Types, typename _Tp, typename _Up>
        8:  511:    void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
        -:  512:    {
        8:  513:      __lhs._M_index = __rhs._M_index;
      32*:  514:      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
        -:  515:        {
       8*:  516:	  __variant_construct_single(std::forward<_Tp>(__lhs),
        2:  516-block  0
    %%%%%:  516-block  1
    %%%%%:  516-block  2
    %%%%%:  516-block  3
    %%%%%:  516-block  4
        1:  516-block  5
        2:  516-block  6
    %%%%%:  516-block  7
        1:  516-block  8
        1:  516-block  9
    %%%%%:  516-block 10
        1:  516-block 11
        -:  517:	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
        -:  518:	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
        8:  519:    }
------------------
_ZNSt8__detail9__variant19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS2_S3_EEES5_EEvOT0_OT1_:
        2:  511:    void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
        -:  512:    {
        2:  513:      __lhs._M_index = __rhs._M_index;
        2:  514:      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
        2:  514-block  0
        -:  515:        {
        -:  516:	  __variant_construct_single(std::forward<_Tp>(__lhs),
        -:  517:	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
        -:  518:	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
        2:  519:    }
        2:  519-block  0
------------------
_ZNSt8__detail9__variant19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS2_S3_EEES5_EEvOT0_OT1_:
        1:  511:    void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
        -:  512:    {
        1:  513:      __lhs._M_index = __rhs._M_index;
        1:  514:      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
        1:  514-block  0
        -:  515:        {
        -:  516:	  __variant_construct_single(std::forward<_Tp>(__lhs),
        -:  517:	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
        -:  518:	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
        1:  519:    }
        1:  519-block  0
------------------
_ZNSt8__detail9__variant19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS2_S3_EEERKS5_EEvOT0_OT1_:
        3:  511:    void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
        -:  512:    {
        3:  513:      __lhs._M_index = __rhs._M_index;
        3:  514:      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
        3:  514-block  0
        -:  515:        {
        -:  516:	  __variant_construct_single(std::forward<_Tp>(__lhs),
        -:  517:	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
        -:  518:	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
        3:  519:    }
        3:  519-block  0
------------------
_ZNSt8__detail9__variant19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS2_S3_EEERKS5_EEvOT0_OT1_:
        2:  511:    void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
        -:  512:    {
        2:  513:      __lhs._M_index = __rhs._M_index;
        2:  514:      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
        2:  514-block  0
        -:  515:        {
        -:  516:	  __variant_construct_single(std::forward<_Tp>(__lhs),
        -:  517:	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
        -:  518:	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
        2:  519:    }
        2:  519-block  0
------------------
        -:  520:
        -:  521:  // The following are (Copy|Move) (ctor|assign) layers for forwarding
        -:  522:  // triviality and handling non-trivial SMF behaviors.
        -:  523:
        -:  524:  template<bool, typename... _Types>
        -:  525:    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
        -:  526:    {
        -:  527:      using _Base = _Variant_storage_alias<_Types...>;
        -:  528:      using _Base::_Base;
        -:  529:
        5:  530:      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
        -:  531:	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
        5:  532:      {
        5:  533:	__variant_construct<_Types...>(*this, __rhs);
        5:  534:      }
------------------
_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEC2ERKS4_:
        3:  530:      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
        -:  531:	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
        3:  532:      {
        3:  532-block  0
        3:  533:	__variant_construct<_Types...>(*this, __rhs);
        3:  534:      }
        3:  534-block  0
    $$$$$:  534-block  1
------------------
_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJ12PointCommand11MoveCommandEEC2ERKS4_:
        2:  530:      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
        -:  531:	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
        2:  532:      {
        2:  532-block  0
        2:  533:	__variant_construct<_Types...>(*this, __rhs);
        2:  534:      }
        2:  534-block  0
    $$$$$:  534-block  1
------------------
        -:  535:
        -:  536:      _Copy_ctor_base(_Copy_ctor_base&&) = default;
        -:  537:      _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
        -:  538:      _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
        -:  539:    };
        -:  540:
        -:  541:  template<typename... _Types>
        -:  542:    struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
        -:  543:    {
        -:  544:      using _Base = _Variant_storage_alias<_Types...>;
        -:  545:      using _Base::_Base;
        -:  546:    };
        -:  547:
        -:  548:  template<typename... _Types>
        -:  549:    using _Copy_ctor_alias =
        -:  550:	_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
        -:  551:
        -:  552:  template<bool, typename... _Types>
        -:  553:    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
        -:  554:    {
        -:  555:      using _Base = _Copy_ctor_alias<_Types...>;
        -:  556:      using _Base::_Base;
        -:  557:
        3:  558:      _Move_ctor_base(_Move_ctor_base&& __rhs)
        -:  559:	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
        3:  560:      {
        3:  561:	__variant_construct<_Types...>(*this, std::move(__rhs));
        3:  562:      }
------------------
_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEC2EOS4_:
        2:  558:      _Move_ctor_base(_Move_ctor_base&& __rhs)
        -:  559:	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
        2:  560:      {
        2:  560-block  0
        2:  561:	__variant_construct<_Types...>(*this, std::move(__rhs));
        2:  562:      }
------------------
_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJ12PointCommand11MoveCommandEEC2EOS4_:
        1:  558:      _Move_ctor_base(_Move_ctor_base&& __rhs)
        -:  559:	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
        1:  560:      {
        1:  560-block  0
        1:  561:	__variant_construct<_Types...>(*this, std::move(__rhs));
        1:  562:      }
------------------
        -:  563:
        -:  564:      template<typename _Up>
        -:  565:        void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
        -:  566:        {
        -:  567:	  this->_M_reset();
        -:  568:	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
        -:  569:	  this->_M_index = __rhs_index;
        -:  570:	}
        -:  571:
        -:  572:      template<typename _Up>
        -:  573:        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
        -:  574:        {
        -:  575:	  this->_M_reset();
        -:  576:	  __variant_construct_single(*this, __rhs);
        -:  577:	  this->_M_index = __rhs_index;
        -:  578:	}
        -:  579:
        5:  580:      _Move_ctor_base(const _Move_ctor_base&) = default;
------------------
_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJ15LeftLineCommand16RightLineCommandEEC2ERKS4_:
        3:  580:      _Move_ctor_base(const _Move_ctor_base&) = default;
        3:  580-block  0
------------------
_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJ12PointCommand11MoveCommandEEC2ERKS4_:
        2:  580:      _Move_ctor_base(const _Move_ctor_base&) = default;
        2:  580-block  0
------------------
        -:  581:      _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
        -:  582:      _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
        -:  583:    };
        -:  584:
        -:  585:  template<typename... _Types>
        -:  586:    struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
        -:  587:    {
        -:  588:      using _Base = _Copy_ctor_alias<_Types...>;
        -:  589:      using _Base::_Base;
        -:  590:
        -:  591:      template<typename _Up>
        -:  592:        void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
        -:  593:        {
        -:  594:	  this->_M_reset();
        -:  595:	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
        -:  596:	  this->_M_index = __rhs_index;
        -:  597:	}
        -:  598:
        -:  599:      template<typename _Up>
        -:  600:        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
        -:  601:        {
        -:  602:	  this->_M_reset();
        -:  603:	  __variant_construct_single(*this, __rhs);
        -:  604:	  this->_M_index = __rhs_index;
        -:  605:	}
        -:  606:    };
        -:  607:
        -:  608:  template<typename... _Types>
        -:  609:    using _Move_ctor_alias =
        -:  610:	_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
        -:  611:
        -:  612:  template<bool, typename... _Types>
        -:  613:    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
        -:  614:    {
        -:  615:      using _Base = _Move_ctor_alias<_Types...>;
        -:  616:      using _Base::_Base;
        -:  617:
        -:  618:      _Copy_assign_base&
        -:  619:      operator=(const _Copy_assign_base& __rhs)
        -:  620:	  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
        -:  621:      {
        -:  622:	__variant::__raw_idx_visit(
        -:  623:	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
        -:  624:	  {
        -:  625:	    if constexpr (__rhs_index != variant_npos)
        -:  626:	      {
        -:  627:		if (this->_M_index == __rhs_index)
        -:  628:		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
        -:  629:		else
        -:  630:		  {
        -:  631:		    using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
        -:  632:		    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>
        -:  633:			|| !is_nothrow_move_constructible_v<__rhs_type>)
        -:  634:		      // The standard says this->emplace<__rhs_type>(__rhs_mem)
        -:  635:		      // should be used here, but _M_destructive_copy is
        -:  636:		      // equivalent in this case. Either copy construction
        -:  637:		      // doesn't throw, so _M_destructive_copy gives strong
        -:  638:		      // exception safety guarantee, or both copy construction
        -:  639:		      // and move construction can throw, so emplace only gives
        -:  640:		      // basic exception safety anyway.
        -:  641:		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
        -:  642:		    else
        -:  643:		      __variant_cast<_Types...>(*this)
        -:  644:			= variant<_Types...>(std::in_place_index<__rhs_index>,
        -:  645:					     __rhs_mem);
        -:  646:		  }
        -:  647:	      }
        -:  648:	    else
        -:  649:	      this->_M_reset();
        -:  650:	  }, __variant_cast<_Types...>(__rhs));
        -:  651:	return *this;
        -:  652:      }
        -:  653:
        5:  654:      _Copy_assign_base(const _Copy_assign_base&) = default;
------------------
_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEC2ERKS4_:
        3:  654:      _Copy_assign_base(const _Copy_assign_base&) = default;
        3:  654-block  0
------------------
_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJ12PointCommand11MoveCommandEEC2ERKS4_:
        2:  654:      _Copy_assign_base(const _Copy_assign_base&) = default;
        2:  654-block  0
------------------
        3:  655:      _Copy_assign_base(_Copy_assign_base&&) = default;
------------------
_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEC2EOS4_:
        2:  655:      _Copy_assign_base(_Copy_assign_base&&) = default;
        2:  655-block  0
------------------
_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJ12PointCommand11MoveCommandEEC2EOS4_:
        1:  655:      _Copy_assign_base(_Copy_assign_base&&) = default;
        1:  655-block  0
------------------
        -:  656:      _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
        -:  657:    };
        -:  658:
        -:  659:  template<typename... _Types>
        -:  660:    struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
        -:  661:    {
        -:  662:      using _Base = _Move_ctor_alias<_Types...>;
        -:  663:      using _Base::_Base;
        -:  664:    };
        -:  665:
        -:  666:  template<typename... _Types>
        -:  667:    using _Copy_assign_alias =
        -:  668:      _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
        -:  669:
        -:  670:  template<bool, typename... _Types>
        -:  671:    struct _Move_assign_base : _Copy_assign_alias<_Types...>
        -:  672:    {
        -:  673:      using _Base = _Copy_assign_alias<_Types...>;
        -:  674:      using _Base::_Base;
        -:  675:
        -:  676:      _Move_assign_base&
        1:  677:      operator=(_Move_assign_base&& __rhs)
        -:  678:	  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
        -:  679:      {
        1:  680:	__variant::__raw_idx_visit(
        1:  680-block  0
       3*:  681:	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
------------------
_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS4_ENUlOT_T0_E_clIRS3_St17integral_constantImLm1EEEEDaS7_S8_:
    #####:  681:	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
------------------
_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS4_ENUlOT_T0_E_clINS0_16__variant_cookieESt17integral_constantImLm18446744073709551615EEEEDaS7_S8_:
    #####:  681:	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
------------------
_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS4_ENUlOT_T0_E_clIRS2_St17integral_constantImLm0EEEEDaS7_S8_:
       3*:  681:	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
------------------
        -:  682:	  {
        -:  683:	    if constexpr (__rhs_index != variant_npos)
        -:  684:	      {
       1*:  685:		if (this->_M_index == __rhs_index)
    %%%%%:  685-block  0
        1:  685-block  1
    #####:  686:		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
    %%%%%:  686-block  0
    %%%%%:  686-block  1
        -:  687:		else
       1*:  688:		  __variant_cast<_Types...>(*this)
    %%%%%:  688-block  0
        1:  688-block  1
       1*:  689:		    .template emplace<__rhs_index>(std::move(__rhs_mem));
        -:  690:	      }
        -:  691:	    else
    #####:  692:	      this->_M_reset();
    %%%%%:  692-block  0
        -:  693:	  }, __variant_cast<_Types...>(__rhs));
        1:  694:	return *this;
        -:  695:      }
        -:  696:
        5:  697:      _Move_assign_base(const _Move_assign_base&) = default;
------------------
_ZNSt8__detail9__variant17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEC2ERKS4_:
        3:  697:      _Move_assign_base(const _Move_assign_base&) = default;
        3:  697-block  0
------------------
_ZNSt8__detail9__variant17_Move_assign_baseILb0EJ12PointCommand11MoveCommandEEC2ERKS4_:
        2:  697:      _Move_assign_base(const _Move_assign_base&) = default;
        2:  697-block  0
------------------
        3:  698:      _Move_assign_base(_Move_assign_base&&) = default;
------------------
_ZNSt8__detail9__variant17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEC2EOS4_:
        2:  698:      _Move_assign_base(_Move_assign_base&&) = default;
        2:  698-block  0
------------------
_ZNSt8__detail9__variant17_Move_assign_baseILb0EJ12PointCommand11MoveCommandEEC2EOS4_:
        1:  698:      _Move_assign_base(_Move_assign_base&&) = default;
        1:  698-block  0
------------------
        -:  699:      _Move_assign_base& operator=(const _Move_assign_base&) = default;
        -:  700:    };
        -:  701:
        -:  702:  template<typename... _Types>
        -:  703:    struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
        -:  704:    {
        -:  705:      using _Base = _Copy_assign_alias<_Types...>;
        -:  706:      using _Base::_Base;
        -:  707:    };
        -:  708:
        -:  709:  template<typename... _Types>
        -:  710:    using _Move_assign_alias =
        -:  711:      _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
        -:  712:
        -:  713:  template<typename... _Types>
        -:  714:    struct _Variant_base : _Move_assign_alias<_Types...>
        -:  715:    {
        -:  716:      using _Base = _Move_assign_alias<_Types...>;
        -:  717:
        -:  718:      constexpr
        -:  719:      _Variant_base()
        -:  720:	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
        -:  721:      : _Variant_base(in_place_index<0>) { }
        -:  722:
        -:  723:      template<size_t _Np, typename... _Args>
        -:  724:	constexpr explicit
       17:  725:	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
       17:  726:	: _Base(__i, std::forward<_Args>(__args)...)
       17:  727:	{ }
------------------
_ZNSt8__detail9__variant13_Variant_baseIJ15LeftLineCommand16RightLineCommandEEC2ILm0EJS2_EEESt16in_place_index_tIXT_EEDpOT0_:
        5:  725:	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
        5:  726:	: _Base(__i, std::forward<_Args>(__args)...)
        5:  726-block  0
        5:  727:	{ }
------------------
_ZNSt8__detail9__variant13_Variant_baseIJ15LeftLineCommand16RightLineCommandEEC2ILm1EJS3_EEESt16in_place_index_tIXT_EEDpOT0_:
        5:  725:	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
        5:  726:	: _Base(__i, std::forward<_Args>(__args)...)
        5:  726-block  0
        5:  727:	{ }
------------------
_ZNSt8__detail9__variant13_Variant_baseIJ12PointCommand11MoveCommandEEC2ILm1EJS3_EEESt16in_place_index_tIXT_EEDpOT0_:
        3:  725:	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
        3:  726:	: _Base(__i, std::forward<_Args>(__args)...)
        3:  726-block  0
        3:  727:	{ }
------------------
_ZNSt8__detail9__variant13_Variant_baseIJ12PointCommand11MoveCommandEEC2ILm0EJS2_EEESt16in_place_index_tIXT_EEDpOT0_:
        4:  725:	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
        4:  726:	: _Base(__i, std::forward<_Args>(__args)...)
        4:  726-block  0
        4:  727:	{ }
------------------
        -:  728:
        5:  729:      _Variant_base(const _Variant_base&) = default;
------------------
_ZNSt8__detail9__variant13_Variant_baseIJ15LeftLineCommand16RightLineCommandEEC2ERKS4_:
        3:  729:      _Variant_base(const _Variant_base&) = default;
        3:  729-block  0
------------------
_ZNSt8__detail9__variant13_Variant_baseIJ12PointCommand11MoveCommandEEC2ERKS4_:
        2:  729:      _Variant_base(const _Variant_base&) = default;
        2:  729-block  0
------------------
        3:  730:      _Variant_base(_Variant_base&&) = default;
------------------
_ZNSt8__detail9__variant13_Variant_baseIJ15LeftLineCommand16RightLineCommandEEC2EOS4_:
        2:  730:      _Variant_base(_Variant_base&&) = default;
        2:  730-block  0
------------------
_ZNSt8__detail9__variant13_Variant_baseIJ12PointCommand11MoveCommandEEC2EOS4_:
        1:  730:      _Variant_base(_Variant_base&&) = default;
        1:  730-block  0
------------------
        -:  731:      _Variant_base& operator=(const _Variant_base&) = default;
        1:  732:      _Variant_base& operator=(_Variant_base&&) = default;
        1:  732-block  0
        -:  733:    };
        -:  734:
        -:  735:  // For how many times does _Tp appear in _Tuple?
        -:  736:  template<typename _Tp, typename _Tuple>
        -:  737:    struct __tuple_count;
        -:  738:
        -:  739:  template<typename _Tp, typename _Tuple>
        -:  740:    inline constexpr size_t __tuple_count_v =
        -:  741:      __tuple_count<_Tp, _Tuple>::value;
        -:  742:
        -:  743:  template<typename _Tp, typename... _Types>
        -:  744:    struct __tuple_count<_Tp, tuple<_Types...>>
        -:  745:    : integral_constant<size_t, 0> { };
        -:  746:
        -:  747:  template<typename _Tp, typename _First, typename... _Rest>
        -:  748:    struct __tuple_count<_Tp, tuple<_First, _Rest...>>
        -:  749:    : integral_constant<
        -:  750:	size_t,
        -:  751:	__tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>> { };
        -:  752:
        -:  753:  // TODO: Reuse this in <tuple> ?
        -:  754:  template<typename _Tp, typename... _Types>
        -:  755:    inline constexpr bool __exactly_once =
        -:  756:      __tuple_count_v<_Tp, tuple<_Types...>> == 1;
        -:  757:
        -:  758:  // Helper used to check for valid conversions that don't involve narrowing.
        -:  759:  template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
        -:  760:
        -:  761:  // "Build an imaginary function FUN(Ti) for each alternative type Ti"
        -:  762:  template<size_t _Ind, typename _Tp, typename _Ti, typename = void>
        -:  763:    struct _Build_FUN
        -:  764:    {
        -:  765:      // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,
        -:  766:      // but only static functions will be considered in the call below.
        -:  767:      void _S_fun();
        -:  768:    };
        -:  769:
        -:  770:  // "... for which Ti x[] = {std::forward<T>(t)}; is well-formed."
        -:  771:  template<size_t _Ind, typename _Tp, typename _Ti>
        -:  772:    struct _Build_FUN<_Ind, _Tp, _Ti,
        -:  773:		      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
        -:  774:    {
        -:  775:      // This is the FUN function for type _Ti, with index _Ind
        -:  776:      static integral_constant<size_t, _Ind> _S_fun(_Ti);
        -:  777:    };
        -:  778:
        -:  779:  template<typename _Tp, typename _Variant,
        -:  780:	   typename = make_index_sequence<variant_size_v<_Variant>>>
        -:  781:    struct _Build_FUNs;
        -:  782:
        -:  783:  template<typename _Tp, typename... _Ti, size_t... _Ind>
        -:  784:    struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
        -:  785:    : _Build_FUN<_Ind, _Tp, _Ti>...
        -:  786:    {
        -:  787:      using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
        -:  788:    };
        -:  789:
        -:  790:  // The index j of the overload FUN(Tj) selected by overload resolution
        -:  791:  // for FUN(std::forward<_Tp>(t))
        -:  792:  template<typename _Tp, typename _Variant>
        -:  793:    using _FUN_type
        -:  794:      = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));
        -:  795:
        -:  796:  // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.
        -:  797:  template<typename _Tp, typename _Variant, typename = void>
        -:  798:    struct __accepted_index
        -:  799:    : integral_constant<size_t, variant_npos>
        -:  800:    { };
        -:  801:
        -:  802:  template<typename _Tp, typename _Variant>
        -:  803:    struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
        -:  804:    : _FUN_type<_Tp, _Variant>
        -:  805:    { };
        -:  806:
        -:  807:  // Returns the raw storage for __v.
        -:  808:  template<typename _Variant>
        -:  809:    void* __get_storage(_Variant&& __v) noexcept
        -:  810:    { return __v._M_storage(); }
        -:  811:
        -:  812:  template <typename _Maybe_variant_cookie, typename _Variant>
        -:  813:    struct _Extra_visit_slot_needed
        -:  814:    {
        -:  815:      template <typename> struct _Variant_never_valueless;
        -:  816:
        -:  817:      template <typename... _Types>
        -:  818:	struct _Variant_never_valueless<variant<_Types...>>
        -:  819:	: bool_constant<__variant::__never_valueless<_Types...>()> {};
        -:  820:
        -:  821:      static constexpr bool value =
        -:  822:	(is_same_v<_Maybe_variant_cookie, __variant_cookie>
        -:  823:	 || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)
        -:  824:	&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
        -:  825:    };
        -:  826:
        -:  827:  // Used for storing a multi-dimensional vtable.
        -:  828:  template<typename _Tp, size_t... _Dimensions>
        -:  829:    struct _Multi_array;
        -:  830:
        -:  831:  // Partial specialization with rank zero, stores a single _Tp element.
        -:  832:  template<typename _Tp>
        -:  833:    struct _Multi_array<_Tp>
        -:  834:    {
        -:  835:      template<typename>
        -:  836:	struct __untag_result
        -:  837:	: false_type
        -:  838:	{ using element_type = _Tp; };
        -:  839:
        -:  840:      template <typename... _Args>
        -:  841:	struct __untag_result<const void(*)(_Args...)>
        -:  842:	: false_type
        -:  843:	{ using element_type = void(*)(_Args...); };
        -:  844:
        -:  845:      template <typename... _Args>
        -:  846:	struct __untag_result<__variant_cookie(*)(_Args...)>
        -:  847:	: false_type
        -:  848:	{ using element_type = void(*)(_Args...); };
        -:  849:
        -:  850:      template <typename... _Args>
        -:  851:	struct __untag_result<__variant_idx_cookie(*)(_Args...)>
        -:  852:	: false_type
        -:  853:	{ using element_type = void(*)(_Args...); };
        -:  854:
        -:  855:      template <typename _Res, typename... _Args>
        -:  856:	struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
        -:  857:	: true_type
        -:  858:	{ using element_type = _Res(*)(_Args...); };
        -:  859:
        -:  860:      using __result_is_deduced = __untag_result<_Tp>;
        -:  861:
        -:  862:      constexpr const typename __untag_result<_Tp>::element_type&
       40:  863:      _M_access() const
       40:  864:      { return _M_data; }
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS4_S5_EEES7_EEvOT0_OT1_EUlOT_E_OSt7variantIJS4_S5_EEEJEE9_M_accessEv:
        2:  863:      _M_access() const
        2:  864:      { return _M_data; }
        2:  864-block  0
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS4_S5_EEES7_EEvOT0_OT1_EUlOT_E_OSt7variantIJS4_S5_EEEJEE9_M_accessEv:
        1:  863:      _M_access() const
        1:  864:      { return _M_data; }
        1:  864-block  0
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS4_S5_EEERKS7_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS4_S5_EEEJEE9_M_accessEv:
        3:  863:      _M_access() const
        3:  864:      { return _M_data; }
        3:  864-block  0
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS4_S5_EEERKS7_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS4_S5_EEEJEE9_M_accessEv:
        2:  863:      _M_access() const
        2:  864:      { return _M_data; }
        2:  864-block  0
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ15LeftLineCommand16RightLineCommandEEEJEE9_M_accessEv:
        3:  863:      _M_access() const
        3:  864:      { return _M_data; }
        3:  864-block  0
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ12PointCommand11MoveCommandEEEJEE9_M_accessEv:
        2:  863:      _M_access() const
        2:  864:      { return _M_data; }
        2:  864-block  0
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS6_EUlOT_T0_E_RSt7variantIJS4_S5_EEEJEE9_M_accessEv:
        1:  863:      _M_access() const
        1:  864:      { return _M_data; }
        1:  864-block  0
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJ12PointCommand11MoveCommandEE8_M_resetEvEUlOT_E_RSt7variantIJS3_S4_EEEJEE9_M_accessEv:
       10:  863:      _M_access() const
       10:  864:      { return _M_data; }
       10:  864-block  0
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEE8_M_resetEvEUlOT_E_RSt7variantIJS3_S4_EEEJEE9_M_accessEv:
       16:  863:      _M_access() const
       16:  864:      { return _M_data; }
       16:  864-block  0
------------------
        -:  865:
        -:  866:      typename __untag_result<_Tp>::element_type _M_data;
        -:  867:    };
        -:  868:
        -:  869:  // Partial specialization with rank >= 1.
        -:  870:  template<typename _Ret,
        -:  871:	   typename _Visitor,
        -:  872:	   typename... _Variants,
        -:  873:	   size_t __first, size_t... __rest>
        -:  874:    struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
        -:  875:    {
        -:  876:      static constexpr size_t __index =
        -:  877:	sizeof...(_Variants) - sizeof...(__rest) - 1;
        -:  878:
        -:  879:      using _Variant = typename _Nth_type<__index, _Variants...>::type;
        -:  880:
        -:  881:      static constexpr int __do_cookie =
        -:  882:	_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
        -:  883:
        -:  884:      using _Tp = _Ret(*)(_Visitor, _Variants...);
        -:  885:
        -:  886:      template<typename... _Args>
        -:  887:	constexpr decltype(auto)
       40:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        9:  890:	  return _M_arr[__first_index + __do_cookie]
       40:  891:	    ._M_access(__rest_indices...);
        -:  892:	}
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS4_S5_EEES7_EEvOT0_OT1_EUlOT_E_OSt7variantIJS4_S5_EEEJLm2EEE9_M_accessIJEEEDcmDpT_:
        2:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        2:  890:	  return _M_arr[__first_index + __do_cookie]
        2:  891:	    ._M_access(__rest_indices...);
        2:  891-block  0
        -:  892:	}
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS4_S5_EEES7_EEvOT0_OT1_EUlOT_E_OSt7variantIJS4_S5_EEEJLm2EEE9_M_accessIJEEEDcmDpT_:
        1:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        1:  890:	  return _M_arr[__first_index + __do_cookie]
        1:  891:	    ._M_access(__rest_indices...);
        1:  891-block  0
        -:  892:	}
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS4_S5_EEERKS7_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS4_S5_EEEJLm2EEE9_M_accessIJEEEDcmDpT_:
        3:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        3:  890:	  return _M_arr[__first_index + __do_cookie]
        3:  891:	    ._M_access(__rest_indices...);
        3:  891-block  0
        -:  892:	}
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS4_S5_EEERKS7_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS4_S5_EEEJLm2EEE9_M_accessIJEEEDcmDpT_:
        2:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        2:  890:	  return _M_arr[__first_index + __do_cookie]
        2:  891:	    ._M_access(__rest_indices...);
        2:  891-block  0
        -:  892:	}
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ15LeftLineCommand16RightLineCommandEEEJLm2EEE9_M_accessIJEEEDcmDpT_:
        3:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        -:  890:	  return _M_arr[__first_index + __do_cookie]
        3:  891:	    ._M_access(__rest_indices...);
        3:  891-block  0
        -:  892:	}
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ12PointCommand11MoveCommandEEEJLm2EEE9_M_accessIJEEEDcmDpT_:
        2:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        -:  890:	  return _M_arr[__first_index + __do_cookie]
        2:  891:	    ._M_access(__rest_indices...);
        2:  891-block  0
        -:  892:	}
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS6_EUlOT_T0_E_RSt7variantIJS4_S5_EEEJLm2EEE9_M_accessIJEEEDcmDpT_:
        1:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        1:  890:	  return _M_arr[__first_index + __do_cookie]
        1:  891:	    ._M_access(__rest_indices...);
        1:  891-block  0
        -:  892:	}
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJ12PointCommand11MoveCommandEE8_M_resetEvEUlOT_E_RSt7variantIJS3_S4_EEEJLm2EEE9_M_accessIJEEEDcmDpT_:
       10:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        -:  890:	  return _M_arr[__first_index + __do_cookie]
       10:  891:	    ._M_access(__rest_indices...);
       10:  891-block  0
        -:  892:	}
------------------
_ZNKSt8__detail9__variant12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEE8_M_resetEvEUlOT_E_RSt7variantIJS3_S4_EEEJLm2EEE9_M_accessIJEEEDcmDpT_:
       16:  888:	_M_access(size_t __first_index, _Args... __rest_indices) const
        -:  889:        {
        -:  890:	  return _M_arr[__first_index + __do_cookie]
       16:  891:	    ._M_access(__rest_indices...);
       16:  891-block  0
        -:  892:	}
------------------
        -:  893:
        -:  894:      _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
        -:  895:    };
        -:  896:
        -:  897:  // Creates a multi-dimensional vtable recursively.
        -:  898:  //
        -:  899:  // For example,
        -:  900:  // visit([](auto, auto){},
        -:  901:  //       variant<int, char>(),  // typedef'ed as V1
        -:  902:  //       variant<float, double, long double>())  // typedef'ed as V2
        -:  903:  // will trigger instantiations of:
        -:  904:  // __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 2, 3>,
        -:  905:  //                   tuple<V1&&, V2&&>, std::index_sequence<>>
        -:  906:  //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
        -:  907:  //                     tuple<V1&&, V2&&>, std::index_sequence<0>>
        -:  908:  //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
        -:  909:  //                       tuple<V1&&, V2&&>, std::index_sequence<0, 0>>
        -:  910:  //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
        -:  911:  //                       tuple<V1&&, V2&&>, std::index_sequence<0, 1>>
        -:  912:  //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
        -:  913:  //                       tuple<V1&&, V2&&>, std::index_sequence<0, 2>>
        -:  914:  //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
        -:  915:  //                     tuple<V1&&, V2&&>, std::index_sequence<1>>
        -:  916:  //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
        -:  917:  //                       tuple<V1&&, V2&&>, std::index_sequence<1, 0>>
        -:  918:  //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
        -:  919:  //                       tuple<V1&&, V2&&>, std::index_sequence<1, 1>>
        -:  920:  //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
        -:  921:  //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>
        -:  922:  // The returned multi-dimensional vtable can be fast accessed by the visitor
        -:  923:  // using index calculation.
        -:  924:  template<typename _Array_type, typename _Index_seq>
        -:  925:    struct __gen_vtable_impl;
        -:  926:
        -:  927:  // Defines the _S_apply() member that returns a _Multi_array populated
        -:  928:  // with function pointers that perform the visitation expressions e(m)
        -:  929:  // for each valid pack of indexes into the variant types _Variants.
        -:  930:  //
        -:  931:  // This partial specialization builds up the index sequences by recursively
        -:  932:  // calling _S_apply() on the next specialization of __gen_vtable_impl.
        -:  933:  // The base case of the recursion defines the actual function pointers.
        -:  934:  template<typename _Result_type, typename _Visitor, size_t... __dimensions,
        -:  935:	   typename... _Variants, size_t... __indices>
        -:  936:    struct __gen_vtable_impl<
        -:  937:	_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
        -:  938:	std::index_sequence<__indices...>>
        -:  939:    {
        -:  940:      using _Next =
        -:  941:	  remove_reference_t<typename _Nth_type<sizeof...(__indices),
        -:  942:			     _Variants...>::type>;
        -:  943:      using _Array_type =
        -:  944:	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
        -:  945:		       __dimensions...>;
        -:  946:
        -:  947:      static constexpr _Array_type
        -:  948:      _S_apply()
        -:  949:      {
        -:  950:	_Array_type __vtable{};
        -:  951:	_S_apply_all_alts(
        -:  952:	  __vtable, make_index_sequence<variant_size_v<_Next>>());
        -:  953:	return __vtable;
        -:  954:      }
        -:  955:
        -:  956:      template<size_t... __var_indices>
        -:  957:	static constexpr void
        -:  958:	_S_apply_all_alts(_Array_type& __vtable,
        -:  959:			  std::index_sequence<__var_indices...>)
        -:  960:	{
        -:  961:	  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
        -:  962:	    (_S_apply_single_alt<true, __var_indices>(
        -:  963:	      __vtable._M_arr[__var_indices + 1],
        -:  964:	      &(__vtable._M_arr[0])), ...);
        -:  965:	  else
        -:  966:	    (_S_apply_single_alt<false, __var_indices>(
        -:  967:	      __vtable._M_arr[__var_indices]), ...);
        -:  968:	}
        -:  969:
        -:  970:      template<bool __do_cookie, size_t __index, typename _Tp>
        -:  971:	static constexpr void
        -:  972:	_S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
        -:  973:	{
        -:  974:	  if constexpr (__do_cookie)
        -:  975:	    {
        -:  976:	      __element = __gen_vtable_impl<
        -:  977:		_Tp,
        -:  978:		std::index_sequence<__indices..., __index>>::_S_apply();
        -:  979:	      *__cookie_element = __gen_vtable_impl<
        -:  980:		_Tp,
        -:  981:		std::index_sequence<__indices..., variant_npos>>::_S_apply();
        -:  982:	    }
        -:  983:	  else
        -:  984:	    {
        -:  985:	      auto __tmp_element = __gen_vtable_impl<
        -:  986:		remove_reference_t<decltype(__element)>,
        -:  987:		std::index_sequence<__indices..., __index>>::_S_apply();
        -:  988:	      static_assert(is_same_v<_Tp, decltype(__tmp_element)>,
        -:  989:			    "std::visit requires the visitor to have the same "
        -:  990:			    "return type for all alternatives of a variant");
        -:  991:	      __element = __tmp_element;
        -:  992:	    }
        -:  993:	}
        -:  994:    };
        -:  995:
        -:  996:  // This partial specialization is the base case for the recursion.
        -:  997:  // It populates a _Multi_array element with the address of a function
        -:  998:  // that invokes the visitor with the alternatives specified by __indices.
        -:  999:  template<typename _Result_type, typename _Visitor, typename... _Variants,
        -: 1000:	   size_t... __indices>
        -: 1001:    struct __gen_vtable_impl<
        -: 1002:      _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
        -: 1003:		   std::index_sequence<__indices...>>
        -: 1004:    {
        -: 1005:      using _Array_type =
        -: 1006:	  _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
        -: 1007:
        -: 1008:      template<size_t __index, typename _Variant>
        -: 1009:	static constexpr decltype(auto)
      14*: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
      14*: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        -: 1014:	  else
    #####: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE28__element_by_index_or_cookieILm1ESN_EEDcSD_:
        1: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        1: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        1: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS7_EUlOT_T0_E_RSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE28__element_by_index_or_cookieILm0ESG_EEDcOSB_:
        1: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        1: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        1: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS7_EUlOT_T0_E_RSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE28__element_by_index_or_cookieILm18446744073709551615ESG_EEDcOSB_:
    #####: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        -: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        -: 1014:	  else
    #####: 1015:	    return __variant_cookie{};
    %%%%%: 1015-block  0
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS7_EUlOT_T0_E_RSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE28__element_by_index_or_cookieILm1ESG_EEDcOSB_:
    #####: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
    #####: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
    %%%%%: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ12PointCommand11MoveCommandEEEJEEESt16integer_sequenceImJLm0EEEE28__element_by_index_or_cookieILm0ESK_EEDcOT0_:
        1: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        1: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        1: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ12PointCommand11MoveCommandEEEJEEESt16integer_sequenceImJLm1EEEE28__element_by_index_or_cookieILm1ESK_EEDcOT0_:
        1: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        1: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        1: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ15LeftLineCommand16RightLineCommandEEEJEEESt16integer_sequenceImJLm0EEEE28__element_by_index_or_cookieILm0ESK_EEDcOT0_:
        1: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        1: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        1: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ15LeftLineCommand16RightLineCommandEEEJEEESt16integer_sequenceImJLm1EEEE28__element_by_index_or_cookieILm1ESK_EEDcOT0_:
        2: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        2: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        2: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE28__element_by_index_or_cookieILm0ESN_EEDcSD_:
        1: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        1: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        1: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE28__element_by_index_or_cookieILm18446744073709551615ESN_EEDcSD_:
    #####: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        -: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        -: 1014:	  else
    #####: 1015:	    return __variant_cookie{};
    %%%%%: 1015-block  0
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE28__element_by_index_or_cookieILm1ESJ_EEDcSB_:
        2: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        2: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        2: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE28__element_by_index_or_cookieILm0ESN_EEDcSD_:
        1: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        1: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        1: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE28__element_by_index_or_cookieILm18446744073709551615ESN_EEDcSD_:
    #####: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        -: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        -: 1014:	  else
    #####: 1015:	    return __variant_cookie{};
    %%%%%: 1015-block  0
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE28__element_by_index_or_cookieILm1ESN_EEDcSD_:
        2: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        2: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        2: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE28__element_by_index_or_cookieILm0ESJ_EEDcSB_:
        1: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        1: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        1: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE28__element_by_index_or_cookieILm18446744073709551615ESJ_EEDcSB_:
    #####: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        -: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        -: 1014:	  else
    #####: 1015:	    return __variant_cookie{};
    %%%%%: 1015-block  0
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE28__element_by_index_or_cookieILm1ESJ_EEDcSB_:
    #####: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
    #####: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
    %%%%%: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE28__element_by_index_or_cookieILm0ESJ_EEDcSB_:
    #####: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
    #####: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
    %%%%%: 1013-block  0
        -: 1014:	  else
        -: 1015:	    return __variant_cookie{};
        -: 1016:	}
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE28__element_by_index_or_cookieILm18446744073709551615ESJ_EEDcSB_:
    #####: 1010:	__element_by_index_or_cookie(_Variant&& __var) noexcept
        -: 1011:        {
        -: 1012:	  if constexpr (__index != variant_npos)
        -: 1013:	    return __variant::__get<__index>(std::forward<_Variant>(__var));
        -: 1014:	  else
    #####: 1015:	    return __variant_cookie{};
    %%%%%: 1015-block  0
        -: 1016:	}
------------------
        -: 1017:
        -: 1018:      static constexpr decltype(auto)
      40*: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
       1*: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
    #####: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
       1*: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
       8*: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
    #####: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        5: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
       26: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
       26: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
       9*: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeESJ_SN_:
        1: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        1: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        1: 1030-block  0
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        1: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEE8_M_resetEvEUlOT_E_RSt7variantIJS4_S5_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeESA_SD_:
        7: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        7: 1039:	  return std::__invoke_r<_Result_type>(
        7: 1039-block  0
        -: 1040:	      std::forward<_Visitor>(__visitor),
        7: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        -: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEE8_M_resetEvEUlOT_E_RSt7variantIJS4_S5_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeESA_SD_:
        9: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        9: 1039:	  return std::__invoke_r<_Result_type>(
        9: 1039-block  0
        -: 1040:	      std::forward<_Visitor>(__visitor),
        9: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        -: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJ12PointCommand11MoveCommandEE8_M_resetEvEUlOT_E_RSt7variantIJS4_S5_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeESA_SD_:
        6: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        6: 1039:	  return std::__invoke_r<_Result_type>(
        6: 1039-block  0
        -: 1040:	      std::forward<_Visitor>(__visitor),
        6: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        -: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJ12PointCommand11MoveCommandEE8_M_resetEvEUlOT_E_RSt7variantIJS4_S5_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeESA_SD_:
        4: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        4: 1039:	  return std::__invoke_r<_Result_type>(
        4: 1039-block  0
        -: 1040:	      std::forward<_Visitor>(__visitor),
        4: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        -: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS7_EUlOT_T0_E_RSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeESD_SG_:
        1: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        1: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        1: 1024-block  0
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        1: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        1: 1042:      }
        1: 1042-block  0
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS7_EUlOT_T0_E_RSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE14__visit_invokeESD_SG_:
    #####: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
    #####: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
    #####: 1025:	      __element_by_index_or_cookie<__indices>(
    %%%%%: 1025-block  0
    $$$$$: 1025-block  1
        -: 1026:		std::forward<_Variants>(__vars))...,
    #####: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
    #####: 1042:      }
    %%%%%: 1042-block  0
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS7_EUlOT_T0_E_RSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeESD_SG_:
    #####: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
    #####: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
    %%%%%: 1024-block  0
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
    #####: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
    #####: 1042:      }
    %%%%%: 1042-block  0
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ12PointCommand11MoveCommandEEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeESF_SK_:
        1: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        1: 1037:		std::forward<_Variants>(__vars))...);
        1: 1037-block  0
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        -: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ12PointCommand11MoveCommandEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeESF_SK_:
        1: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        1: 1037:		std::forward<_Variants>(__vars))...);
        1: 1037-block  0
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        -: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ15LeftLineCommand16RightLineCommandEEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeESF_SK_:
        1: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        1: 1037:		std::forward<_Variants>(__vars))...);
        1: 1037-block  0
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        -: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_ERSt7variantIJ15LeftLineCommand16RightLineCommandEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeESF_SK_:
        2: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        -: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        2: 1037:		std::forward<_Variants>(__vars))...);
        2: 1037-block  0
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        -: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeESH_SK_:
        2: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        2: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        2: 1030-block  0
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        2: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE14__visit_invokeESJ_SN_:
    #####: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
    #####: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
    #####: 1031:	      __element_by_index_or_cookie<__indices>(
    %%%%%: 1031-block  0
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
    #####: 1042:      }
    %%%%%: 1042-block  0
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeESJ_SN_:
        1: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        1: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        1: 1030-block  0
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        1: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeESJ_SN_:
        1: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        1: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        1: 1030-block  0
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        1: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE14__visit_invokeESJ_SN_:
    #####: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
    #####: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
    #####: 1031:	      __element_by_index_or_cookie<__indices>(
    %%%%%: 1031-block  0
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
    #####: 1042:      }
    %%%%%: 1042-block  0
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Copy_ctor_baseILb0EJS5_S6_EEERKS8_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeESJ_SN_:
        2: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        2: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        2: 1030-block  0
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        2: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeESH_SK_:
        1: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
        1: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
        1: 1030-block  0
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
        1: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE14__visit_invokeESH_SK_:
    #####: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
    #####: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
    #####: 1031:	      __element_by_index_or_cookie<__indices>(
    %%%%%: 1031-block  0
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
    #####: 1042:      }
    %%%%%: 1042-block  0
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ12PointCommand11MoveCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeESH_SK_:
    #####: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
    #####: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
    %%%%%: 1030-block  0
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
    #####: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeESH_SK_:
    #####: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
    #####: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
    %%%%%: 1030-block  0
        -: 1031:	      __element_by_index_or_cookie<__indices>(
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
    #####: 1042:      }
------------------
_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS0_15_Move_ctor_baseILb0EJS5_S6_EEES8_EEvOT0_OT1_EUlOT_E_OSt7variantIJS5_S6_EEEJEEESt16integer_sequenceImJLm18446744073709551615EEEE14__visit_invokeESH_SK_:
    #####: 1019:      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
        -: 1020:      {
        -: 1021:	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        -: 1022:	  // For raw visitation using indices, pass the indices to the visitor
        -: 1023:	  // and discard the return value:
        -: 1024:	  std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1025:	      __element_by_index_or_cookie<__indices>(
        -: 1026:		std::forward<_Variants>(__vars))...,
        -: 1027:	      integral_constant<size_t, __indices>()...);
        -: 1028:	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
        -: 1029:	  // For raw visitation without indices, and discard the return value:
    #####: 1030:	  std::__invoke(std::forward<_Visitor>(__visitor),
    #####: 1031:	      __element_by_index_or_cookie<__indices>(
    %%%%%: 1031-block  0
        -: 1032:		std::forward<_Variants>(__vars))...);
        -: 1033:	else if constexpr (_Array_type::__result_is_deduced::value)
        -: 1034:	  // For the usual std::visit case deduce the return value:
        -: 1035:	  return std::__invoke(std::forward<_Visitor>(__visitor),
        -: 1036:	      __element_by_index_or_cookie<__indices>(
        -: 1037:		std::forward<_Variants>(__vars))...);
        -: 1038:	else // for std::visit<R> use INVOKE<R>
        -: 1039:	  return std::__invoke_r<_Result_type>(
        -: 1040:	      std::forward<_Visitor>(__visitor),
        -: 1041:	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
    #####: 1042:      }
    %%%%%: 1042-block  0
------------------
        -: 1043:
        -: 1044:      static constexpr auto
        -: 1045:      _S_apply()
        -: 1046:      {
        -: 1047:	if constexpr (_Array_type::__result_is_deduced::value)
        -: 1048:	  {
        -: 1049:	    constexpr bool __visit_ret_type_mismatch =
        -: 1050:	      !is_same_v<typename _Result_type::type,
        -: 1051:			 decltype(__visit_invoke(std::declval<_Visitor>(),
        -: 1052:				    std::declval<_Variants>()...))>;
        -: 1053:	    if constexpr (__visit_ret_type_mismatch)
        -: 1054:	      {
        -: 1055:		struct __cannot_match {};
        -: 1056:		return __cannot_match{};
        -: 1057:	      }
        -: 1058:	    else
        -: 1059:	      return _Array_type{&__visit_invoke};
        -: 1060:	  }
        -: 1061:	else
        -: 1062:	  return _Array_type{&__visit_invoke};
        -: 1063:      }
        -: 1064:    };
        -: 1065:
        -: 1066:  template<typename _Result_type, typename _Visitor, typename... _Variants>
        -: 1067:    struct __gen_vtable
        -: 1068:    {
        -: 1069:      using _Array_type =
        -: 1070:	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
        -: 1071:		       variant_size_v<remove_reference_t<_Variants>>...>;
        -: 1072:
        -: 1073:      static constexpr _Array_type _S_vtable
        -: 1074:	= __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
        -: 1075:    };
        -: 1076:
        -: 1077:  template<size_t _Np, typename _Tp>
        -: 1078:    struct _Base_dedup : public _Tp { };
        -: 1079:
        -: 1080:  template<typename _Variant, typename __indices>
        -: 1081:    struct _Variant_hash_base;
        -: 1082:
        -: 1083:  template<typename... _Types, size_t... __indices>
        -: 1084:    struct _Variant_hash_base<variant<_Types...>,
        -: 1085:			      std::index_sequence<__indices...>>
        -: 1086:    : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };
        -: 1087:
        -: 1088:  // Equivalent to decltype(get<_Np>(as-variant(declval<_Variant>())))
        -: 1089:  template<size_t _Np, typename _Variant,
        -: 1090:      typename _AsV = decltype(__variant::__as(std::declval<_Variant>())),
        -: 1091:      typename _Tp = variant_alternative_t<_Np, remove_reference_t<_AsV>>>
        -: 1092:    using __get_t
        -: 1093:      = conditional_t<is_lvalue_reference_v<_Variant>, _Tp&, _Tp&&>;
        -: 1094:
        -: 1095:  // Return type of std::visit.
        -: 1096:  template<typename _Visitor, typename... _Variants>
        -: 1097:    using __visit_result_t
        -: 1098:      = invoke_result_t<_Visitor, __get_t<0, _Variants>...>;
        -: 1099:
        -: 1100:  template<typename _Tp, typename... _Types>
        -: 1101:    constexpr inline bool __same_types = (is_same_v<_Tp, _Types> && ...);
        -: 1102:
        -: 1103:  template <typename _Visitor, typename _Variant, size_t... _Idxs>
        -: 1104:    constexpr bool __check_visitor_results(std::index_sequence<_Idxs...>)
        -: 1105:    {
        -: 1106:      return __same_types<
        -: 1107:	invoke_result_t<_Visitor, __get_t<_Idxs, _Variant>>...
        -: 1108:	>;
        -: 1109:    }
        -: 1110:
        -: 1111:} // namespace __variant
        -: 1112:} // namespace __detail
        -: 1113:
        -: 1114:  template<size_t _Np, typename _Variant, typename... _Args>
       1*: 1115:    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
        -: 1116:    {
       1*: 1117:      __v._M_index = _Np;
       1*: 1118:      auto&& __storage = __detail::__variant::__get<_Np>(__v);
       1*: 1119:      ::new ((void*)std::addressof(__storage))
        -: 1120:        remove_reference_t<decltype(__storage)>
       1*: 1121:	  (std::forward<_Args>(__args)...);
       1*: 1122:    }
------------------
_ZSt28__variant_construct_by_indexILm1ESt7variantIJ15LeftLineCommand16RightLineCommandEEJS2_EEvRT0_DpOT1_:
    #####: 1115:    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
        -: 1116:    {
    #####: 1117:      __v._M_index = _Np;
    #####: 1118:      auto&& __storage = __detail::__variant::__get<_Np>(__v);
    %%%%%: 1118-block  0
    #####: 1119:      ::new ((void*)std::addressof(__storage))
        -: 1120:        remove_reference_t<decltype(__storage)>
    #####: 1121:	  (std::forward<_Args>(__args)...);
    #####: 1122:    }
------------------
_ZSt28__variant_construct_by_indexILm0ESt7variantIJ15LeftLineCommand16RightLineCommandEEJS1_EEvRT0_DpOT1_:
        1: 1115:    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
        -: 1116:    {
        1: 1117:      __v._M_index = _Np;
        1: 1118:      auto&& __storage = __detail::__variant::__get<_Np>(__v);
        1: 1118-block  0
        1: 1119:      ::new ((void*)std::addressof(__storage))
        -: 1120:        remove_reference_t<decltype(__storage)>
        1: 1121:	  (std::forward<_Args>(__args)...);
        1: 1122:    }
------------------
        -: 1123:
        -: 1124:  template<typename _Tp, typename... _Types>
        -: 1125:    constexpr bool
        -: 1126:    holds_alternative(const variant<_Types...>& __v) noexcept
        -: 1127:    {
        -: 1128:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1129:		    "T must occur exactly once in alternatives");
        -: 1130:      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
        -: 1131:    }
        -: 1132:
        -: 1133:  template<typename _Tp, typename... _Types>
        -: 1134:    constexpr _Tp& get(variant<_Types...>& __v)
        -: 1135:    {
        -: 1136:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1137:		    "T must occur exactly once in alternatives");
        -: 1138:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        -: 1139:      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
        -: 1140:    }
        -: 1141:
        -: 1142:  template<typename _Tp, typename... _Types>
        -: 1143:    constexpr _Tp&& get(variant<_Types...>&& __v)
        -: 1144:    {
        -: 1145:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1146:		    "T must occur exactly once in alternatives");
        -: 1147:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        -: 1148:      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
        -: 1149:	std::move(__v));
        -: 1150:    }
        -: 1151:
        -: 1152:  template<typename _Tp, typename... _Types>
        -: 1153:    constexpr const _Tp& get(const variant<_Types...>& __v)
        -: 1154:    {
        -: 1155:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1156:		    "T must occur exactly once in alternatives");
        -: 1157:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        -: 1158:      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
        -: 1159:    }
        -: 1160:
        -: 1161:  template<typename _Tp, typename... _Types>
        -: 1162:    constexpr const _Tp&& get(const variant<_Types...>&& __v)
        -: 1163:    {
        -: 1164:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1165:		    "T must occur exactly once in alternatives");
        -: 1166:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        -: 1167:      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
        -: 1168:	std::move(__v));
        -: 1169:    }
        -: 1170:
        -: 1171:  template<size_t _Np, typename... _Types>
        -: 1172:    constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
        7: 1173:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1174:    {
        -: 1175:      using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
        -: 1176:      static_assert(_Np < sizeof...(_Types),
        -: 1177:		    "The index must be in [0, number of alternatives)");
        -: 1178:      static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
       7*: 1179:      if (__ptr && __ptr->index() == _Np)
        7: 1180:	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
    #####: 1181:      return nullptr;
        -: 1182:    }
------------------
_ZSt6get_ifILm1EJ12PointCommand11MoveCommandEENSt11add_pointerINSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEE4typeEPS7_:
        1: 1173:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1174:    {
        -: 1175:      using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
        -: 1176:      static_assert(_Np < sizeof...(_Types),
        -: 1177:		    "The index must be in [0, number of alternatives)");
        -: 1178:      static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
       1*: 1179:      if (__ptr && __ptr->index() == _Np)
        1: 1179-block  0
        1: 1179-block  1
        1: 1179-block  2
    %%%%%: 1179-block  3
        1: 1179-block  4
        1: 1180:	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
        1: 1180-block  0
    #####: 1181:      return nullptr;
    %%%%%: 1181-block  0
        -: 1182:    }
------------------
_ZSt6get_ifILm0EJ12PointCommand11MoveCommandEENSt11add_pointerINSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEE4typeEPS7_:
        2: 1173:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1174:    {
        -: 1175:      using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
        -: 1176:      static_assert(_Np < sizeof...(_Types),
        -: 1177:		    "The index must be in [0, number of alternatives)");
        -: 1178:      static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
       2*: 1179:      if (__ptr && __ptr->index() == _Np)
        2: 1179-block  0
        2: 1179-block  1
        2: 1179-block  2
    %%%%%: 1179-block  3
        2: 1179-block  4
        2: 1180:	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
        2: 1180-block  0
    #####: 1181:      return nullptr;
    %%%%%: 1181-block  0
        -: 1182:    }
------------------
_ZSt6get_ifILm0EJ15LeftLineCommand16RightLineCommandEENSt11add_pointerINSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEE4typeEPS7_:
        2: 1173:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1174:    {
        -: 1175:      using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
        -: 1176:      static_assert(_Np < sizeof...(_Types),
        -: 1177:		    "The index must be in [0, number of alternatives)");
        -: 1178:      static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
       2*: 1179:      if (__ptr && __ptr->index() == _Np)
        2: 1179-block  0
        2: 1179-block  1
        2: 1179-block  2
    %%%%%: 1179-block  3
        2: 1179-block  4
        2: 1180:	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
        2: 1180-block  0
    #####: 1181:      return nullptr;
    %%%%%: 1181-block  0
        -: 1182:    }
------------------
_ZSt6get_ifILm1EJ15LeftLineCommand16RightLineCommandEENSt11add_pointerINSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEE4typeEPS7_:
        2: 1173:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1174:    {
        -: 1175:      using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
        -: 1176:      static_assert(_Np < sizeof...(_Types),
        -: 1177:		    "The index must be in [0, number of alternatives)");
        -: 1178:      static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
       2*: 1179:      if (__ptr && __ptr->index() == _Np)
        2: 1179-block  0
        2: 1179-block  1
        2: 1179-block  2
    %%%%%: 1179-block  3
        2: 1179-block  4
        2: 1180:	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
        2: 1180-block  0
    #####: 1181:      return nullptr;
    %%%%%: 1181-block  0
        -: 1182:    }
------------------
        -: 1183:
        -: 1184:  template<size_t _Np, typename... _Types>
        -: 1185:    constexpr
        -: 1186:    add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
        -: 1187:    get_if(const variant<_Types...>* __ptr) noexcept
        -: 1188:    {
        -: 1189:      using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
        -: 1190:      static_assert(_Np < sizeof...(_Types),
        -: 1191:		    "The index must be in [0, number of alternatives)");
        -: 1192:      static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
        -: 1193:      if (__ptr && __ptr->index() == _Np)
        -: 1194:	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
        -: 1195:      return nullptr;
        -: 1196:    }
        -: 1197:
        -: 1198:  template<typename _Tp, typename... _Types>
        -: 1199:    constexpr add_pointer_t<_Tp>
        7: 1200:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1201:    {
        -: 1202:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1203:		    "T must occur exactly once in alternatives");
        -: 1204:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        7: 1205:      return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
        7: 1206:	  __ptr);
        -: 1207:    }
------------------
_ZSt6get_ifI11MoveCommandJ12PointCommandS0_EENSt11add_pointerIT_E4typeEPSt7variantIJDpT0_EE:
        1: 1200:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1201:    {
        -: 1202:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1203:		    "T must occur exactly once in alternatives");
        -: 1204:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        1: 1205:      return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
        1: 1205-block  0
        1: 1206:	  __ptr);
        -: 1207:    }
------------------
_ZSt6get_ifI12PointCommandJS0_11MoveCommandEENSt11add_pointerIT_E4typeEPSt7variantIJDpT0_EE:
        2: 1200:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1201:    {
        -: 1202:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1203:		    "T must occur exactly once in alternatives");
        -: 1204:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        2: 1205:      return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
        2: 1205-block  0
        2: 1206:	  __ptr);
        -: 1207:    }
------------------
_ZSt6get_ifI15LeftLineCommandJS0_16RightLineCommandEENSt11add_pointerIT_E4typeEPSt7variantIJDpT0_EE:
        2: 1200:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1201:    {
        -: 1202:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1203:		    "T must occur exactly once in alternatives");
        -: 1204:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        2: 1205:      return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
        2: 1205-block  0
        2: 1206:	  __ptr);
        -: 1207:    }
------------------
_ZSt6get_ifI16RightLineCommandJ15LeftLineCommandS0_EENSt11add_pointerIT_E4typeEPSt7variantIJDpT0_EE:
        2: 1200:    get_if(variant<_Types...>* __ptr) noexcept
        -: 1201:    {
        -: 1202:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1203:		    "T must occur exactly once in alternatives");
        -: 1204:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        2: 1205:      return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
        2: 1205-block  0
        2: 1206:	  __ptr);
        -: 1207:    }
------------------
        -: 1208:
        -: 1209:  template<typename _Tp, typename... _Types>
        -: 1210:    constexpr add_pointer_t<const _Tp>
        -: 1211:    get_if(const variant<_Types...>* __ptr) noexcept
        -: 1212:    {
        -: 1213:      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
        -: 1214:		    "T must occur exactly once in alternatives");
        -: 1215:      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
        -: 1216:      return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
        -: 1217:	  __ptr);
        -: 1218:    }
        -: 1219:
        -: 1220:  struct monostate { };
        -: 1221:
        -: 1222:#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \
        -: 1223:  template<typename... _Types> \
        -: 1224:    constexpr bool operator __OP(const variant<_Types...>& __lhs, \
        -: 1225:				 const variant<_Types...>& __rhs) \
        -: 1226:    { \
        -: 1227:      bool __ret = true; \
        -: 1228:      __detail::__variant::__raw_idx_visit( \
        -: 1229:        [&__ret, &__lhs] (auto&& __rhs_mem, auto __rhs_index) mutable \
        -: 1230:        { \
        -: 1231:	  if constexpr (__rhs_index != variant_npos) \
        -: 1232:	    { \
        -: 1233:	      if (__lhs.index() == __rhs_index) \
        -: 1234:	        { \
        -: 1235:		  auto& __this_mem = std::get<__rhs_index>(__lhs);	\
        -: 1236:                  __ret = __this_mem __OP __rhs_mem; \
        -: 1237:                } \
        -: 1238:	      else \
        -: 1239:		__ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
        -: 1240:            } \
        -: 1241:          else \
        -: 1242:            __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
        -: 1243:	}, __rhs); \
        -: 1244:      return __ret; \
        -: 1245:    }
        -: 1246:
        -: 1247:  _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
        -: 1248:  _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
        -: 1249:  _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)
        -: 1250:  _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)
        -: 1251:  _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
        -: 1252:  _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
        -: 1253:
        -: 1254:#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
        -: 1255:
        -: 1256:  constexpr bool operator==(monostate, monostate) noexcept { return true; }
        -: 1257:
        -: 1258:#ifdef __cpp_lib_three_way_comparison
        -: 1259:  template<typename... _Types>
        -: 1260:    requires (three_way_comparable<_Types> && ...)
        -: 1261:    constexpr
        -: 1262:    common_comparison_category_t<compare_three_way_result_t<_Types>...>
        -: 1263:    operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)
        -: 1264:    {
        -: 1265:      common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret
        -: 1266:	= strong_ordering::equal;
        -: 1267:
        -: 1268:      __detail::__variant::__raw_idx_visit(
        -: 1269:	[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable
        -: 1270:	{
        -: 1271:	  if constexpr (__w_index != variant_npos)
        -: 1272:	    {
        -: 1273:	      if (__v.index() == __w_index)
        -: 1274:		{
        -: 1275:		  auto& __this_mem = std::get<__w_index>(__v);
        -: 1276:		  __ret = __this_mem <=> __w_mem;
        -: 1277:		  return;
        -: 1278:		}
        -: 1279:	    }
        -: 1280:	  __ret = (__v.index() + 1) <=> (__w_index + 1);
        -: 1281:	}, __w);
        -: 1282:      return __ret;
        -: 1283:    }
        -: 1284:
        -: 1285:  constexpr strong_ordering
        -: 1286:  operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }
        -: 1287:#else
        -: 1288:  constexpr bool operator!=(monostate, monostate) noexcept { return false; }
        -: 1289:  constexpr bool operator<(monostate, monostate) noexcept { return false; }
        -: 1290:  constexpr bool operator>(monostate, monostate) noexcept { return false; }
        -: 1291:  constexpr bool operator<=(monostate, monostate) noexcept { return true; }
        -: 1292:  constexpr bool operator>=(monostate, monostate) noexcept { return true; }
        -: 1293:#endif
        -: 1294:
        -: 1295:  template<typename _Visitor, typename... _Variants>
        -: 1296:    constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>
        -: 1297:    visit(_Visitor&&, _Variants&&...);
        -: 1298:
        -: 1299:  template<typename... _Types>
        -: 1300:    inline enable_if_t<(is_move_constructible_v<_Types> && ...)
        -: 1301:			&& (is_swappable_v<_Types> && ...)>
        -: 1302:    swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
        -: 1303:    noexcept(noexcept(__lhs.swap(__rhs)))
        -: 1304:    { __lhs.swap(__rhs); }
        -: 1305:
        -: 1306:  template<typename... _Types>
        -: 1307:    enable_if_t<!((is_move_constructible_v<_Types> && ...)
        -: 1308:		   && (is_swappable_v<_Types> && ...))>
        -: 1309:    swap(variant<_Types...>&, variant<_Types...>&) = delete;
        -: 1310:
        -: 1311:  class bad_variant_access : public exception
        -: 1312:  {
        -: 1313:  public:
        -: 1314:    bad_variant_access() noexcept { }
        -: 1315:
    #####: 1316:    const char* what() const noexcept override
    #####: 1317:    { return _M_reason; }
    %%%%%: 1317-block  0
        -: 1318:
        -: 1319:  private:
    #####: 1320:    bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }
    %%%%%: 1320-block  0
        -: 1321:
        -: 1322:    // Must point to a string with static storage duration:
        -: 1323:    const char* _M_reason = "bad variant access";
        -: 1324:
        -: 1325:    friend void __throw_bad_variant_access(const char* __what);
        -: 1326:  };
        -: 1327:
        -: 1328:  // Must only be called with a string literal
        -: 1329:  inline void
    #####: 1330:  __throw_bad_variant_access(const char* __what)
    #####: 1331:  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
    %%%%%: 1331-block  0
        -: 1332:
        -: 1333:  inline void
    #####: 1334:  __throw_bad_variant_access(bool __valueless)
        -: 1335:  {
    #####: 1336:    if (__valueless) [[__unlikely__]]
    %%%%%: 1336-block  0
    #####: 1337:      __throw_bad_variant_access("std::get: variant is valueless");
    %%%%%: 1337-block  0
        -: 1338:    else
    #####: 1339:      __throw_bad_variant_access("std::get: wrong index for variant");
    %%%%%: 1339-block  0
    #####: 1340:  }
        -: 1341:
        -: 1342:  template<typename... _Types>
        -: 1343:    class variant
        -: 1344:    : private __detail::__variant::_Variant_base<_Types...>,
        -: 1345:      private _Enable_default_constructor<
        -: 1346:	__detail::__variant::_Traits<_Types...>::_S_default_ctor,
        -: 1347:	  variant<_Types...>>,
        -: 1348:      private _Enable_copy_move<
        -: 1349:	__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
        -: 1350:	__detail::__variant::_Traits<_Types...>::_S_copy_assign,
        -: 1351:	__detail::__variant::_Traits<_Types...>::_S_move_ctor,
        -: 1352:	__detail::__variant::_Traits<_Types...>::_S_move_assign,
        -: 1353:	variant<_Types...>>
        -: 1354:    {
        -: 1355:    private:
        -: 1356:      template <typename... _UTypes, typename _Tp>
        -: 1357:	friend decltype(auto) __variant_cast(_Tp&&);
        -: 1358:      template<size_t _Np, typename _Variant, typename... _Args>
        -: 1359:	friend void __variant_construct_by_index(_Variant& __v,
        -: 1360:						 _Args&&... __args);
        -: 1361:
        -: 1362:      static_assert(sizeof...(_Types) > 0,
        -: 1363:		    "variant must have at least one alternative");
        -: 1364:      static_assert(!(std::is_reference_v<_Types> || ...),
        -: 1365:		    "variant must have no reference alternative");
        -: 1366:      static_assert(!(std::is_void_v<_Types> || ...),
        -: 1367:		    "variant must have no void alternative");
        -: 1368:
        -: 1369:      using _Base = __detail::__variant::_Variant_base<_Types...>;
        -: 1370:      using _Default_ctor_enabler =
        -: 1371:	_Enable_default_constructor<
        -: 1372:	  __detail::__variant::_Traits<_Types...>::_S_default_ctor,
        -: 1373:	    variant<_Types...>>;
        -: 1374:
        -: 1375:      template<typename _Tp>
        -: 1376:	static constexpr bool __not_self
        -: 1377:	  = !is_same_v<__remove_cvref_t<_Tp>, variant>;
        -: 1378:
        -: 1379:      template<typename _Tp>
        -: 1380:	static constexpr bool
        -: 1381:	__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
        -: 1382:
        -: 1383:      template<typename _Tp>
        -: 1384:	static constexpr size_t __accepted_index
        -: 1385:	  = __detail::__variant::__accepted_index<_Tp, variant>::value;
        -: 1386:
        -: 1387:      template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
        -: 1388:	using __to_type = variant_alternative_t<_Np, variant>;
        -: 1389:
        -: 1390:      template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
        -: 1391:	using __accepted_type = __to_type<__accepted_index<_Tp>>;
        -: 1392:
        -: 1393:      template<typename _Tp>
        -: 1394:	static constexpr size_t __index_of =
        -: 1395:	  __detail::__variant::__index_of_v<_Tp, _Types...>;
        -: 1396:
        -: 1397:      using _Traits = __detail::__variant::_Traits<_Types...>;
        -: 1398:
        -: 1399:      template<typename _Tp>
        -: 1400:	struct __is_in_place_tag : false_type { };
        -: 1401:      template<typename _Tp>
        -: 1402:	struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };
        -: 1403:      template<size_t _Np>
        -: 1404:	struct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };
        -: 1405:
        -: 1406:      template<typename _Tp>
        -: 1407:	static constexpr bool __not_in_place_tag
        -: 1408:	  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;
        -: 1409:
        -: 1410:    public:
        -: 1411:      variant() = default;
        5: 1412:      variant(const variant& __rhs) = default;
------------------
_ZNSt7variantIJ15LeftLineCommand16RightLineCommandEEC2ERKS2_:
        3: 1412:      variant(const variant& __rhs) = default;
        3: 1412-block  0
------------------
_ZNSt7variantIJ12PointCommand11MoveCommandEEC2ERKS2_:
        2: 1412:      variant(const variant& __rhs) = default;
        2: 1412-block  0
------------------
        3: 1413:      variant(variant&&) = default;
------------------
_ZNSt7variantIJ15LeftLineCommand16RightLineCommandEEC2EOS2_:
        2: 1413:      variant(variant&&) = default;
        2: 1413-block  0
------------------
_ZNSt7variantIJ12PointCommand11MoveCommandEEC2EOS2_:
        1: 1413:      variant(variant&&) = default;
        1: 1413-block  0
------------------
        -: 1414:      variant& operator=(const variant&) = default;
        1: 1415:      variant& operator=(variant&&) = default;
        1: 1415-block  0
       25: 1416:      ~variant() = default;
------------------
_ZNSt7variantIJ12PointCommand11MoveCommandEED2Ev:
       10: 1416:      ~variant() = default;
       10: 1416-block  0
------------------
_ZNSt7variantIJ15LeftLineCommand16RightLineCommandEED2Ev:
       15: 1416:      ~variant() = default;
       15: 1416-block  0
------------------
        -: 1417:
        -: 1418:      template<typename _Tp,
        -: 1419:	       typename = enable_if_t<sizeof...(_Types) != 0>,
        -: 1420:	       typename = enable_if_t<__not_in_place_tag<_Tp>>,
        -: 1421:	       typename _Tj = __accepted_type<_Tp&&>,
        -: 1422:	       typename = enable_if_t<__exactly_once<_Tj>
        -: 1423:				      && is_constructible_v<_Tj, _Tp>>>
        -: 1424:	constexpr
       17: 1425:	variant(_Tp&& __t)
        -: 1426:	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
        -: 1427:	: variant(in_place_index<__accepted_index<_Tp>>,
       17: 1428:		  std::forward<_Tp>(__t))
       17: 1429:	{ }
------------------
_ZNSt7variantIJ15LeftLineCommand16RightLineCommandEEC2IS0_vvS0_vEEOT_:
        5: 1425:	variant(_Tp&& __t)
        -: 1426:	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
        -: 1427:	: variant(in_place_index<__accepted_index<_Tp>>,
        5: 1428:		  std::forward<_Tp>(__t))
        5: 1428-block  0
        5: 1429:	{ }
------------------
_ZNSt7variantIJ15LeftLineCommand16RightLineCommandEEC2IS1_vvS1_vEEOT_:
        5: 1425:	variant(_Tp&& __t)
        -: 1426:	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
        -: 1427:	: variant(in_place_index<__accepted_index<_Tp>>,
        5: 1428:		  std::forward<_Tp>(__t))
        5: 1428-block  0
        5: 1429:	{ }
------------------
_ZNSt7variantIJ12PointCommand11MoveCommandEEC2IS1_vvS1_vEEOT_:
        3: 1425:	variant(_Tp&& __t)
        -: 1426:	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
        -: 1427:	: variant(in_place_index<__accepted_index<_Tp>>,
        3: 1428:		  std::forward<_Tp>(__t))
        3: 1428-block  0
        3: 1429:	{ }
------------------
_ZNSt7variantIJ12PointCommand11MoveCommandEEC2IS0_vvS0_vEEOT_:
        4: 1425:	variant(_Tp&& __t)
        -: 1426:	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
        -: 1427:	: variant(in_place_index<__accepted_index<_Tp>>,
        4: 1428:		  std::forward<_Tp>(__t))
        4: 1428-block  0
        4: 1429:	{ }
------------------
        -: 1430:
        -: 1431:      template<typename _Tp, typename... _Args,
        -: 1432:	       typename = enable_if_t<__exactly_once<_Tp>
        -: 1433:				      && is_constructible_v<_Tp, _Args...>>>
        -: 1434:	constexpr explicit
        -: 1435:	variant(in_place_type_t<_Tp>, _Args&&... __args)
        -: 1436:	: variant(in_place_index<__index_of<_Tp>>,
        -: 1437:		  std::forward<_Args>(__args)...)
        -: 1438:	{ }
        -: 1439:
        -: 1440:      template<typename _Tp, typename _Up, typename... _Args,
        -: 1441:	       typename = enable_if_t<__exactly_once<_Tp>
        -: 1442:				      && is_constructible_v<_Tp,
        -: 1443:					   initializer_list<_Up>&, _Args...>>>
        -: 1444:	constexpr explicit
        -: 1445:	variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
        -: 1446:		_Args&&... __args)
        -: 1447:	: variant(in_place_index<__index_of<_Tp>>, __il,
        -: 1448:		  std::forward<_Args>(__args)...)
        -: 1449:	{ }
        -: 1450:
        -: 1451:      template<size_t _Np, typename... _Args,
        -: 1452:	       typename _Tp = __to_type<_Np>,
        -: 1453:	       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
        -: 1454:	constexpr explicit
       17: 1455:	variant(in_place_index_t<_Np>, _Args&&... __args)
        -: 1456:	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
       17: 1457:	_Default_ctor_enabler(_Enable_default_constructor_tag{})
       17: 1458:	{ }
------------------
_ZNSt7variantIJ15LeftLineCommand16RightLineCommandEEC2ILm0EJS0_ES0_vEESt16in_place_index_tIXT_EEDpOT0_:
        5: 1455:	variant(in_place_index_t<_Np>, _Args&&... __args)
        -: 1456:	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
        5: 1457:	_Default_ctor_enabler(_Enable_default_constructor_tag{})
        5: 1457-block  0
        5: 1458:	{ }
------------------
_ZNSt7variantIJ15LeftLineCommand16RightLineCommandEEC2ILm1EJS1_ES1_vEESt16in_place_index_tIXT_EEDpOT0_:
        5: 1455:	variant(in_place_index_t<_Np>, _Args&&... __args)
        -: 1456:	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
        5: 1457:	_Default_ctor_enabler(_Enable_default_constructor_tag{})
        5: 1457-block  0
        5: 1458:	{ }
------------------
_ZNSt7variantIJ12PointCommand11MoveCommandEEC2ILm1EJS1_ES1_vEESt16in_place_index_tIXT_EEDpOT0_:
        3: 1455:	variant(in_place_index_t<_Np>, _Args&&... __args)
        -: 1456:	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
        3: 1457:	_Default_ctor_enabler(_Enable_default_constructor_tag{})
        3: 1457-block  0
        3: 1458:	{ }
------------------
_ZNSt7variantIJ12PointCommand11MoveCommandEEC2ILm0EJS0_ES0_vEESt16in_place_index_tIXT_EEDpOT0_:
        4: 1455:	variant(in_place_index_t<_Np>, _Args&&... __args)
        -: 1456:	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
        4: 1457:	_Default_ctor_enabler(_Enable_default_constructor_tag{})
        4: 1457-block  0
        4: 1458:	{ }
------------------
        -: 1459:
        -: 1460:      template<size_t _Np, typename _Up, typename... _Args,
        -: 1461:	       typename _Tp = __to_type<_Np>,
        -: 1462:	       typename = enable_if_t<is_constructible_v<_Tp,
        -: 1463:							 initializer_list<_Up>&,
        -: 1464:							 _Args...>>>
        -: 1465:	constexpr explicit
        -: 1466:	variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
        -: 1467:		_Args&&... __args)
        -: 1468:	: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
        -: 1469:	_Default_ctor_enabler(_Enable_default_constructor_tag{})
        -: 1470:	{ }
        -: 1471:
        -: 1472:      template<typename _Tp>
        -: 1473:	enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
        -: 1474:		    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
        -: 1475:		    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
        -: 1476:		    variant&>
        -: 1477:	operator=(_Tp&& __rhs)
        -: 1478:	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
        -: 1479:		 && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
        -: 1480:	{
        -: 1481:	  constexpr auto __index = __accepted_index<_Tp>;
        -: 1482:	  if (index() == __index)
        -: 1483:	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
        -: 1484:	  else
        -: 1485:	    {
        -: 1486:	      using _Tj = __accepted_type<_Tp&&>;
        -: 1487:	      if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
        -: 1488:			    || !is_nothrow_move_constructible_v<_Tj>)
        -: 1489:		this->emplace<__index>(std::forward<_Tp>(__rhs));
        -: 1490:	      else
        -: 1491:		operator=(variant(std::forward<_Tp>(__rhs)));
        -: 1492:	    }
        -: 1493:	  return *this;
        -: 1494:	}
        -: 1495:
        -: 1496:      template<typename _Tp, typename... _Args>
        -: 1497:	enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
        -: 1498:		    _Tp&>
        -: 1499:	emplace(_Args&&... __args)
        -: 1500:	{
        -: 1501:	  constexpr size_t __index = __index_of<_Tp>;
        -: 1502:	  return this->emplace<__index>(std::forward<_Args>(__args)...);
        -: 1503:	}
        -: 1504:
        -: 1505:      template<typename _Tp, typename _Up, typename... _Args>
        -: 1506:	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
        -: 1507:		    && __exactly_once<_Tp>,
        -: 1508:		    _Tp&>
        -: 1509:	emplace(initializer_list<_Up> __il, _Args&&... __args)
        -: 1510:	{
        -: 1511:	  constexpr size_t __index = __index_of<_Tp>;
        -: 1512:	  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
        -: 1513:	}
        -: 1514:
        -: 1515:      template<size_t _Np, typename... _Args>
        -: 1516:	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
        -: 1517:				       _Args...>,
        -: 1518:		    variant_alternative_t<_Np, variant>&>
       1*: 1519:	emplace(_Args&&... __args)
        -: 1520:	{
        -: 1521:	  static_assert(_Np < sizeof...(_Types),
        -: 1522:			"The index must be in [0, number of alternatives)");
        -: 1523:	  using type = variant_alternative_t<_Np, variant>;
        -: 1524:	  // Provide the strong exception-safety guarantee when possible,
        -: 1525:	  // to avoid becoming valueless.
        -: 1526:	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
        -: 1527:	    {
       1*: 1528:	      this->_M_reset();
       1*: 1529:	      __variant_construct_by_index<_Np>(*this,
        -: 1530:		  std::forward<_Args>(__args)...);
        -: 1531:	    }
        -: 1532:	  else if constexpr (is_scalar_v<type>)
        -: 1533:	    {
        -: 1534:	      // This might invoke a potentially-throwing conversion operator:
        -: 1535:	      const type __tmp(std::forward<_Args>(__args)...);
        -: 1536:	      // But these steps won't throw:
        -: 1537:	      this->_M_reset();
        -: 1538:	      __variant_construct_by_index<_Np>(*this, __tmp);
        -: 1539:	    }
        -: 1540:	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
        -: 1541:	      && _Traits::_S_move_assign)
        -: 1542:	    {
        -: 1543:	      // This construction might throw:
        -: 1544:	      variant __tmp(in_place_index<_Np>,
        -: 1545:			    std::forward<_Args>(__args)...);
        -: 1546:	      // But _Never_valueless_alt<type> means this won't:
        -: 1547:	      *this = std::move(__tmp);
        -: 1548:	    }
        -: 1549:	  else
        -: 1550:	    {
        -: 1551:	      // This case only provides the basic exception-safety guarantee,
        -: 1552:	      // i.e. the variant can become valueless.
        -: 1553:	      this->_M_reset();
        -: 1554:	      __try
        -: 1555:		{
        -: 1556:		  __variant_construct_by_index<_Np>(*this,
        -: 1557:		    std::forward<_Args>(__args)...);
        -: 1558:		}
        -: 1559:	      __catch (...)
        -: 1560:		{
        -: 1561:		  using __index_type = decltype(this->_M_index);
        -: 1562:		  this->_M_index = static_cast<__index_type>(variant_npos);
        -: 1563:		  __throw_exception_again;
        -: 1564:		}
        -: 1565:	    }
       1*: 1566:	  return std::get<_Np>(*this);
        -: 1567:	}
------------------
_ZNSt7variantIJ15LeftLineCommand16RightLineCommandEE7emplaceILm1EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES2_E4typeEDpT0_EERS7_E4typeEDpOS8_:
    #####: 1519:	emplace(_Args&&... __args)
        -: 1520:	{
        -: 1521:	  static_assert(_Np < sizeof...(_Types),
        -: 1522:			"The index must be in [0, number of alternatives)");
        -: 1523:	  using type = variant_alternative_t<_Np, variant>;
        -: 1524:	  // Provide the strong exception-safety guarantee when possible,
        -: 1525:	  // to avoid becoming valueless.
        -: 1526:	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
        -: 1527:	    {
    #####: 1528:	      this->_M_reset();
    %%%%%: 1528-block  0
    #####: 1529:	      __variant_construct_by_index<_Np>(*this,
        -: 1530:		  std::forward<_Args>(__args)...);
        -: 1531:	    }
        -: 1532:	  else if constexpr (is_scalar_v<type>)
        -: 1533:	    {
        -: 1534:	      // This might invoke a potentially-throwing conversion operator:
        -: 1535:	      const type __tmp(std::forward<_Args>(__args)...);
        -: 1536:	      // But these steps won't throw:
        -: 1537:	      this->_M_reset();
        -: 1538:	      __variant_construct_by_index<_Np>(*this, __tmp);
        -: 1539:	    }
        -: 1540:	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
        -: 1541:	      && _Traits::_S_move_assign)
        -: 1542:	    {
        -: 1543:	      // This construction might throw:
        -: 1544:	      variant __tmp(in_place_index<_Np>,
        -: 1545:			    std::forward<_Args>(__args)...);
        -: 1546:	      // But _Never_valueless_alt<type> means this won't:
        -: 1547:	      *this = std::move(__tmp);
        -: 1548:	    }
        -: 1549:	  else
        -: 1550:	    {
        -: 1551:	      // This case only provides the basic exception-safety guarantee,
        -: 1552:	      // i.e. the variant can become valueless.
        -: 1553:	      this->_M_reset();
        -: 1554:	      __try
        -: 1555:		{
        -: 1556:		  __variant_construct_by_index<_Np>(*this,
        -: 1557:		    std::forward<_Args>(__args)...);
        -: 1558:		}
        -: 1559:	      __catch (...)
        -: 1560:		{
        -: 1561:		  using __index_type = decltype(this->_M_index);
        -: 1562:		  this->_M_index = static_cast<__index_type>(variant_npos);
        -: 1563:		  __throw_exception_again;
        -: 1564:		}
        -: 1565:	    }
    #####: 1566:	  return std::get<_Np>(*this);
        -: 1567:	}
------------------
_ZNSt7variantIJ15LeftLineCommand16RightLineCommandEE7emplaceILm0EJS0_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES2_E4typeEDpT0_EERS7_E4typeEDpOS8_:
        1: 1519:	emplace(_Args&&... __args)
        -: 1520:	{
        -: 1521:	  static_assert(_Np < sizeof...(_Types),
        -: 1522:			"The index must be in [0, number of alternatives)");
        -: 1523:	  using type = variant_alternative_t<_Np, variant>;
        -: 1524:	  // Provide the strong exception-safety guarantee when possible,
        -: 1525:	  // to avoid becoming valueless.
        -: 1526:	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
        -: 1527:	    {
        1: 1528:	      this->_M_reset();
        1: 1528-block  0
        1: 1529:	      __variant_construct_by_index<_Np>(*this,
        -: 1530:		  std::forward<_Args>(__args)...);
        -: 1531:	    }
        -: 1532:	  else if constexpr (is_scalar_v<type>)
        -: 1533:	    {
        -: 1534:	      // This might invoke a potentially-throwing conversion operator:
        -: 1535:	      const type __tmp(std::forward<_Args>(__args)...);
        -: 1536:	      // But these steps won't throw:
        -: 1537:	      this->_M_reset();
        -: 1538:	      __variant_construct_by_index<_Np>(*this, __tmp);
        -: 1539:	    }
        -: 1540:	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
        -: 1541:	      && _Traits::_S_move_assign)
        -: 1542:	    {
        -: 1543:	      // This construction might throw:
        -: 1544:	      variant __tmp(in_place_index<_Np>,
        -: 1545:			    std::forward<_Args>(__args)...);
        -: 1546:	      // But _Never_valueless_alt<type> means this won't:
        -: 1547:	      *this = std::move(__tmp);
        -: 1548:	    }
        -: 1549:	  else
        -: 1550:	    {
        -: 1551:	      // This case only provides the basic exception-safety guarantee,
        -: 1552:	      // i.e. the variant can become valueless.
        -: 1553:	      this->_M_reset();
        -: 1554:	      __try
        -: 1555:		{
        -: 1556:		  __variant_construct_by_index<_Np>(*this,
        -: 1557:		    std::forward<_Args>(__args)...);
        -: 1558:		}
        -: 1559:	      __catch (...)
        -: 1560:		{
        -: 1561:		  using __index_type = decltype(this->_M_index);
        -: 1562:		  this->_M_index = static_cast<__index_type>(variant_npos);
        -: 1563:		  __throw_exception_again;
        -: 1564:		}
        -: 1565:	    }
        1: 1566:	  return std::get<_Np>(*this);
        -: 1567:	}
------------------
        -: 1568:
        -: 1569:      template<size_t _Np, typename _Up, typename... _Args>
        -: 1570:	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
        -: 1571:				       initializer_list<_Up>&, _Args...>,
        -: 1572:		    variant_alternative_t<_Np, variant>&>
        -: 1573:	emplace(initializer_list<_Up> __il, _Args&&... __args)
        -: 1574:	{
        -: 1575:	  static_assert(_Np < sizeof...(_Types),
        -: 1576:			"The index must be in [0, number of alternatives)");
        -: 1577:	  using type = variant_alternative_t<_Np, variant>;
        -: 1578:	  // Provide the strong exception-safety guarantee when possible,
        -: 1579:	  // to avoid becoming valueless.
        -: 1580:	  if constexpr (is_nothrow_constructible_v<type,
        -: 1581:						   initializer_list<_Up>&,
        -: 1582:						   _Args...>)
        -: 1583:	    {
        -: 1584:	      this->_M_reset();
        -: 1585:	      __variant_construct_by_index<_Np>(*this, __il,
        -: 1586:		  std::forward<_Args>(__args)...);
        -: 1587:	    }
        -: 1588:	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
        -: 1589:	      && _Traits::_S_move_assign)
        -: 1590:	    {
        -: 1591:	      // This construction might throw:
        -: 1592:	      variant __tmp(in_place_index<_Np>, __il,
        -: 1593:			    std::forward<_Args>(__args)...);
        -: 1594:	      // But _Never_valueless_alt<type> means this won't:
        -: 1595:	      *this = std::move(__tmp);
        -: 1596:	    }
        -: 1597:	  else
        -: 1598:	    {
        -: 1599:	      // This case only provides the basic exception-safety guarantee,
        -: 1600:	      // i.e. the variant can become valueless.
        -: 1601:	      this->_M_reset();
        -: 1602:	      __try
        -: 1603:		{
        -: 1604:		  __variant_construct_by_index<_Np>(*this, __il,
        -: 1605:		    std::forward<_Args>(__args)...);
        -: 1606:		}
        -: 1607:	      __catch (...)
        -: 1608:		{
        -: 1609:		  using __index_type = decltype(this->_M_index);
        -: 1610:		  this->_M_index = static_cast<__index_type>(variant_npos);
        -: 1611:		  __throw_exception_again;
        -: 1612:		}
        -: 1613:	    }
        -: 1614:	  return std::get<_Np>(*this);
        -: 1615:	}
        -: 1616:
        5: 1617:      constexpr bool valueless_by_exception() const noexcept
        5: 1618:      { return !this->_M_valid(); }
------------------
_ZNKSt7variantIJ15LeftLineCommand16RightLineCommandEE22valueless_by_exceptionEv:
        3: 1617:      constexpr bool valueless_by_exception() const noexcept
        3: 1618:      { return !this->_M_valid(); }
        3: 1618-block  0
------------------
_ZNKSt7variantIJ12PointCommand11MoveCommandEE22valueless_by_exceptionEv:
        2: 1617:      constexpr bool valueless_by_exception() const noexcept
        2: 1618:      { return !this->_M_valid(); }
        2: 1618-block  0
------------------
        -: 1619:
       48: 1620:      constexpr size_t index() const noexcept
        -: 1621:      {
        -: 1622:	using __index_type = typename _Base::__index_type;
        -: 1623:	if constexpr (__detail::__variant::__never_valueless<_Types...>())
        -: 1624:	  return this->_M_index;
        -: 1625:	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
       48: 1626:	  return make_signed_t<__index_type>(this->_M_index);
        -: 1627:	else
        -: 1628:	  return size_t(__index_type(this->_M_index + 1)) - 1;
        -: 1629:      }
------------------
_ZNKSt7variantIJ12PointCommand11MoveCommandEE5indexEv:
       18: 1620:      constexpr size_t index() const noexcept
        -: 1621:      {
        -: 1622:	using __index_type = typename _Base::__index_type;
        -: 1623:	if constexpr (__detail::__variant::__never_valueless<_Types...>())
        -: 1624:	  return this->_M_index;
        -: 1625:	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
       18: 1626:	  return make_signed_t<__index_type>(this->_M_index);
       18: 1626-block  0
        -: 1627:	else
        -: 1628:	  return size_t(__index_type(this->_M_index + 1)) - 1;
        -: 1629:      }
------------------
_ZNKSt7variantIJ15LeftLineCommand16RightLineCommandEE5indexEv:
       30: 1620:      constexpr size_t index() const noexcept
        -: 1621:      {
        -: 1622:	using __index_type = typename _Base::__index_type;
        -: 1623:	if constexpr (__detail::__variant::__never_valueless<_Types...>())
        -: 1624:	  return this->_M_index;
        -: 1625:	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
       30: 1626:	  return make_signed_t<__index_type>(this->_M_index);
       30: 1626-block  0
        -: 1627:	else
        -: 1628:	  return size_t(__index_type(this->_M_index + 1)) - 1;
        -: 1629:      }
------------------
        -: 1630:
        -: 1631:      void
        -: 1632:      swap(variant& __rhs)
        -: 1633:      noexcept((__is_nothrow_swappable<_Types>::value && ...)
        -: 1634:	       && is_nothrow_move_constructible_v<variant>)
        -: 1635:      {
        -: 1636:	__detail::__variant::__raw_idx_visit(
        -: 1637:	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
        -: 1638:	  {
        -: 1639:	    if constexpr (__rhs_index != variant_npos)
        -: 1640:	      {
        -: 1641:		if (this->index() == __rhs_index)
        -: 1642:		  {
        -: 1643:		    auto& __this_mem =
        -: 1644:		      std::get<__rhs_index>(*this);
        -: 1645:		    using std::swap;
        -: 1646:		    swap(__this_mem, __rhs_mem);
        -: 1647:		  }
        -: 1648:		else
        -: 1649:		  {
        -: 1650:		    if (!this->valueless_by_exception()) [[__likely__]]
        -: 1651:		      {
        -: 1652:			auto __tmp(std::move(__rhs_mem));
        -: 1653:			__rhs = std::move(*this);
        -: 1654:			this->_M_destructive_move(__rhs_index,
        -: 1655:						  std::move(__tmp));
        -: 1656:		      }
        -: 1657:		    else
        -: 1658:		      {
        -: 1659:			this->_M_destructive_move(__rhs_index,
        -: 1660:						  std::move(__rhs_mem));
        -: 1661:			__rhs._M_reset();
        -: 1662:		      }
        -: 1663:		  }
        -: 1664:	      }
        -: 1665:	    else
        -: 1666:	      {
        -: 1667:		if (!this->valueless_by_exception()) [[__likely__]]
        -: 1668:		  {
        -: 1669:		    __rhs = std::move(*this);
        -: 1670:		    this->_M_reset();
        -: 1671:		  }
        -: 1672:	      }
        -: 1673:	  }, __rhs);
        -: 1674:      }
        -: 1675:
        -: 1676:    private:
        -: 1677:
        -: 1678:#if defined(__clang__) && __clang_major__ <= 7
        -: 1679:    public:
        -: 1680:      using _Base::_M_u; // See https://bugs.llvm.org/show_bug.cgi?id=31852
        -: 1681:    private:
        -: 1682:#endif
        -: 1683:
        -: 1684:      template<size_t _Np, typename _Vp>
        -: 1685:	friend constexpr decltype(auto)
        -: 1686:	__detail::__variant::__get(_Vp&& __v) noexcept;
        -: 1687:
        -: 1688:      template<typename _Vp>
        -: 1689:	friend void*
        -: 1690:	__detail::__variant::__get_storage(_Vp&& __v) noexcept;
        -: 1691:
        -: 1692:#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \
        -: 1693:      template<typename... _Tp> \
        -: 1694:	friend constexpr bool \
        -: 1695:	operator __OP(const variant<_Tp...>& __lhs, \
        -: 1696:		      const variant<_Tp...>& __rhs);
        -: 1697:
        -: 1698:      _VARIANT_RELATION_FUNCTION_TEMPLATE(<)
        -: 1699:      _VARIANT_RELATION_FUNCTION_TEMPLATE(<=)
        -: 1700:      _VARIANT_RELATION_FUNCTION_TEMPLATE(==)
        -: 1701:      _VARIANT_RELATION_FUNCTION_TEMPLATE(!=)
        -: 1702:      _VARIANT_RELATION_FUNCTION_TEMPLATE(>=)
        -: 1703:      _VARIANT_RELATION_FUNCTION_TEMPLATE(>)
        -: 1704:
        -: 1705:#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
        -: 1706:    };
        -: 1707:
        -: 1708:  template<size_t _Np, typename... _Types>
        -: 1709:    constexpr variant_alternative_t<_Np, variant<_Types...>>&
       1*: 1710:    get(variant<_Types...>& __v)
        -: 1711:    {
        -: 1712:      static_assert(_Np < sizeof...(_Types),
        -: 1713:		    "The index must be in [0, number of alternatives)");
       1*: 1714:      if (__v.index() != _Np)
    #####: 1715:	__throw_bad_variant_access(__v.valueless_by_exception());
       1*: 1716:      return __detail::__variant::__get<_Np>(__v);
        -: 1717:    }
------------------
_ZSt3getILm1EJ15LeftLineCommand16RightLineCommandEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_:
    #####: 1710:    get(variant<_Types...>& __v)
        -: 1711:    {
        -: 1712:      static_assert(_Np < sizeof...(_Types),
        -: 1713:		    "The index must be in [0, number of alternatives)");
    #####: 1714:      if (__v.index() != _Np)
    %%%%%: 1714-block  0
    #####: 1715:	__throw_bad_variant_access(__v.valueless_by_exception());
    %%%%%: 1715-block  0
    #####: 1716:      return __detail::__variant::__get<_Np>(__v);
    %%%%%: 1716-block  0
        -: 1717:    }
------------------
_ZSt3getILm0EJ15LeftLineCommand16RightLineCommandEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_:
        1: 1710:    get(variant<_Types...>& __v)
        -: 1711:    {
        -: 1712:      static_assert(_Np < sizeof...(_Types),
        -: 1713:		    "The index must be in [0, number of alternatives)");
        1: 1714:      if (__v.index() != _Np)
        1: 1714-block  0
    #####: 1715:	__throw_bad_variant_access(__v.valueless_by_exception());
    %%%%%: 1715-block  0
        1: 1716:      return __detail::__variant::__get<_Np>(__v);
        1: 1716-block  0
        -: 1717:    }
------------------
        -: 1718:
        -: 1719:  template<size_t _Np, typename... _Types>
        -: 1720:    constexpr variant_alternative_t<_Np, variant<_Types...>>&&
        -: 1721:    get(variant<_Types...>&& __v)
        -: 1722:    {
        -: 1723:      static_assert(_Np < sizeof...(_Types),
        -: 1724:		    "The index must be in [0, number of alternatives)");
        -: 1725:      if (__v.index() != _Np)
        -: 1726:	__throw_bad_variant_access(__v.valueless_by_exception());
        -: 1727:      return __detail::__variant::__get<_Np>(std::move(__v));
        -: 1728:    }
        -: 1729:
        -: 1730:  template<size_t _Np, typename... _Types>
        -: 1731:    constexpr const variant_alternative_t<_Np, variant<_Types...>>&
        -: 1732:    get(const variant<_Types...>& __v)
        -: 1733:    {
        -: 1734:      static_assert(_Np < sizeof...(_Types),
        -: 1735:		    "The index must be in [0, number of alternatives)");
        -: 1736:      if (__v.index() != _Np)
        -: 1737:	__throw_bad_variant_access(__v.valueless_by_exception());
        -: 1738:      return __detail::__variant::__get<_Np>(__v);
        -: 1739:    }
        -: 1740:
        -: 1741:  template<size_t _Np, typename... _Types>
        -: 1742:    constexpr const variant_alternative_t<_Np, variant<_Types...>>&&
        -: 1743:    get(const variant<_Types...>&& __v)
        -: 1744:    {
        -: 1745:      static_assert(_Np < sizeof...(_Types),
        -: 1746:		    "The index must be in [0, number of alternatives)");
        -: 1747:      if (__v.index() != _Np)
        -: 1748:	__throw_bad_variant_access(__v.valueless_by_exception());
        -: 1749:      return __detail::__variant::__get<_Np>(std::move(__v));
        -: 1750:    }
        -: 1751:
        -: 1752:  /// @cond undocumented
        -: 1753:  template<typename _Result_type, typename _Visitor, typename... _Variants>
        -: 1754:    constexpr decltype(auto)
       40: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
       40: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
       40: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
       35: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
       40: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
_ZSt10__do_visitINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS1_15_Move_ctor_baseILb0EJS4_S5_EEES7_EEvOT0_OT1_EUlOT_E_JSt7variantIJS4_S5_EEEEDcSA_DpOT1_:
        2: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
        2: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
        2: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
        2: 1760-block  0
        2: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
        2: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
_ZSt10__do_visitINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJ12PointCommand11MoveCommandERNS1_15_Move_ctor_baseILb0EJS4_S5_EEES7_EEvOT0_OT1_EUlOT_E_JSt7variantIJS4_S5_EEEEDcSA_DpOT1_:
        1: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
        1: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
        1: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
        1: 1760-block  0
        1: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
        1: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
_ZSt10__do_visitINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJ15LeftLineCommand16RightLineCommandERNS1_15_Copy_ctor_baseILb0EJS4_S5_EEERKS7_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS4_S5_EEEEDcSC_DpOT1_:
        3: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
        3: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
        3: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
        3: 1760-block  0
        3: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
        3: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
_ZSt10__do_visitINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJ12PointCommand11MoveCommandERNS1_15_Copy_ctor_baseILb0EJS4_S5_EEERKS7_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS4_S5_EEEEDcSC_DpOT1_:
        2: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
        2: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
        2: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
        2: 1760-block  0
        2: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
        2: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
_ZSt10__do_visitINSt8__detail9__variant21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_EJRSt7variantIJ15LeftLineCommand16RightLineCommandEEEEDcOT0_DpOT1_:
        3: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
        3: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
        3: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
        3: 1760-block  0
        -: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
        3: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
_ZSt10__do_visitINSt8__detail9__variant21__deduce_visit_resultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNL11stringVisitMUlRKT_E_EJRSt7variantIJ12PointCommand11MoveCommandEEEEDcOT0_DpOT1_:
        2: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
        2: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
        2: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
        2: 1760-block  0
        -: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
        2: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
_ZSt10__do_visitINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJ15LeftLineCommand16RightLineCommandEEaSEOS6_EUlOT_T0_E_JRSt7variantIJS4_S5_EEEEDcOSA_DpOT1_:
        1: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
        1: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
        1: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
        1: 1760-block  0
        1: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
        1: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
_ZSt10__do_visitIvZNSt8__detail9__variant16_Variant_storageILb0EJ12PointCommand11MoveCommandEE8_M_resetEvEUlOT_E_JRSt7variantIJS3_S4_EEEEDcOT0_DpOT1_:
       10: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
       10: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
       10: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
       10: 1760-block  0
       10: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
       10: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
_ZSt10__do_visitIvZNSt8__detail9__variant16_Variant_storageILb0EJ15LeftLineCommand16RightLineCommandEE8_M_resetEvEUlOT_E_JRSt7variantIJS3_S4_EEEEDcOT0_DpOT1_:
       16: 1755:    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1756:    {
       16: 1757:      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
        -: 1758:	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
        -: 1759:
       16: 1760:      auto __func_ptr = __vtable._M_access(__variants.index()...);
       16: 1760-block  0
       16: 1761:      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
       16: 1762:			   std::forward<_Variants>(__variants)...);
        -: 1763:    }
------------------
        -: 1764:  /// @endcond
        -: 1765:
        -: 1766:  template<typename _Visitor, typename... _Variants>
        -: 1767:    constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>
        5: 1768:    visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1769:    {
        -: 1770:      namespace __variant = std::__detail::__variant;
        -: 1771:
        5: 1772:      if ((__variant::__as(__variants).valueless_by_exception() || ...))
    #####: 1773:	__throw_bad_variant_access("std::visit: variant is valueless");
        -: 1774:
        -: 1775:      using _Result_type
        -: 1776:	= __detail::__variant::__visit_result_t<_Visitor, _Variants...>;
        -: 1777:
        -: 1778:      using _Tag = __detail::__variant::__deduce_visit_result<_Result_type>;
        -: 1779:
        -: 1780:      if constexpr (sizeof...(_Variants) == 1)
        -: 1781:	{
        -: 1782:	  using _Vp = decltype(__variant::__as(std::declval<_Variants>()...));
        -: 1783:
        5: 1784:	  constexpr bool __visit_rettypes_match = __detail::__variant::
        -: 1785:	    __check_visitor_results<_Visitor, _Vp>(
        -: 1786:	      make_index_sequence<variant_size_v<remove_reference_t<_Vp>>>());
        -: 1787:	  if constexpr (!__visit_rettypes_match)
        -: 1788:	    {
        -: 1789:	      static_assert(__visit_rettypes_match,
        -: 1790:			  "std::visit requires the visitor to have the same "
        -: 1791:			  "return type for all alternatives of a variant");
        -: 1792:	      return;
        -: 1793:	    }
        -: 1794:	  else
        -: 1795:	    return std::__do_visit<_Tag>(
        -: 1796:	      std::forward<_Visitor>(__visitor),
        5: 1797:	      static_cast<_Vp>(__variants)...);
        -: 1798:	}
        -: 1799:      else
        -: 1800:	return std::__do_visit<_Tag>(
        -: 1801:	  std::forward<_Visitor>(__visitor),
        -: 1802:	  __variant::__as(std::forward<_Variants>(__variants))...);
        -: 1803:    }
        -: 1804:
        -: 1805:#if __cplusplus > 201703L
        -: 1806:  template<typename _Res, typename _Visitor, typename... _Variants>
        -: 1807:    constexpr _Res
        -: 1808:    visit(_Visitor&& __visitor, _Variants&&... __variants)
        -: 1809:    {
        -: 1810:      namespace __variant = std::__detail::__variant;
        -: 1811:
        -: 1812:      if ((__variant::__as(__variants).valueless_by_exception() || ...))
        -: 1813:	__throw_bad_variant_access("std::visit<R>: variant is valueless");
        -: 1814:
        -: 1815:      return std::__do_visit<_Res>(std::forward<_Visitor>(__visitor),
        -: 1816:	  __variant::__as(std::forward<_Variants>(__variants))...);
        -: 1817:    }
        -: 1818:#endif
        -: 1819:
        -: 1820:  /// @cond undocumented
        -: 1821:  template<bool, typename... _Types>
        -: 1822:    struct __variant_hash_call_base_impl
        -: 1823:    {
        -: 1824:      size_t
        -: 1825:      operator()(const variant<_Types...>& __t) const
        -: 1826:      noexcept((is_nothrow_invocable_v<hash<decay_t<_Types>>, _Types> && ...))
        -: 1827:      {
        -: 1828:	size_t __ret;
        -: 1829:	__detail::__variant::__raw_visit(
        -: 1830:	  [&__t, &__ret](auto&& __t_mem) mutable
        -: 1831:	  {
        -: 1832:	    using _Type = __remove_cvref_t<decltype(__t_mem)>;
        -: 1833:	    if constexpr (!is_same_v<_Type,
        -: 1834:			             __detail::__variant::__variant_cookie>)
        -: 1835:	      __ret = std::hash<size_t>{}(__t.index())
        -: 1836:		      + std::hash<_Type>{}(__t_mem);
        -: 1837:	    else
        -: 1838:	      __ret = std::hash<size_t>{}(__t.index());
        -: 1839:	  }, __t);
        -: 1840:	return __ret;
        -: 1841:      }
        -: 1842:    };
        -: 1843:
        -: 1844:  template<typename... _Types>
        -: 1845:    struct __variant_hash_call_base_impl<false, _Types...> {};
        -: 1846:
        -: 1847:  template<typename... _Types>
        -: 1848:    using __variant_hash_call_base =
        -: 1849:    __variant_hash_call_base_impl<(__poison_hash<remove_const_t<_Types>>::
        -: 1850:				   __enable_hash_call &&...), _Types...>;
        -: 1851:  /// @endcond
        -: 1852:
        -: 1853:  template<typename... _Types>
        -: 1854:    struct hash<variant<_Types...>>
        -: 1855:    : private __detail::__variant::_Variant_hash_base<
        -: 1856:	variant<_Types...>, std::index_sequence_for<_Types...>>,
        -: 1857:      public __variant_hash_call_base<_Types...>
        -: 1858:    {
        -: 1859:      using result_type [[__deprecated__]] = size_t;
        -: 1860:      using argument_type [[__deprecated__]] = variant<_Types...>;
        -: 1861:    };
        -: 1862:
        -: 1863:  template<>
        -: 1864:    struct hash<monostate>
        -: 1865:    {
        -: 1866:      using result_type [[__deprecated__]] = size_t;
        -: 1867:      using argument_type [[__deprecated__]] = monostate;
        -: 1868:
        -: 1869:      size_t
        -: 1870:      operator()(const monostate&) const noexcept
        -: 1871:      {
        -: 1872:	constexpr size_t __magic_monostate_hash = -7777;
        -: 1873:	return __magic_monostate_hash;
        -: 1874:      }
        -: 1875:    };
        -: 1876:
        -: 1877:  template<typename... _Types>
        -: 1878:    struct __is_fast_hash<hash<variant<_Types...>>>
        -: 1879:    : bool_constant<(__is_fast_hash<_Types>::value && ...)>
        -: 1880:    { };
        -: 1881:
        -: 1882:_GLIBCXX_END_NAMESPACE_VERSION
        -: 1883:} // namespace std
        -: 1884:
        -: 1885:#endif // C++17
        -: 1886:
        -: 1887:#endif // _GLIBCXX_VARIANT

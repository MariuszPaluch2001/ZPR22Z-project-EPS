        -:    0:Source:/home/kacper/Pulpit/zpr_eps/src/Algorithm.hpp
        -:    0:Graph:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/AlgorithmTest.dir/AlgorithmTest.cc.gcno
        -:    0:Data:/home/kacper/Pulpit/zpr_eps/cmake-build-debug-coverage/tests/CMakeFiles/AlgorithmTest.dir/AlgorithmTest.cc.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kacper on 07.12.2022.
        -:    3:// File contains class representing Algorithm
        -:    4://
        -:    5:
        -:    6:#ifndef ZPR_ALGORITHM_HPP
        -:    7:#define ZPR_ALGORITHM_HPP
        -:    8:#include "GraphicCommands.h"
        -:    9:#include "Scalar2DRepresentation.h"
        -:   10:#include <functional>
        -:   11:#include <variant>
        -:   12:#include <vector>
        -:   13:
        -:   14:
        -:   15:
        -:   16:using RelativeBatch = std::vector<RelativeCommandVar>;
        -:   17:using AbsoluteBatch = std::vector<AbsoluteCommandVar>;
        -:   18:/*
        -:   19: * Algorithm is used for processing batch of commands according to final
        -:   20: * resolution of the picture
        -:   21: */
        -:   22:
        -:   23:
        -:   24:class Algorithm {
        -:   25:private:
        -:   26:  double min_difference_;
        -:   27:  double scaling_factor_;
        -:   28:  unsigned sorting_range_;
        -:   29:public:
       14:   30:    explicit Algorithm(double min_difference, double scaling_factor=1, unsigned sorting_range=10) : min_difference_(min_difference), scaling_factor_(scaling_factor), sorting_range_(sorting_range) {}
        4:   31:  double getMinDifference() const { return min_difference_; }
        4:   31-block  0
        2:   32:  void setMinDifference(double min_difference) { min_difference_ = min_difference >= 0 ? min_difference : min_difference_; }
        2:   32-block  0
        1:   32-block  1
        1:   32-block  2
        2:   33:  double getScalingFactor() const { return scaling_factor_; }
        2:   33-block  0
        2:   34:  void setScalingFactor(double scaling_factor) { scaling_factor_ = scaling_factor > 0 ? scaling_factor : scaling_factor_; }
        2:   34-block  0
        1:   34-block  1
        1:   34-block  2
        2:   35:  unsigned getSortingRange() const { return sorting_range_; }
        2:   35-block  0
        1:   36:  void setSortingRange(unsigned sorting_range) { sorting_range_ = sorting_range; }
        -:   37:    template <typename T> void rescaleBatch(T&) const;
        -:   38:    template <typename T> T processBatch(const T&) const;
        -:   39:    template <typename T> void sortBatch(T&) const;
        -:   40:
        -:   41:};
        -:   42:
        3:   43:static auto rescaleVisit = [](double scaling_factor) {
       10:   44:    return [scaling_factor](auto &graphic) {
       10:   45:        graphic.rescale(scaling_factor);
       13:   46:    };
        3:   46-block  0
------------------
_ZZNKL12rescaleVisitMUldE_clEdENKUlRT_E_clI16RightLineCommandEEDaS1_:
        1:   44:    return [scaling_factor](auto &graphic) {
        1:   45:        graphic.rescale(scaling_factor);
        1:   45-block  0
        1:   46:    };
------------------
_ZZNKL12rescaleVisitMUldE_clEdENKUlRT_E_clI11MoveCommandEEDaS1_:
        1:   44:    return [scaling_factor](auto &graphic) {
        1:   45:        graphic.rescale(scaling_factor);
        1:   45-block  0
        1:   46:    };
------------------
_ZZNKL12rescaleVisitMUldE_clEdENKUlRT_E_clI15LeftLineCommandEEDaS1_:
        1:   44:    return [scaling_factor](auto &graphic) {
        1:   45:        graphic.rescale(scaling_factor);
        1:   45-block  0
        1:   46:    };
------------------
_ZZNKL12rescaleVisitMUldE_clEdENKUlRT_E_clI12PointCommandEEDaS1_:
        7:   44:    return [scaling_factor](auto &graphic) {
        7:   45:        graphic.rescale(scaling_factor);
        7:   45-block  0
        7:   46:    };
------------------
        -:   47:};
        -:   48:
      33*:   49:static auto differenceVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
      33*:   50:    return countDifference(prevGraphic, nextGraphic);
        -:   51:};
------------------
_ZNKL15differenceVisitMUlRKT_RKT0_E_clI16RightLineCommandS7_EEDaS1_S4_:
        1:   49:static auto differenceVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
        1:   50:    return countDifference(prevGraphic, nextGraphic);
        1:   50-block  0
        -:   51:};
------------------
_ZNKL15differenceVisitMUlRKT_RKT0_E_clI16RightLineCommand15LeftLineCommandEEDaS1_S4_:
        1:   49:static auto differenceVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
        1:   50:    return countDifference(prevGraphic, nextGraphic);
        1:   50-block  0
        -:   51:};
------------------
_ZNKL15differenceVisitMUlRKT_RKT0_E_clI15LeftLineCommand16RightLineCommandEEDaS1_S4_:
        1:   49:static auto differenceVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
        1:   50:    return countDifference(prevGraphic, nextGraphic);
        1:   50-block  0
        -:   51:};
------------------
_ZNKL15differenceVisitMUlRKT_RKT0_E_clI11MoveCommandS7_EEDaS1_S4_:
    #####:   49:static auto differenceVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
    #####:   50:    return countDifference(prevGraphic, nextGraphic);
    %%%%%:   50-block  0
        -:   51:};
------------------
_ZNKL15differenceVisitMUlRKT_RKT0_E_clI11MoveCommand12PointCommandEEDaS1_S4_:
    #####:   49:static auto differenceVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
    #####:   50:    return countDifference(prevGraphic, nextGraphic);
    %%%%%:   50-block  0
        -:   51:};
------------------
_ZNKL15differenceVisitMUlRKT_RKT0_E_clI12PointCommand11MoveCommandEEDaS1_S4_:
    #####:   49:static auto differenceVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
    #####:   50:    return countDifference(prevGraphic, nextGraphic);
    %%%%%:   50-block  0
        -:   51:};
------------------
_ZNKL15differenceVisitMUlRKT_RKT0_E_clI15LeftLineCommandS7_EEDaS1_S4_:
        1:   49:static auto differenceVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
        1:   50:    return countDifference(prevGraphic, nextGraphic);
        1:   50-block  0
        -:   51:};
------------------
_ZNKL15differenceVisitMUlRKT_RKT0_E_clI12PointCommandS7_EEDaS1_S4_:
       29:   49:static auto differenceVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
       29:   50:    return countDifference(prevGraphic, nextGraphic);
       29:   50-block  0
        -:   51:};
------------------
       4*:   52:static auto midpointVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
       4*:   53:    return createMidpoint(prevGraphic, nextGraphic);
        -:   54:};
------------------
_ZNKL13midpointVisitMUlRKT_RKT0_E_clI16RightLineCommandS7_EEDaS1_S4_:
        1:   52:static auto midpointVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
        1:   53:    return createMidpoint(prevGraphic, nextGraphic);
        1:   53-block  0
        -:   54:};
------------------
_ZNKL13midpointVisitMUlRKT_RKT0_E_clI16RightLineCommand15LeftLineCommandEEDaS1_S4_:
    #####:   52:static auto midpointVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
    #####:   53:    return createMidpoint(prevGraphic, nextGraphic);
    %%%%%:   53-block  0
        -:   54:};
------------------
_ZNKL13midpointVisitMUlRKT_RKT0_E_clI15LeftLineCommand16RightLineCommandEEDaS1_S4_:
    #####:   52:static auto midpointVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
    #####:   53:    return createMidpoint(prevGraphic, nextGraphic);
    %%%%%:   53-block  0
        -:   54:};
------------------
_ZNKL13midpointVisitMUlRKT_RKT0_E_clI11MoveCommandS7_EEDaS1_S4_:
    #####:   52:static auto midpointVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
    #####:   53:    return createMidpoint(prevGraphic, nextGraphic);
    %%%%%:   53-block  0
        -:   54:};
------------------
_ZNKL13midpointVisitMUlRKT_RKT0_E_clI11MoveCommand12PointCommandEEDaS1_S4_:
    #####:   52:static auto midpointVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
    #####:   53:    return createMidpoint(prevGraphic, nextGraphic);
    %%%%%:   53-block  0
        -:   54:};
------------------
_ZNKL13midpointVisitMUlRKT_RKT0_E_clI12PointCommand11MoveCommandEEDaS1_S4_:
    #####:   52:static auto midpointVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
    #####:   53:    return createMidpoint(prevGraphic, nextGraphic);
    %%%%%:   53-block  0
        -:   54:};
------------------
_ZNKL13midpointVisitMUlRKT_RKT0_E_clI15LeftLineCommandS7_EEDaS1_S4_:
        1:   52:static auto midpointVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
        1:   53:    return createMidpoint(prevGraphic, nextGraphic);
        1:   53-block  0
        -:   54:};
------------------
_ZNKL13midpointVisitMUlRKT_RKT0_E_clI12PointCommandS7_EEDaS1_S4_:
        2:   52:static auto midpointVisit = [](const auto &prevGraphic, const auto &nextGraphic) {
        2:   53:    return createMidpoint(prevGraphic, nextGraphic);
        2:   53-block  0
        -:   54:};
------------------
        -:   55:
        -:   56:
        -:   57:
        -:   58:template <typename T>
        3:   59:void Algorithm::rescaleBatch(T& batch) const {
        3:   60:    auto visit = rescaleVisit(scaling_factor_);
       13:   61:    for (auto & graphic : batch)
       10:   62:        std::visit(visit, graphic);
        3:   63:}
------------------
_ZNK9Algorithm12rescaleBatchISt6vectorISt7variantIJ15LeftLineCommand16RightLineCommandEESaIS5_EEEEvRT_:
        1:   59:void Algorithm::rescaleBatch(T& batch) const {
        1:   60:    auto visit = rescaleVisit(scaling_factor_);
        1:   60-block  0
        3:   61:    for (auto & graphic : batch)
        2:   61-block  0
        2:   61-block  1
        3:   61-block  2
        2:   62:        std::visit(visit, graphic);
        1:   63:}
        1:   63-block  0
------------------
_ZNK9Algorithm12rescaleBatchISt6vectorISt7variantIJ12PointCommand11MoveCommandEESaIS5_EEEEvRT_:
        2:   59:void Algorithm::rescaleBatch(T& batch) const {
        2:   60:    auto visit = rescaleVisit(scaling_factor_);
        2:   60-block  0
       10:   61:    for (auto & graphic : batch)
        8:   61-block  0
        8:   61-block  1
       10:   61-block  2
        8:   62:        std::visit(visit, graphic);
        2:   63:}
        2:   63-block  0
------------------
        -:   64:
        -:   65:template <typename T>
        6:   66:T Algorithm::processBatch(const T& batch) const {
        -:   67:    // no processing is needed
        6:   68:    if (batch.size() < 2)
        4:   69:        return batch;
        2:   70:    auto prev_graphic_command = batch.at(0);
        2:   71:    T post_processing{};
        -:   72:
        -:   73:
        -:   74:// starting with second element of the batch we process batch elements
       11:   75:    for (auto iter = batch.cbegin() + 1; iter != batch.cend(); iter++) {
        9:   76:        double difference = std::visit(differenceVisit, prev_graphic_command, *iter);
        9:   77:        if (difference <= min_difference_)
        4:   78:            prev_graphic_command = std::visit(midpointVisit, prev_graphic_command, *iter);
        -:   79:        else {
        5:   80:            post_processing.push_back(prev_graphic_command);
        5:   81:            prev_graphic_command = *iter;
        -:   82:        }
        -:   83:    }
        -:   84:// we push the last element of the processed batch
        2:   85:    post_processing.push_back(prev_graphic_command);
        2:   86:    return post_processing;
        2:   87:}
------------------
_ZNK9Algorithm12processBatchISt6vectorISt7variantIJ15LeftLineCommand16RightLineCommandEESaIS5_EEEET_RKS8_:
        3:   66:T Algorithm::processBatch(const T& batch) const {
        -:   67:    // no processing is needed
        3:   68:    if (batch.size() < 2)
        3:   68-block  0
        2:   69:        return batch;
        2:   69-block  0
        1:   70:    auto prev_graphic_command = batch.at(0);
        1:   70-block  0
        1:   70-block  1
        1:   71:    T post_processing{};
        1:   71-block  0
        -:   72:
        -:   73:
        -:   74:// starting with second element of the batch we process batch elements
        5:   75:    for (auto iter = batch.cbegin() + 1; iter != batch.cend(); iter++) {
        4:   75-block  0
        5:   75-block  1
        4:   76:        double difference = std::visit(differenceVisit, prev_graphic_command, *iter);
        4:   76-block  0
        4:   77:        if (difference <= min_difference_)
        4:   77-block  0
        2:   78:            prev_graphic_command = std::visit(midpointVisit, prev_graphic_command, *iter);
        2:   78-block  0
        2:   78-block  1
        -:   79:        else {
        2:   80:            post_processing.push_back(prev_graphic_command);
        2:   80-block  0
        2:   81:            prev_graphic_command = *iter;
        2:   81-block  0
        -:   82:        }
        -:   83:    }
        -:   84:// we push the last element of the processed batch
        1:   85:    post_processing.push_back(prev_graphic_command);
        1:   85-block  0
        1:   86:    return post_processing;
        1:   86-block  0
        1:   87:}
    $$$$$:   87-block  0
    $$$$$:   87-block  1
------------------
_ZNK9Algorithm12processBatchISt6vectorISt7variantIJ12PointCommand11MoveCommandEESaIS5_EEEET_RKS8_:
        3:   66:T Algorithm::processBatch(const T& batch) const {
        -:   67:    // no processing is needed
        3:   68:    if (batch.size() < 2)
        3:   68-block  0
        2:   69:        return batch;
        2:   69-block  0
        1:   70:    auto prev_graphic_command = batch.at(0);
        1:   70-block  0
        1:   70-block  1
        1:   71:    T post_processing{};
        1:   71-block  0
        -:   72:
        -:   73:
        -:   74:// starting with second element of the batch we process batch elements
        6:   75:    for (auto iter = batch.cbegin() + 1; iter != batch.cend(); iter++) {
        5:   75-block  0
        6:   75-block  1
        5:   76:        double difference = std::visit(differenceVisit, prev_graphic_command, *iter);
        5:   76-block  0
        5:   77:        if (difference <= min_difference_)
        5:   77-block  0
        2:   78:            prev_graphic_command = std::visit(midpointVisit, prev_graphic_command, *iter);
        2:   78-block  0
        2:   78-block  1
        -:   79:        else {
        3:   80:            post_processing.push_back(prev_graphic_command);
        3:   80-block  0
        3:   81:            prev_graphic_command = *iter;
        3:   81-block  0
        -:   82:        }
        -:   83:    }
        -:   84:// we push the last element of the processed batch
        1:   85:    post_processing.push_back(prev_graphic_command);
        1:   85-block  0
        1:   86:    return post_processing;
        1:   86-block  0
        1:   87:}
    $$$$$:   87-block  0
    $$$$$:   87-block  1
------------------
        -:   88:template <typename T>
        3:   89:void Algorithm::sortBatch(T & batch) const {
        5:   90:    for (int i = 0; i + sorting_range_ <= batch.size(); i+=sorting_range_) {
        3:   90-block  0
        2:   90-block  1
        5:   90-block  2
    $$$$$:   90-block  3
        2:   91:        auto working_element = batch.at(i);
        2:   91-block  0
        2:   91-block  1
        2:   92:        auto stopping = batch.begin()  + i + sorting_range_;
        2:   92-block  0
       10:   93:        for (auto iter = batch.begin()  +1 + i; iter != stopping; iter++) {
        8:   93-block  0
       10:   93-block  1
        8:   94:            auto minimal = std::min_element(iter, stopping, [&working_element](auto & a, auto & b){
        8:   94-block  0
       12:   95:                return std::visit(differenceVisit, working_element, a) < std::visit(differenceVisit, working_element, b);});
       12:   95-block  0
        8:   96:            std::iter_swap(iter, minimal);
        8:   96-block  0
        8:   97:            working_element = *iter;
        -:   98:        }
        -:   99:    }
        3:  100:}
        3:  100-block  0
        -:  101:
        -:  102:
        -:  103:#endif // ZPR_ALGORITHM_HPP
